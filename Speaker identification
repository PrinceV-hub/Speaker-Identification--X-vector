{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"file_extension":".py","mimetype":"text/x-python","name":"python","npconvert_exporter":"python","pygments_lexer":"ipython3","version":3,"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":881667,"sourceType":"datasetVersion","datasetId":470244},{"sourceId":12937170,"sourceType":"datasetVersion","datasetId":8186593},{"sourceId":12941843,"sourceType":"datasetVersion","datasetId":8189885}],"dockerImageVersionId":29853,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import the required packages\nimport os\nimport numpy as np \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pathlib\nimport pandas as pd\nimport librosa.display\nfrom tqdm import tqdm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.preprocessing import LabelEncoder","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:22.037629Z","iopub.execute_input":"2025-09-02T21:20:22.037956Z","iopub.status.idle":"2025-09-02T21:20:23.698873Z","shell.execute_reply.started":"2025-09-02T21:20:22.037897Z","shell.execute_reply":"2025-09-02T21:20:23.698042Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"DATASET\n","metadata":{}},{"cell_type":"code","source":"import os\n\nDATA_PATH = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/\"\n\n# list all folders (each speaker)\nprint(\"Speakers:\", os.listdir(DATA_PATH))\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:23.700802Z","iopub.execute_input":"2025-09-02T21:20:23.701038Z","iopub.status.idle":"2025-09-02T21:20:23.721550Z","shell.execute_reply.started":"2025-09-02T21:20:23.700998Z","shell.execute_reply":"2025-09-02T21:20:23.720864Z"}},"outputs":[{"name":"stdout","text":"Speakers: ['Nelson_Mandela', 'Benjamin_Netanyau', 'other', '_background_noise_', 'tf_Wav_reader.py', 'Magaret_Tarcher', 'Jens_Stoltenberg', 'Julia_Gillard']\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# example for Nelson mandela\nexample_folder = os.path.join(DATA_PATH, \"Nelson_Mandela\")\nprint(\"Total files in Nelson Mandela folder=\", len(os.listdir(example_folder)))\nprint(\"First 10 files:\", os.listdir(example_folder)[:10])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:23.722604Z","iopub.execute_input":"2025-09-02T21:20:23.722808Z","iopub.status.idle":"2025-09-02T21:20:23.860449Z","shell.execute_reply.started":"2025-09-02T21:20:23.722764Z","shell.execute_reply":"2025-09-02T21:20:23.859742Z"}},"outputs":[{"name":"stdout","text":"Total files in Nelson Mandela folder= 1500\nFirst 10 files: ['611.wav', '364.wav', '367.wav', '116.wav', '1490.wav', '374.wav', '1359.wav', '485.wav', '456.wav', '626.wav']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Speakers (ignore background / other files)\nspeakers = [f for f in os.listdir(DATA_PATH) \n            if os.path.isdir(os.path.join(DATA_PATH, f)) \n            and not f.startswith(\"_\") \n            and not f.lower().startswith(\"other\")]\n\nprint(\"Speakers found:\", speakers)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:23.861861Z","iopub.execute_input":"2025-09-02T21:20:23.862145Z","iopub.status.idle":"2025-09-02T21:20:23.867602Z","shell.execute_reply.started":"2025-09-02T21:20:23.862091Z","shell.execute_reply":"2025-09-02T21:20:23.867027Z"}},"outputs":[{"name":"stdout","text":"Speakers found: ['Nelson_Mandela', 'Benjamin_Netanyau', 'Magaret_Tarcher', 'Jens_Stoltenberg', 'Julia_Gillard']\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"speakers","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:23.870184Z","iopub.execute_input":"2025-09-02T21:20:23.870398Z","iopub.status.idle":"2025-09-02T21:20:23.880573Z","shell.execute_reply.started":"2025-09-02T21:20:23.870353Z","shell.execute_reply":"2025-09-02T21:20:23.879633Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"['Nelson_Mandela',\n 'Benjamin_Netanyau',\n 'Magaret_Tarcher',\n 'Jens_Stoltenberg',\n 'Julia_Gillard']"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# collecting Meta data","metadata":{}},{"cell_type":"code","source":"# Metadata collection\ndata_info = []\n\nfor spk in speakers:\n    folder = os.path.join(DATA_PATH, spk)\n    files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n    \n    for f in files:  # use all files, not just first 50\n        file_path = os.path.join(folder, f)\n        y, sr = librosa.load(file_path, sr=None)\n        duration = librosa.get_duration(y=y, sr=sr)\n        data_info.append([spk, f, sr, duration, file_path])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:20:23.882569Z","iopub.execute_input":"2025-09-02T21:20:23.882812Z","iopub.status.idle":"2025-09-02T21:21:47.526651Z","shell.execute_reply.started":"2025-09-02T21:20:23.882745Z","shell.execute_reply":"2025-09-02T21:21:47.525674Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Create DataFrame\ndf = pd.DataFrame(data_info, columns=[\"speaker\", \"file\", \"sample_rate\", \"duration\", \"file_path\"])\nprint(df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.527997Z","iopub.execute_input":"2025-09-02T21:21:47.528253Z","iopub.status.idle":"2025-09-02T21:21:47.553605Z","shell.execute_reply.started":"2025-09-02T21:21:47.528192Z","shell.execute_reply":"2025-09-02T21:21:47.552903Z"}},"outputs":[{"name":"stdout","text":"          speaker      file  sample_rate  duration  \\\n0  Nelson_Mandela   611.wav        16000       1.0   \n1  Nelson_Mandela   364.wav        16000       1.0   \n2  Nelson_Mandela   367.wav        16000       1.0   \n3  Nelson_Mandela   116.wav        16000       1.0   \n4  Nelson_Mandela  1490.wav        16000       1.0   \n\n                                           file_path  \n0  /kaggle/input/speaker-recognition-dataset/1600...  \n1  /kaggle/input/speaker-recognition-dataset/1600...  \n2  /kaggle/input/speaker-recognition-dataset/1600...  \n3  /kaggle/input/speaker-recognition-dataset/1600...  \n4  /kaggle/input/speaker-recognition-dataset/1600...  \n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# count files for each speaker\nfile_counts = []\nfor spk in speakers:\n    folder = os.path.join(DATA_PATH, spk)\n    files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n    file_counts.append([spk, len(files)])\n\ndf_counts = pd.DataFrame(file_counts, columns=[\"speaker\", \"num_files\"])\nprint(df_counts)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.554798Z","iopub.execute_input":"2025-09-02T21:21:47.555049Z","iopub.status.idle":"2025-09-02T21:21:47.572072Z","shell.execute_reply.started":"2025-09-02T21:21:47.554991Z","shell.execute_reply":"2025-09-02T21:21:47.571251Z"}},"outputs":[{"name":"stdout","text":"             speaker  num_files\n0     Nelson_Mandela       1500\n1  Benjamin_Netanyau       1500\n2    Magaret_Tarcher       1500\n3   Jens_Stoltenberg       1500\n4      Julia_Gillard       1501\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Unique speakers\nspeakers = df['speaker'].unique()\nprint(\"Speakers in dataset:\", speakers)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.573126Z","iopub.execute_input":"2025-09-02T21:21:47.573350Z","iopub.status.idle":"2025-09-02T21:21:47.580104Z","shell.execute_reply.started":"2025-09-02T21:21:47.573305Z","shell.execute_reply":"2025-09-02T21:21:47.579415Z"}},"outputs":[{"name":"stdout","text":"Speakers in dataset: ['Nelson_Mandela' 'Benjamin_Netanyau' 'Magaret_Tarcher' 'Jens_Stoltenberg'\n 'Julia_Gillard']\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"#sampling rate for each speaker\nsr_summary = df.groupby(\"speaker\")[\"sample_rate\"].unique()\n\nprint(sr_summary)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.581364Z","iopub.execute_input":"2025-09-02T21:21:47.581577Z","iopub.status.idle":"2025-09-02T21:21:47.604720Z","shell.execute_reply.started":"2025-09-02T21:21:47.581540Z","shell.execute_reply":"2025-09-02T21:21:47.603979Z"}},"outputs":[{"name":"stdout","text":"speaker\nBenjamin_Netanyau    [16000]\nJens_Stoltenberg     [16000]\nJulia_Gillard        [16000]\nMagaret_Tarcher      [16000]\nNelson_Mandela       [16000]\nName: sample_rate, dtype: object\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"import seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.605569Z","iopub.execute_input":"2025-09-02T21:21:47.605818Z","iopub.status.idle":"2025-09-02T21:21:47.706572Z","shell.execute_reply.started":"2025-09-02T21:21:47.605741Z","shell.execute_reply":"2025-09-02T21:21:47.705942Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"Graphical presentation","metadata":{}},{"cell_type":"code","source":"# 1. Number of files per speaker\nplt.figure(figsize=(8,5))\nsns.countplot(x=\"speaker\", data=df)\nplt.title(\"Number of Audio Files per Speaker\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=30)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.707639Z","iopub.execute_input":"2025-09-02T21:21:47.707879Z","iopub.status.idle":"2025-09-02T21:21:47.961463Z","shell.execute_reply.started":"2025-09-02T21:21:47.707829Z","shell.execute_reply":"2025-09-02T21:21:47.960469Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 576x360 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":15},{"cell_type":"code","source":"plt.figure(figsize=(8,5))\nsns.distplot(df[\"duration\"], bins=30, kde=True)\nplt.xlabel(\"Audio Duration (seconds)\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of Audio Durations\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:47.962876Z","iopub.execute_input":"2025-09-02T21:21:47.963214Z","iopub.status.idle":"2025-09-02T21:21:48.281032Z","shell.execute_reply.started":"2025-09-02T21:21:47.963160Z","shell.execute_reply":"2025-09-02T21:21:48.280050Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:487: RuntimeWarning: invalid value encountered in true_divide\n  binned = fast_linbin(X, a, b, gridsize) / (delta * nobs)\n/opt/conda/lib/python3.6/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars\n  FAC1 = 2*(np.pi*bw/RANGE)**2\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 576x360 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":16},{"cell_type":"code","source":"# 3. Sampling rate distribution\nplt.figure(figsize=(6,4))\nsns.countplot(x=\"sample_rate\", data=df)\nplt.title(\"Sampling Rate Distribution\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:48.282478Z","iopub.execute_input":"2025-09-02T21:21:48.282849Z","iopub.status.idle":"2025-09-02T21:21:48.403819Z","shell.execute_reply.started":"2025-09-02T21:21:48.282784Z","shell.execute_reply":"2025-09-02T21:21:48.402944Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":17},{"cell_type":"code","source":"pip install --upgrade librosa\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:48.404868Z","iopub.execute_input":"2025-09-02T21:21:48.405056Z","iopub.status.idle":"2025-09-02T21:21:55.566367Z","shell.execute_reply.started":"2025-09-02T21:21:48.405022Z","shell.execute_reply":"2025-09-02T21:21:55.565568Z"}},"outputs":[{"name":"stdout","text":"Collecting librosa\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e4/1c/23ef2fd02913d65d43dc7516fc829af709314a66c6f0bdc2e361fdcecc2d/librosa-0.9.2-py3-none-any.whl (214kB)\n\u001b[K     |████████████████████████████████| 215kB 10.6MB/s eta 0:00:01\n\u001b[?25hRequirement already satisfied, skipping upgrade: soundfile>=0.10.2 in /opt/conda/lib/python3.6/site-packages (from librosa) (0.10.3.post1)\nRequirement already satisfied, skipping upgrade: scipy>=1.2.0 in /opt/conda/lib/python3.6/site-packages (from librosa) (1.4.1)\nRequirement already satisfied, skipping upgrade: numpy>=1.17.0 in /opt/conda/lib/python3.6/site-packages (from librosa) (1.18.1)\nRequirement already satisfied, skipping upgrade: scikit-learn>=0.19.1 in /opt/conda/lib/python3.6/site-packages (from librosa) (0.21.3)\nRequirement already satisfied, skipping upgrade: decorator>=4.0.10 in /opt/conda/lib/python3.6/site-packages (from librosa) (4.4.1)\nRequirement already satisfied, skipping upgrade: resampy>=0.2.2 in /opt/conda/lib/python3.6/site-packages (from librosa) (0.2.2)\nRequirement already satisfied, skipping upgrade: numba>=0.45.1 in /opt/conda/lib/python3.6/site-packages (from librosa) (0.47.0)\nCollecting pooch>=1.0\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8d/64/8e1bfeda3ba0f267b2d9a918e8ca51db8652d0e1a3412a5b3dbce85d90b6/pooch-1.6.0-py3-none-any.whl (56kB)\n\u001b[K     |████████████████████████████████| 61kB 6.5MB/s  eta 0:00:01\n\u001b[?25hRequirement already satisfied, skipping upgrade: packaging>=20.0 in /opt/conda/lib/python3.6/site-packages (from librosa) (20.0)\nRequirement already satisfied, skipping upgrade: joblib>=0.14 in /opt/conda/lib/python3.6/site-packages (from librosa) (0.14.1)\nCollecting audioread>=2.1.9\n  Downloading https://files.pythonhosted.org/packages/57/8d/30aa32745af16af0a9a650115fbe81bde7c610ed5c21b381fca0196f3a7f/audioread-3.0.1-py3-none-any.whl\nRequirement already satisfied, skipping upgrade: cffi>=1.0 in /opt/conda/lib/python3.6/site-packages (from soundfile>=0.10.2->librosa) (1.13.2)\nRequirement already satisfied, skipping upgrade: six>=1.3 in /opt/conda/lib/python3.6/site-packages (from resampy>=0.2.2->librosa) (1.14.0)\nRequirement already satisfied, skipping upgrade: llvmlite>=0.31.0dev0 in /opt/conda/lib/python3.6/site-packages (from numba>=0.45.1->librosa) (0.31.0)\nRequirement already satisfied, skipping upgrade: setuptools in /opt/conda/lib/python3.6/site-packages (from numba>=0.45.1->librosa) (44.0.0.post20200106)\nRequirement already satisfied, skipping upgrade: appdirs>=1.3.0 in /opt/conda/lib/python3.6/site-packages (from pooch>=1.0->librosa) (1.4.3)\nRequirement already satisfied, skipping upgrade: requests>=2.19.0 in /opt/conda/lib/python3.6/site-packages (from pooch>=1.0->librosa) (2.22.0)\nRequirement already satisfied, skipping upgrade: pyparsing>=2.0.2 in /opt/conda/lib/python3.6/site-packages (from packaging>=20.0->librosa) (2.4.6)\nRequirement already satisfied, skipping upgrade: pycparser in /opt/conda/lib/python3.6/site-packages (from cffi>=1.0->soundfile>=0.10.2->librosa) (2.19)\nRequirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/conda/lib/python3.6/site-packages (from requests>=2.19.0->pooch>=1.0->librosa) (1.25.7)\nRequirement already satisfied, skipping upgrade: chardet<3.1.0,>=3.0.2 in /opt/conda/lib/python3.6/site-packages (from requests>=2.19.0->pooch>=1.0->librosa) (3.0.4)\nRequirement already satisfied, skipping upgrade: idna<2.9,>=2.5 in /opt/conda/lib/python3.6/site-packages (from requests>=2.19.0->pooch>=1.0->librosa) (2.8)\nRequirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /opt/conda/lib/python3.6/site-packages (from requests>=2.19.0->pooch>=1.0->librosa) (2019.11.28)\nInstalling collected packages: pooch, audioread, librosa\n  Found existing installation: audioread 2.1.8\n    Uninstalling audioread-2.1.8:\n      Successfully uninstalled audioread-2.1.8\n  Found existing installation: librosa 0.7.2\n    Uninstalling librosa-0.7.2:\n      Successfully uninstalled librosa-0.7.2\nSuccessfully installed audioread-3.0.1 librosa-0.9.2 pooch-1.6.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"df ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.568391Z","iopub.execute_input":"2025-09-02T21:21:55.568743Z","iopub.status.idle":"2025-09-02T21:21:55.590472Z","shell.execute_reply.started":"2025-09-02T21:21:55.568677Z","shell.execute_reply":"2025-09-02T21:21:55.589794Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"             speaker      file  sample_rate  duration  \\\n0     Nelson_Mandela   611.wav        16000       1.0   \n1     Nelson_Mandela   364.wav        16000       1.0   \n2     Nelson_Mandela   367.wav        16000       1.0   \n3     Nelson_Mandela   116.wav        16000       1.0   \n4     Nelson_Mandela  1490.wav        16000       1.0   \n...              ...       ...          ...       ...   \n7496   Julia_Gillard   454.wav        16000       1.0   \n7497   Julia_Gillard   189.wav        16000       1.0   \n7498   Julia_Gillard  1289.wav        16000       1.0   \n7499   Julia_Gillard  1499.wav        16000       1.0   \n7500   Julia_Gillard   188.wav        16000       1.0   \n\n                                              file_path  \n0     /kaggle/input/speaker-recognition-dataset/1600...  \n1     /kaggle/input/speaker-recognition-dataset/1600...  \n2     /kaggle/input/speaker-recognition-dataset/1600...  \n3     /kaggle/input/speaker-recognition-dataset/1600...  \n4     /kaggle/input/speaker-recognition-dataset/1600...  \n...                                                 ...  \n7496  /kaggle/input/speaker-recognition-dataset/1600...  \n7497  /kaggle/input/speaker-recognition-dataset/1600...  \n7498  /kaggle/input/speaker-recognition-dataset/1600...  \n7499  /kaggle/input/speaker-recognition-dataset/1600...  \n7500  /kaggle/input/speaker-recognition-dataset/1600...  \n\n[7501 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>speaker</th>\n      <th>file</th>\n      <th>sample_rate</th>\n      <th>duration</th>\n      <th>file_path</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nelson_Mandela</td>\n      <td>611.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nelson_Mandela</td>\n      <td>364.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nelson_Mandela</td>\n      <td>367.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Nelson_Mandela</td>\n      <td>116.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Nelson_Mandela</td>\n      <td>1490.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7496</th>\n      <td>Julia_Gillard</td>\n      <td>454.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>7497</th>\n      <td>Julia_Gillard</td>\n      <td>189.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>7498</th>\n      <td>Julia_Gillard</td>\n      <td>1289.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>7499</th>\n      <td>Julia_Gillard</td>\n      <td>1499.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n    <tr>\n      <th>7500</th>\n      <td>Julia_Gillard</td>\n      <td>188.wav</td>\n      <td>16000</td>\n      <td>1.0</td>\n      <td>/kaggle/input/speaker-recognition-dataset/1600...</td>\n    </tr>\n  </tbody>\n</table>\n<p>7501 rows × 5 columns</p>\n</div>"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# base_dir = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Benjamin_Netanyau\"\n\n# # Pehle row ka filename lo\n# file_name = df[\"file\"].iloc[0]\n\n# # Absolute path banao\n# file_path = os.path.join(base_dir, file_name)\n\n# print(\"Loading:\", file_path)\n\n# # Load audio\n# y, sr = librosa.load(file_path, sr=None)\n# print(\"Audio shape:\", y.shape)\n# print(\"Sampling rate:\", sr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.591647Z","iopub.execute_input":"2025-09-02T21:21:55.591981Z","iopub.status.idle":"2025-09-02T21:21:55.596764Z","shell.execute_reply.started":"2025-09-02T21:21:55.591908Z","shell.execute_reply":"2025-09-02T21:21:55.596028Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# from IPython.display import Audio\n\n# # Example file path\n# file_path = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Julia_Gillard/1000.wav\"\n\n# # Load audio\n# y, sr = librosa.load(file_path, sr=None)   # sr=None => original sampling rate\n# print(\"Audio loaded with shape:\", y.shape, \"Sampling Rate:\", sr)\n\n# # Play audio\n# Audio(data=y, rate=sr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.598142Z","iopub.execute_input":"2025-09-02T21:21:55.598422Z","iopub.status.idle":"2025-09-02T21:21:55.607395Z","shell.execute_reply.started":"2025-09-02T21:21:55.598369Z","shell.execute_reply":"2025-09-02T21:21:55.606822Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# Extract MFCC features\n#the 1st audio file of Nelson Mandela\nmfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)   # 13 MFCC coefficients\n\nprint(\"MFCC shape:\", mfccs.shape)  # (n_mfcc, time_frames)\n\n# Plot MFCC\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(mfccs, x_axis='time', sr=sr)\nplt.colorbar(format=\"%+2.0f dB\")\nplt.title(\"MFCC\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"MFCC Coefficients\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.608365Z","iopub.execute_input":"2025-09-02T21:21:55.608536Z","iopub.status.idle":"2025-09-02T21:21:55.932778Z","shell.execute_reply.started":"2025-09-02T21:21:55.608505Z","shell.execute_reply":"2025-09-02T21:21:55.931732Z"}},"outputs":[{"name":"stdout","text":"MFCC shape: (13, 32)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x288 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":22},{"cell_type":"code","source":"# Step 1: Import additional libraries needed for X-vector implementation\nprint(\"Step 1: Importing additional libraries for X-vector...\")\n\n# Additional TensorFlow/Keras imports\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import (\n    Input, Dense, BatchNormalization, Dropout, \n    GlobalAveragePooling1D, Concatenate, Lambda\n)\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import (\n    ModelCheckpoint, ReduceLROnPlateau, EarlyStopping, TensorBoard\n)\nfrom tensorflow.keras.utils import to_categorical\n\n# Additional utilities\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Verify TensorFlow GPU availability (if applicable)\nprint(f\" TensorFlow version: {tf.__version__}\")\nprint(f\" Available devices: {tf.config.list_physical_devices()}\")\n\n# Check if GPU is available\nif tf.config.list_physical_devices('GPU'):\n    print(\" GPU detected and available for training!\")\n    # Set memory growth to avoid OOM errors\n    gpus = tf.config.experimental.list_physical_devices('GPU')\n    if gpus:\n        try:\n            tf.config.experimental.set_memory_growth(gpus[0], True)\n            print(\" GPU memory growth enabled\")\n        except RuntimeError as e:\n            print(f\" GPU memory setup warning: {e}\")\nelse:\n    print(\"⚡ Running on CPU\")\n\nprint(\" All additional libraries imported successfully!\")\nprint(\"\\nReady for Step 2: Feature extraction function...\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.934852Z","iopub.execute_input":"2025-09-02T21:21:55.935418Z","iopub.status.idle":"2025-09-02T21:21:55.956413Z","shell.execute_reply.started":"2025-09-02T21:21:55.935353Z","shell.execute_reply":"2025-09-02T21:21:55.955246Z"}},"outputs":[{"name":"stdout","text":"Step 1: Importing additional libraries for X-vector...\n TensorFlow version: 2.1.0\n Available devices: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:XLA_CPU:0', device_type='XLA_CPU'), PhysicalDevice(name='/physical_device:XLA_GPU:0', device_type='XLA_GPU'), PhysicalDevice(name='/physical_device:XLA_GPU:1', device_type='XLA_GPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n GPU detected and available for training!\n GPU memory setup warning: Physical devices cannot be modified after being initialized\n All additional libraries imported successfully!\n\nReady for Step 2: Feature extraction function...\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"# Step 2: Feature extraction function optimized for X-vector","metadata":{}},{"cell_type":"code","source":"#this section only give a varibale length matrix (time_frame , n_mfcc)\nprint(\" Step 2: Creating feature extraction function for X-vector...\")\n\ndef extract_mfcc_features(audio_path, sr=16000, n_mfcc=23, n_fft=512, hop_length=160):\n    \"\"\"\n    Extract MFCC features optimized for X-vector training\n    \n    Parameters:\n    - audio_path: Path to audio file\n    - sr: Sample rate (16kHz is standard for X-vector)\n    - n_mfcc: Number of MFCC coefficients (23 is standard)\n    - n_fft: FFT window size \n    - hop_length: Hop length for STFT (10ms at 16kHz)\n    \n    Returns:\n    - mfccs: MFCC features as (time_frames, n_mfcc) array\n    \"\"\"\n    try:\n        # Load audio with target sample rate\n        y, _ = librosa.load(audio_path, sr=sr)\n        \n        # Remove silence (optional but recommended)\n        y, _ = librosa.effects.trim(y, top_db=20)\n        \n        # Extract MFCC features\n        mfccs = librosa.feature.mfcc(\n            y=y, \n            sr=sr, \n            n_mfcc=n_mfcc,\n            n_fft=n_fft,\n            hop_length=hop_length,\n            window='hamming',\n            center=False  # Important for X-vector\n        )\n        \n        # Apply cepstral mean normalization (CMN) per utterance\n        mfccs = mfccs - np.mean(mfccs, axis=1, keepdims=True)\n        \n        # Transpose to get (time_frames, n_mfcc) shape\n        return mfccs.T  \n        \n    except Exception as e:\n        print(f\" Error extracting features from {audio_path}: {e}\")\n        return None\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.958960Z","iopub.execute_input":"2025-09-02T21:21:55.959311Z","iopub.status.idle":"2025-09-02T21:21:55.975395Z","shell.execute_reply.started":"2025-09-02T21:21:55.959256Z","shell.execute_reply":"2025-09-02T21:21:55.974371Z"}},"outputs":[{"name":"stdout","text":" Step 2: Creating feature extraction function for X-vector...\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"#this section help in creating the fixed size segment for input to model\ndef create_segments(features, window_length=400, step_size=200):\n    \"\"\"\n    Create overlapping segments from MFCC features\n    \n    Parameters:\n    - features: MFCC features array (time_frames, n_mfcc)\n    - window_length: Number of frames per segment (400 ≈ 2.5s at 16kHz)\n    - step_size: Step between segments (200 ≈ 1.25s overlap)\n    \n    Returns:\n    - segments: Array of shape (num_segments, window_length, n_mfcc)\n    \"\"\"\n    if features.shape[0] < window_length:\n        # If audio is too short, pad with zeros\n        padding = window_length - features.shape[0]\n        features = np.pad(features, ((0, padding), (0, 0)), mode='constant', constant_values=0)\n        return np.array([features])  # Return single segment\n    \n    segments = []\n    start = 0\n    \n    while start + window_length <= features.shape[0]:\n        segment = features[start:start + window_length]\n        segments.append(segment)\n        start += step_size\n        \n        # Optional: limit max segments per file to prevent memory issues\n        if len(segments) >= 50:  # Max 50 segments per file\n            break\n    \n    return np.array(segments) if segments else np.array([])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.977210Z","iopub.execute_input":"2025-09-02T21:21:55.977710Z","iopub.status.idle":"2025-09-02T21:21:55.994149Z","shell.execute_reply.started":"2025-09-02T21:21:55.977650Z","shell.execute_reply":"2025-09-02T21:21:55.993172Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# Configuration parameters for X-vector\nSAMPLE_RATE = 16000\nN_MFCC = 23  # X-vector typically uses 23 MFCC features\nWINDOW_LENGTH = 400  # Number of frames per segment\nSTEP_SIZE = 200      # Overlap between segments\nMIN_DURATION = 1.0   # Minimum duration in seconds\n\nprint(\"X-Vector Configuration:\")\nprint(f\"- Sample Rate: {SAMPLE_RATE} Hz\")\nprint(f\"- MFCC Features: {N_MFCC}\")\nprint(f\"- Window Length: {WINDOW_LENGTH} frames\")\nprint(f\"- Step Size: {STEP_SIZE} frames\")\nprint(f\"- Minimum Duration: {MIN_DURATION} seconds\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:55.995709Z","iopub.execute_input":"2025-09-02T21:21:55.996288Z","iopub.status.idle":"2025-09-02T21:21:56.012462Z","shell.execute_reply.started":"2025-09-02T21:21:55.996229Z","shell.execute_reply":"2025-09-02T21:21:56.011487Z"}},"outputs":[{"name":"stdout","text":"X-Vector Configuration:\n- Sample Rate: 16000 Hz\n- MFCC Features: 23\n- Window Length: 400 frames\n- Step Size: 200 frames\n- Minimum Duration: 1.0 seconds\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# Test the feature extraction with a sample\nprint(\"\\n Testing feature extraction function...\")\n\n# You can change this to test with any audio file\ntest_audio_path = \"/kaggle/input/new-test/4_secs.wav\" #audio of 4 sec\n\nprint(f\"Testing with: {test_audio_path}\")\n\n# Extract features\nfeatures = extract_mfcc_features(test_audio_path, n_mfcc=N_MFCC)\n\nif features is not None:\n    print(f\" Features extracted successfully!\")\n    print(f\"- Original shape: {features.shape} (time_frames, mfcc_coeffs)\")\n    print(f\"- Duration: {features.shape[0] * 160 / 16000:.2f} seconds\")\n    print(f\"- MFCC range: [{features.min():.3f}, {features.max():.3f}]\")\n    \n    # Create segments\n    segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n    print(f\"- Generated segments: {segments.shape[0]}\")\n    print(f\"- Segment shape: {segments.shape[1:]} (window_length, mfcc_coeffs)\")\n    \n    # Show segment statistics\n    if len(segments) > 0:\n        print(f\"- Segment mean: {segments.mean():.3f}\")\n        print(f\"- Segment std: {segments.std():.3f}\")\nelse:\n    print(\"Feature extraction failed!\")\n\nprint(\"\\n Step 2 completed! Feature extraction functions are ready.\")\nprint(\"These functions can be used to:\")\nprint(\"- Extract MFCC features from any .wav file\")\nprint(\"- Create fixed-length segments for X-vector training\")\nprint(\"- Process audio for speaker recognition\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:56.013978Z","iopub.execute_input":"2025-09-02T21:21:56.014467Z","iopub.status.idle":"2025-09-02T21:21:56.872348Z","shell.execute_reply.started":"2025-09-02T21:21:56.014409Z","shell.execute_reply":"2025-09-02T21:21:56.867551Z"}},"outputs":[{"name":"stdout","text":"\n Testing feature extraction function...\nTesting with: /kaggle/input/new-test/4_secs.wav\n Features extracted successfully!\n- Original shape: (372, 23) (time_frames, mfcc_coeffs)\n- Duration: 3.72 seconds\n- MFCC range: [-201.623, 201.569]\n- Generated segments: 1\n- Segment shape: (400, 23) (window_length, mfcc_coeffs)\n- Segment mean: 0.000\n- Segment std: 24.259\n\n Step 2 completed! Feature extraction functions are ready.\nThese functions can be used to:\n- Extract MFCC features from any .wav file\n- Create fixed-length segments for X-vector training\n- Process audio for speaker recognition\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# Test the feature extraction with a sample\nprint(\"\\n Testing feature extraction function...\")\n\n# You can change this to test with any audio file\ntest_audio_path = \"/kaggle/input/new-test/10_sec.wav\"#audio of 4 sec\n\nprint(f\"Testing with: {test_audio_path}\")\n\n# Extract features\nfeatures = extract_mfcc_features(test_audio_path, n_mfcc=N_MFCC)\n\nif features is not None:\n    print(f\" Features extracted successfully!\")\n    print(f\"- Original shape: {features.shape} (time_frames, mfcc_coeffs)\")\n    print(f\"- Duration: {features.shape[0] * 160 / 16000:.2f} seconds\")\n    print(f\"- MFCC range: [{features.min():.3f}, {features.max():.3f}]\")\n    \n    # Create segments\n    segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n    print(f\"- Generated segments: {segments.shape[0]}\")\n    print(f\"- Segment shape: {segments.shape[1:]} (window_length, mfcc_coeffs)\")\n    \n    # Show segment statistics\n    if len(segments) > 0:\n        print(f\"- Segment mean: {segments.mean():.3f}\")\n        print(f\"- Segment std: {segments.std():.3f}\")\nelse:\n    print(\"Feature extraction failed!\")\n\nprint(\"\\n Step 2 completed! Feature extraction functions are ready.\")\nprint(\"These functions can be used to:\")\nprint(\"- Extract MFCC features from any .wav file\")\nprint(\"- Create fixed-length segments for X-vector training\")\nprint(\"- Process audio for speaker recognition\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:56.873666Z","iopub.execute_input":"2025-09-02T21:21:56.874192Z","iopub.status.idle":"2025-09-02T21:21:57.418980Z","shell.execute_reply.started":"2025-09-02T21:21:56.873969Z","shell.execute_reply":"2025-09-02T21:21:57.415329Z"}},"outputs":[{"name":"stdout","text":"\n Testing feature extraction function...\nTesting with: /kaggle/input/new-test/10_sec.wav\n Features extracted successfully!\n- Original shape: (1060, 23) (time_frames, mfcc_coeffs)\n- Duration: 10.60 seconds\n- MFCC range: [-209.370, 231.157]\n- Generated segments: 4\n- Segment shape: (400, 23) (window_length, mfcc_coeffs)\n- Segment mean: -0.137\n- Segment std: 23.254\n\n Step 2 completed! Feature extraction functions are ready.\nThese functions can be used to:\n- Extract MFCC features from any .wav file\n- Create fixed-length segments for X-vector training\n- Process audio for speaker recognition\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"import librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n\n# Load audio\ny, sr = librosa.load(\"/kaggle/input/new-test/10_sec.wav\", sr=16000)\n\n# Original duration\noriginal_duration = len(y) / sr\nprint(f\"🎵 Original duration: {original_duration:.2f} sec\")\n\n# Remove silence\ny_trimmed, _ = librosa.effects.trim(y, top_db=20)\n\n# Trimmed duration\ntrimmed_duration = len(y_trimmed) / sr\nprint(f\"🔇 After silence removal: {trimmed_duration:.2f} sec\")\n\n# Plot before and after\nplt.figure(figsize=(12, 6))\n\n# Before silence removal\nplt.subplot(2, 1, 1)\nlibrosa.display.waveplot(y, sr=sr)   # 👈 waveshow ki jagah waveplot\nplt.title(f\"Before Silence Removal (Duration: {original_duration:.2f} sec)\")\n\n# After silence removal\nplt.subplot(2, 1, 2)\nlibrosa.display.waveplot(y_trimmed, sr=sr)   # 👈 waveshow ki jagah waveplot\nplt.title(f\"After Silence Removal (Duration: {trimmed_duration:.2f} sec)\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:57.421890Z","iopub.execute_input":"2025-09-02T21:21:57.422659Z","iopub.status.idle":"2025-09-02T21:21:58.539392Z","shell.execute_reply.started":"2025-09-02T21:21:57.422165Z","shell.execute_reply":"2025-09-02T21:21:58.538359Z"}},"outputs":[{"name":"stdout","text":"🎵 Original duration: 11.10 sec\n🔇 After silence removal: 10.62 sec\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x432 with 2 Axes>","image/png":"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5hlzCnZame3aCyMdsgiHxms5fobNwO02AK/CeK1nmO2BGHOZHQgV3BERuUFUw85wISIiSisi8hyAQlV9LdFtofgRke8AfKSqYxPdFiJKfwywiIiIiIiIXMIUQSIiIiIiIpe4EmCJyCARWSfGDPODbdbfJSIrxJhdfZaIhKqgRURERERElHJiThE0qw2tB3ARjJnmFwK4XlVXW7Zppaol5u0rANytqoNiOjAREREREVGScWMiwtMBbPBWxRKRETAqS/kCLG9wZWqOMOaOad++vWZlZbnQPCIiIiIiotgsWrRot6p2CLWdGwHWkfCftT4fwBmBG4nI3wD8C0AjABfa7UhE7gRwJwB069YN2dnZLjSPiIiIiIgoNiKyJZzt3BiDJTb31eqhUtW3VPUYGHNYPGq3I1V9X1X7qWq/Dh1CBodERERERERJxY0AKx9AV8tyFxiTIToZAeB3LhyXiIiIiIgoqbgRYC0E0ENEjhaRRgCuAzDauoGI9LAsXgogx4XjEhERERERJZWYx2CparWI/B3ABAAZAD5W1VUiMgRAtqqOBvB3ERkIoArAXgC3xHpcIiIiIiKiZONGkQuo6lgAYwPue9xy+143jkNERERERJTMXJloOFm8NyMXPR8dl+hmEBERERFRPZVWAdbs3CJUVnsS3QwiIiIiIqqn0irAUg05fzEREREREVHcpFWAJWI3JRcREREREVHdSKsAy2vOht2JbgIREREREdVDaRlgvTMjN6ztajyKZXn74twaIiIiIiKqL1wp054sIk0QHLOiAP8YvgQAcP3p3TD0Dye53ygiIiIiIqo30rIHK1wHKqp9t4cv2JrAlhARERERUTqo1wEWERERERGRmxhg1WNlldXYWVKe6GYQEREREaUNBlj12ODvVuCM56YkuhlERERERGkjrQKsSKfB2ldW5be8dkcJyqtqXGxRcis6UJHoJhARERERpZW0CrCKD1aF3sji+fFr/ZYHvTYTb07NcbNJSU0irruYerIGj/ErZkJEREREFE9pE2Bt23cQS7bGPqfVngOVLrQmNUTa45eq6lOvJBERERElVtoEWAcreRJNRERERESJlTYBVoN60htTFz6ftwUFxQcT3QwiIiIiopTjSoAlIoNEZJ2IbBCRwTbr/yUiq0VkuYhMEZGj3DiuVYYlwpqZsxuF+1l+PBQxcwTnbyzyu/+x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\n"},"metadata":{"needs_background":"light"}}],"execution_count":29},{"cell_type":"code","source":"\n# # SIMPLE FIX: Recreate df_filtered with all speakers\n# print(\"FIXING DataFrame issue...\")\n\n# # Use original df instead of df_filtered since it has all 5 speakers\n# MIN_DURATION = 1.0\n\n# print(\"Original df speaker counts:\")\n# for speaker in sorted(df['speaker'].unique()):\n#     count = len(df[df['speaker'] == speaker])\n#     print(f\" {speaker}: {count} files\")\n\n# # Recreate df_filtered properly\n# df_filtered = df[df['duration'] >= MIN_DURATION].copy()\n\n# print(f\"\\nFixed df_filtered:\")\n# print(f\"- Total files: {len(df_filtered)}\")\n# print(f\"- Speakers: {sorted(df_filtered['speaker'].unique())}\")\n\n# for speaker in sorted(df_filtered['speaker'].unique()):\n#     count = len(df_filtered[df_filtered['speaker'] == speaker])\n#     print(f\" {speaker}: {count} files\")\n\n# # Now rebuild the dataset with all speakers\n# print(f\"\\nRebuilding dataset with ALL 5 speakers...\")\n\n# X_data, y_data, label_encoder, segment_counts = build_feature_dataset(\n# df_filtered, # Now this has all 5 speakers\n# n_mfcc=N_MFCC,\n# window_length=WINDOW_LENGTH,\n# step_size=STEP_SIZE,\n# max_files_per_speaker=None # Use all files\n# )\n\n# print(f\"\\nDataset rebuilt successfully!\")\n# print(f\"- Total segments: {len(X_data)}\")\n# print(f\"- Classes: {len(label_encoder.classes_)}\")\n# print(f\"- Speakers: {list(label_encoder.classes_)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:58.540972Z","iopub.execute_input":"2025-09-02T21:21:58.541323Z","iopub.status.idle":"2025-09-02T21:21:58.548990Z","shell.execute_reply.started":"2025-09-02T21:21:58.541266Z","shell.execute_reply":"2025-09-02T21:21:58.547707Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Step 3: Build complete feature dataset for X-vector training\nprint(\"Step 3: Building complete training dataset...\")\n\ndef build_feature_dataset(df, n_mfcc=23, window_length=400, step_size=200, max_files_per_speaker=None):\n    \"\"\"\n    Build complete dataset of MFCC segments for all speakers\n    \n    Parameters:\n    - df: DataFrame with audio file information\n    - n_mfcc: Number of MFCC coefficients\n    - window_length: Frames per segment\n    - step_size: Step between segments\n    - max_files_per_speaker: Limit files per speaker (None = use all)\n    \n    Returns:\n    - X_segments: Array of all segments\n    - y_labels: Array of corresponding labels\n    - label_encoder: Encoder for speaker labels\n    - segment_counts: Dictionary with segment counts per speaker\n    \"\"\"\n    X_segments = []\n    y_labels = []\n    speaker_segment_counts = {}\n   #--------------------------------------------LABEL ENCODING----------------------------# \n    # Create label encoder for speakers\n    speakers = sorted(df['speaker'].unique())  # Sort for consistency\n    label_encoder = LabelEncoder()\n    label_encoder.fit(speakers)\n    \n    print(f\"Processing {len(speakers)} speakers: {speakers}\")\n    print(f\"Target: {n_mfcc} MFCC coefficients, {window_length} frames per segment\")\n    \n    total_files_processed = 0\n    total_segments_created = 0\n    \n    # Process each speaker\n    for speaker_idx, speaker in enumerate(speakers):\n        print(f\"\\nProcessing {speaker} ({speaker_idx + 1}/{len(speakers)})...\")\n        \n        # Get files for this speaker\n        speaker_files = df[df['speaker'] == speaker]['file_path'].values\n        \n        # Limit files if specified\n        if max_files_per_speaker:\n            speaker_files = speaker_files[:max_files_per_speaker]\n            print(f\"  Limited to {len(speaker_files)} files (max_files_per_speaker={max_files_per_speaker})\")\n        else:\n            print(f\"  Processing all {len(speaker_files)} files\")\n        \n        speaker_segments = []\n        files_processed = 0\n        files_failed = 0\n        \n        # Process each file for this speaker\n        for file_idx, file_path in enumerate(tqdm(speaker_files, desc=f\"  Processing {speaker}\")):\n            try:\n                # Extract MFCC features\n                features = extract_mfcc_features(file_path, n_mfcc=n_mfcc)\n                \n                if features is not None and features.shape[0] >= window_length:\n                    # Create segments from this file\n                    segments = create_segments(features, window_length, step_size)\n                    \n                    if len(segments) > 0:\n                        # Add segments and labels\n                        for segment in segments:\n                            speaker_segments.append(segment)\n                            y_labels.append(speaker_idx)\n                        \n                        files_processed += 1\n                        \n                elif features is not None:\n                    # File too short, create one padded segment\n                    segments = create_segments(features, window_length, step_size)\n                    if len(segments) > 0:\n                        for segment in segments:\n                            speaker_segments.append(segment)\n                            y_labels.append(speaker_idx)\n                        files_processed += 1\n                    \n                else:\n                    files_failed += 1\n                    \n            except Exception as e:\n                files_failed += 1\n                if files_failed <= 3:  # Show first few errors\n                    print(f\"    Error with {os.path.basename(file_path)}: {e}\")\n        \n        # Add speaker segments to main dataset\n        X_segments.extend(speaker_segments)\n        speaker_segment_counts[speaker] = len(speaker_segments)\n        total_files_processed += files_processed\n        total_segments_created += len(speaker_segments)\n        \n        print(f\"  {speaker}: {files_processed} files → {len(speaker_segments)} segments\")\n        if files_failed > 0:\n            print(f\"  {files_failed} files failed\")\n    \n    # Convert to numpy arrays\n    X_segments = np.array(X_segments, dtype=np.float32)\n    y_labels = np.array(y_labels, dtype=np.int32)\n    \n    # Print final summary\n    print(f\"\\nDataset Build Summary:\")\n    print(f\"- Total files processed: {total_files_processed}\")\n    print(f\"- Total segments created: {total_segments_created}\")\n    print(f\"- Final X_segments shape: {X_segments.shape}\")\n    print(f\"- Final y_labels shape: {y_labels.shape}\")\n    print(f\"- Memory usage: {X_segments.nbytes / (1024**2):.1f} MB\")\n    \n    print(f\"\\nSegments per speaker:\")\n    for speaker, count in speaker_segment_counts.items():\n        percentage = count / total_segments_created * 100\n        print(f\"  {speaker}: {count} segments ({percentage:.1f}%)\")\n    \n    return X_segments, y_labels, label_encoder, speaker_segment_counts\n\n# Configuration parameters\nSAMPLE_RATE = 16000\nN_MFCC = 23  # X-vector typically uses 23 MFCC features\nWINDOW_LENGTH = 400  # Number of frames per segment\nSTEP_SIZE = 200      # Overlap between segments\nMIN_DURATION = 1.0   # Minimum duration in seconds\n\nprint(\"X-Vector Configuration:\")\nprint(f\"- Sample Rate: {SAMPLE_RATE} Hz\")\nprint(f\"- MFCC Features: {N_MFCC}\")\nprint(f\"- Window Length: {WINDOW_LENGTH} frames\")\nprint(f\"- Step Size: {STEP_SIZE} frames\")\nprint(f\"- Minimum Duration: {MIN_DURATION} seconds\")\n\n# Filter dataset for minimum duration (if df exists)\ntry:\n    df_filtered = df[df['duration'] >= MIN_DURATION].copy()\n    print(f\"\\nDataset Filtering:\")\n    print(f\"- Original files: {len(df)}\")\n    print(f\"- After filtering (≥{MIN_DURATION}s): {len(df_filtered)}\")\n    print(f\"- Removed: {len(df) - len(df_filtered)} files\")\n\n    # Files per speaker after filtering\n    print(f\"\\nFiles per speaker after filtering:\")\n    speaker_counts_filtered = df_filtered['speaker'].value_counts().sort_index()\n    for spk, count in speaker_counts_filtered.items():\n        print(f\"{spk}: {count} files\")\n        \nexcept NameError:\n    print(\"DataFrame 'df' not found. Make sure you've run the data loading steps first.\")\n    df_filtered = None\n\n# Build the dataset with ALL files (no limit)\nif df_filtered is not None:\n    print(\"Starting dataset construction with FULL dataset...\")\n    print(\"This will take several minutes to process all files...\")\n\n    X_data, y_data, label_encoder, segment_counts = build_feature_dataset(\n        df_filtered,\n        n_mfcc=N_MFCC,\n        window_length=WINDOW_LENGTH,\n        step_size=STEP_SIZE,\n        max_files_per_speaker=None  # Use ALL files\n    )\n\n    print(f\"\\nDataset construction completed!\")\n    print(f\"Ready for Step 4: Data splitting and preprocessing...\")\n    \nelse:\n    print(\"Cannot proceed without DataFrame. Please load your data first.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:21:58.551267Z","iopub.execute_input":"2025-09-02T21:21:58.551946Z","iopub.status.idle":"2025-09-02T21:23:11.741591Z","shell.execute_reply.started":"2025-09-02T21:21:58.551880Z","shell.execute_reply":"2025-09-02T21:23:11.740558Z"}},"outputs":[{"name":"stderr","text":"  Processing Benjamin_Netanyau:   1%|          | 11/1500 [00:00<00:13, 108.04it/s]","output_type":"stream"},{"name":"stdout","text":"Step 3: Building complete training dataset...\nX-Vector Configuration:\n- Sample Rate: 16000 Hz\n- MFCC Features: 23\n- Window Length: 400 frames\n- Step Size: 200 frames\n- Minimum Duration: 1.0 seconds\n\nDataset Filtering:\n- Original files: 7501\n- After filtering (≥1.0s): 7501\n- Removed: 0 files\n\nFiles per speaker after filtering:\nBenjamin_Netanyau: 1500 files\nJens_Stoltenberg: 1500 files\nJulia_Gillard: 1501 files\nMagaret_Tarcher: 1500 files\nNelson_Mandela: 1500 files\nStarting dataset construction with FULL dataset...\nThis will take several minutes to process all files...\nProcessing 5 speakers: ['Benjamin_Netanyau', 'Jens_Stoltenberg', 'Julia_Gillard', 'Magaret_Tarcher', 'Nelson_Mandela']\nTarget: 23 MFCC coefficients, 400 frames per segment\n\nProcessing Benjamin_Netanyau (1/5)...\n  Processing all 1500 files\n","output_type":"stream"},{"name":"stderr","text":"  Processing Benjamin_Netanyau: 100%|██████████| 1500/1500 [00:14<00:00, 102.38it/s]\n  Processing Jens_Stoltenberg:   1%|          | 10/1500 [00:00<00:15, 94.98it/s]","output_type":"stream"},{"name":"stdout","text":"  Benjamin_Netanyau: 1500 files → 1500 segments\n\nProcessing Jens_Stoltenberg (2/5)...\n  Processing all 1500 files\n","output_type":"stream"},{"name":"stderr","text":"  Processing Jens_Stoltenberg: 100%|██████████| 1500/1500 [00:14<00:00, 104.73it/s]\n  Processing Julia_Gillard:   1%|          | 11/1501 [00:00<00:13, 108.77it/s]","output_type":"stream"},{"name":"stdout","text":"  Jens_Stoltenberg: 1500 files → 1500 segments\n\nProcessing Julia_Gillard (3/5)...\n  Processing all 1501 files\n","output_type":"stream"},{"name":"stderr","text":"  Processing Julia_Gillard: 100%|██████████| 1501/1501 [00:14<00:00, 101.78it/s]\n  Processing Magaret_Tarcher:   1%|          | 12/1500 [00:00<00:12, 114.54it/s]","output_type":"stream"},{"name":"stdout","text":"  Julia_Gillard: 1501 files → 1501 segments\n\nProcessing Magaret_Tarcher (4/5)...\n  Processing all 1500 files\n","output_type":"stream"},{"name":"stderr","text":"  Processing Magaret_Tarcher: 100%|██████████| 1500/1500 [00:14<00:00, 104.33it/s]\n  Processing Nelson_Mandela:   1%|          | 11/1500 [00:00<00:14, 103.49it/s]","output_type":"stream"},{"name":"stdout","text":"  Magaret_Tarcher: 1500 files → 1500 segments\n\nProcessing Nelson_Mandela (5/5)...\n  Processing all 1500 files\n","output_type":"stream"},{"name":"stderr","text":"  Processing Nelson_Mandela: 100%|██████████| 1500/1500 [00:14<00:00, 101.02it/s]\n","output_type":"stream"},{"name":"stdout","text":"  Nelson_Mandela: 1500 files → 1500 segments\n\nDataset Build Summary:\n- Total files processed: 7501\n- Total segments created: 7501\n- Final X_segments shape: (7501, 400, 23)\n- Final y_labels shape: (7501,)\n- Memory usage: 263.2 MB\n\nSegments per speaker:\n  Benjamin_Netanyau: 1500 segments (20.0%)\n  Jens_Stoltenberg: 1500 segments (20.0%)\n  Julia_Gillard: 1501 segments (20.0%)\n  Magaret_Tarcher: 1500 segments (20.0%)\n  Nelson_Mandela: 1500 segments (20.0%)\n\nDataset construction completed!\nReady for Step 4: Data splitting and preprocessing...\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"Dataset splitting","metadata":{}},{"cell_type":"code","source":"# Step 4: Split the complete dataset (7,501 segments from 5 speakers)\nprint(\"Step 4: Splitting complete dataset into train/validation/test...\")\n\n# Split dataset: 80% train, 15% validation, 5% test\nX_temp, X_test, y_temp, y_test = train_test_split(\n    X_data, y_data, \n    test_size=0.05,  # 5% for test\n    random_state=42, \n    stratify=y_data\n)\n\nX_train, X_val, y_train, y_val = train_test_split(\n    X_temp, y_temp, \n    test_size=0.1875,  # 15% of total (15/80 = 0.1875)\n    random_state=42, \n    stratify=y_temp\n)\n\nprint(f\"Data Split Results:\")\nprint(f\"- Training set:   {X_train.shape[0]:>4} segments ({X_train.shape[0]/len(X_data)*100:5.1f}%)\")\nprint(f\"- Validation set: {X_val.shape[0]:>4} segments ({X_val.shape[0]/len(X_data)*100:5.1f}%)\")\nprint(f\"- Test set:       {X_test.shape[0]:>4} segments ({X_test.shape[0]/len(X_data)*100:5.1f}%)\")\n\n# Convert to proper data types\nX_train = X_train.astype(np.float32)\nX_val = X_val.astype(np.float32)\nX_test = X_test.astype(np.float32)\n\n# Create proper categorical labels\nnum_classes = len(label_encoder.classes_)\ny_train_cat = to_categorical(y_train, num_classes)\ny_val_cat = to_categorical(y_val, num_classes)\ny_test_cat = to_categorical(y_test, num_classes)\n\nprint(f\"Categorical Labels:\")\nprint(f\"- y_train_cat: {y_train_cat.shape}\")\nprint(f\"- y_val_cat: {y_val_cat.shape}\")\nprint(f\"- y_test_cat: {y_test_cat.shape}\")\nprint(f\"- Number of classes: {num_classes}\")\n\n# Verify class distribution\nprint(f\"Per-speaker distribution:\")\nfor class_idx, speaker in enumerate(label_encoder.classes_):\n    train_count = np.sum(y_train == class_idx)\n    val_count = np.sum(y_val == class_idx)\n    test_count = np.sum(y_test == class_idx)\n    \n    print(f\"  {speaker}:\")\n    print(f\"    Train: {train_count} ({train_count/len(y_train)*100:.1f}%)\")\n    print(f\"    Val:   {val_count} ({val_count/len(y_val)*100:.1f}%)\")\n    print(f\"    Test:  {test_count} ({test_count/len(y_test)*100:.1f}%)\")\n\nprint(\"Step 4 completed! Ready for training...\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:23:11.742851Z","iopub.execute_input":"2025-09-02T21:23:11.743065Z","iopub.status.idle":"2025-09-02T21:23:12.018615Z","shell.execute_reply.started":"2025-09-02T21:23:11.743029Z","shell.execute_reply":"2025-09-02T21:23:12.015628Z"}},"outputs":[{"name":"stdout","text":"Step 4: Splitting complete dataset into train/validation/test...\nData Split Results:\n- Training set:   5789 segments ( 77.2%)\n- Validation set: 1336 segments ( 17.8%)\n- Test set:        376 segments (  5.0%)\nCategorical Labels:\n- y_train_cat: (5789, 5)\n- y_val_cat: (1336, 5)\n- y_test_cat: (376, 5)\n- Number of classes: 5\nPer-speaker distribution:\n  Benjamin_Netanyau:\n    Train: 1158 (20.0%)\n    Val:   267 (20.0%)\n    Test:  75 (19.9%)\n  Jens_Stoltenberg:\n    Train: 1158 (20.0%)\n    Val:   267 (20.0%)\n    Test:  75 (19.9%)\n  Julia_Gillard:\n    Train: 1158 (20.0%)\n    Val:   267 (20.0%)\n    Test:  76 (20.2%)\n  Magaret_Tarcher:\n    Train: 1157 (20.0%)\n    Val:   268 (20.1%)\n    Test:  75 (19.9%)\n  Nelson_Mandela:\n    Train: 1158 (20.0%)\n    Val:   267 (20.0%)\n    Test:  75 (19.9%)\nStep 4 completed! Ready for training...\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"# Step 5: Train the X-Vector model with complete dataset\nprint(\"Step 5: Training X-Vector model with complete dataset...\")\n\n# Required imports for model building\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import (\n    Input, Dense, Conv1D, BatchNormalization, Dropout, \n    GlobalAveragePooling1D, Concatenate, Lambda\n)\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nimport tensorflow.keras.backend as K\nfrom datetime import datetime\n\n# Define the X-Vector model architecture\ndef create_xvector_model(input_shape, num_classes):\n    \"\"\"\n    Create X-Vector model architecture for speaker recognition\n    \"\"\"\n    inputs = Input(shape=input_shape, name='input')\n    \n    # Frame-level layers (TDNN layers)\n    # TDNN Layer 1: [-2, -1, 0, 1, 2] context\n    x = Conv1D(512, kernel_size=5, dilation_rate=1, activation='relu', name='tdnn1')(inputs)\n    x = BatchNormalization(name='bn1')(x)\n    \n    # TDNN Layer 2: [-2, 0, 2] context  \n    x = Conv1D(512, kernel_size=3, dilation_rate=2, activation='relu', name='tdnn2')(x)\n    x = BatchNormalization(name='bn2')(x)\n    \n    # TDNN Layer 3: [-3, 0, 3] context\n    x = Conv1D(512, kernel_size=3, dilation_rate=3, activation='relu', name='tdnn3')(x)\n    x = BatchNormalization(name='bn3')(x)\n    \n    # TDNN Layer 4: [0] context (1x1 conv)\n    x = Conv1D(512, kernel_size=1, dilation_rate=1, activation='relu', name='tdnn4')(x)\n    x = BatchNormalization(name='bn4')(x)\n    \n    # TDNN Layer 5: [0] context (1x1 conv)\n    x = Conv1D(1500, kernel_size=1, dilation_rate=1, activation='relu', name='tdnn5')(x)\n    x = BatchNormalization(name='bn5')(x)\n    \n    # Statistics pooling layer (mean + std)\n    # Calculate mean and standard deviation across time dimension\n    mean = GlobalAveragePooling1D(name='global_mean')(x)\n    # For std calculation, we need to compute variance manually\n    mean_expanded = Lambda(lambda x: K.expand_dims(x, axis=1))(mean)\n    mean_tiled = Lambda(lambda x: K.tile(x[0], [1, K.shape(x[1])[1], 1]))([mean_expanded, x])\n    variance = Lambda(lambda x: K.mean(K.square(x[0] - x[1]), axis=1))([x, mean_tiled])\n    std = Lambda(lambda x: K.sqrt(K.maximum(x, 1e-8)))(variance)\n    \n    # Concatenate mean and std\n    stats = Concatenate(name='stats_pool')([mean, std])\n    \n    # Segment-level layers\n    # First affine layer\n    x = Dense(512, activation='relu', name='segment1')(stats)\n    x = BatchNormalization(name='bn6')(x)\n    x = Dropout(0.5, name='dropout1')(x)\n    \n    # Second affine layer (embedding layer)\n    embeddings = Dense(512, activation='relu', name='embeddings')(x)\n    x = BatchNormalization(name='bn7')(embeddings)\n    x = Dropout(0.5, name='dropout2')(x)\n    \n    # Output layer\n    outputs = Dense(num_classes, activation='softmax', name='classification')(x)\n    \n    # Create model\n    model = Model(inputs=inputs, outputs=outputs, name='XVector')\n    \n    return model\n\n# Create the model\nprint(\"Creating X-Vector model architecture...\")\ninput_shape = (400, 23)  # (time_steps, features)\nnum_classes = 5  # Number of speakers\n\nmodel = create_xvector_model(input_shape, num_classes)\n\n# Display model architecture\nprint(\"Model Architecture:\")\nmodel.summary()\n\n# Training configuration for full dataset\nEPOCHS = 50\nBATCH_SIZE = 64  # Increased for larger dataset\nINITIAL_LR = 0.001\n\n# Compile the model\nprint(\"Compiling model...\")\noptimizer = Adam(learning_rate=INITIAL_LR)\nmodel.compile(\n    optimizer=optimizer,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nprint(f\"Training Configuration:\")\nprint(f\"- Training samples: {X_train.shape[0]}\")\nprint(f\"- Validation samples: {X_val.shape[0]}\")\nprint(f\"- Test samples: {X_test.shape[0]}\")\nprint(f\"- Batch size: {BATCH_SIZE}\")\nprint(f\"- Epochs: {EPOCHS}\")\nprint(f\"- Learning rate: {INITIAL_LR}\")\n\n# Calculate training steps\nsteps_per_epoch = len(X_train) // BATCH_SIZE\nvalidation_steps = len(X_val) // BATCH_SIZE\nprint(f\"- Steps per epoch: {steps_per_epoch}\")\nprint(f\"- Validation steps: {validation_steps}\")\n\n# Setup training callbacks\ntimestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\nmodel_name = f\"xvector_speaker_recognition_{timestamp}\"\n\ncallbacks = [\n    ModelCheckpoint(\n        filepath=f'{model_name}_best.h5',\n        monitor='val_accuracy',\n        save_best_only=True,\n        save_weights_only=False,\n        mode='max',\n        verbose=1,\n        save_freq='epoch'\n    ),\n    ReduceLROnPlateau(\n        monitor='val_loss',\n        factor=0.5,\n        patience=5,\n        min_lr=1e-6,\n        verbose=1\n    ),\n    EarlyStopping(\n        monitor='val_loss',\n        patience=12,\n        restore_best_weights=True,\n        verbose=1\n    )\n]\n\nprint(f\"Model will be saved as: {model_name}_best.h5\")\n\n# Verify data shapes before training\nprint(f\"\\nFinal data verification:\")\nprint(f\"- X_train: {X_train.shape} dtype: {X_train.dtype}\")\nprint(f\"- y_train_cat: {y_train_cat.shape} dtype: {y_train_cat.dtype}\")\nprint(f\"- X_val: {X_val.shape} dtype: {X_val.dtype}\")\nprint(f\"- y_val_cat: {y_val_cat.shape} dtype: {y_val_cat.dtype}\")\n\n# Show expected training time\nestimated_time_minutes = (EPOCHS * steps_per_epoch * BATCH_SIZE) / (60 * 100)  # Rough estimate\nprint(f\"Estimated training time: {estimated_time_minutes:.1f} minutes\")\n\nprint(f\"\\nStarting training...\")\nprint(\"=\" * 60)\n\n# Start training\nhistory = model.fit(\n    X_train, y_train_cat,\n    batch_size=BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=(X_val, y_val_cat),\n    callbacks=callbacks,\n    verbose=1,\n    shuffle=True\n)\n\nprint(f\"\\nTraining completed!\")\n\n# Extract training history\ntrain_acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\n# Show final results\nfinal_train_acc = train_acc[-1]\nfinal_val_acc = val_acc[-1]\nbest_val_acc = max(val_acc)\nbest_epoch = val_acc.index(best_val_acc) + 1\n\nprint(f\"\\nTraining Results Summary:\")\nprint(f\"- Final training accuracy: {final_train_acc*100:.2f}%\")\nprint(f\"- Final validation accuracy: {final_val_acc*100:.2f}%\")\nprint(f\"- Best validation accuracy: {best_val_acc*100:.2f}% (epoch {best_epoch})\")\nprint(f\"- Total epochs trained: {len(train_acc)}\")\n\n# Performance evaluation\nif best_val_acc > 0.90:\n    print(f\"Excellent performance! Model achieved >90% validation accuracy\")\nelif best_val_acc > 0.80:\n    print(f\"Good performance! Model achieved >80% validation accuracy\")\nelif best_val_acc > 0.60:\n    print(f\"Reasonable performance for 5-class problem\")\nelse:\n    print(f\"Consider adjusting hyperparameters or architecture\")\n\nprint(f\"\\nStep 5 completed! X-vector model training finished.\")\nprint(f\"Ready for Step 6: Model evaluation and embedding extraction...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:23:12.020199Z","iopub.execute_input":"2025-09-02T21:23:12.020400Z","iopub.status.idle":"2025-09-02T21:37:53.293050Z","shell.execute_reply.started":"2025-09-02T21:23:12.020365Z","shell.execute_reply":"2025-09-02T21:37:53.292078Z"}},"outputs":[{"name":"stdout","text":"Step 5: Training X-Vector model with complete dataset...\nCreating X-Vector model architecture...\nModel Architecture:\nModel: \"XVector\"\n__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to                     \n==================================================================================================\ninput (InputLayer)              [(None, 400, 23)]    0                                            \n__________________________________________________________________________________________________\ntdnn1 (Conv1D)                  (None, 396, 512)     59392       input[0][0]                      \n__________________________________________________________________________________________________\nbn1 (BatchNormalization)        (None, 396, 512)     2048        tdnn1[0][0]                      \n__________________________________________________________________________________________________\ntdnn2 (Conv1D)                  (None, 392, 512)     786944      bn1[0][0]                        \n__________________________________________________________________________________________________\nbn2 (BatchNormalization)        (None, 392, 512)     2048        tdnn2[0][0]                      \n__________________________________________________________________________________________________\ntdnn3 (Conv1D)                  (None, 386, 512)     786944      bn2[0][0]                        \n__________________________________________________________________________________________________\nbn3 (BatchNormalization)        (None, 386, 512)     2048        tdnn3[0][0]                      \n__________________________________________________________________________________________________\ntdnn4 (Conv1D)                  (None, 386, 512)     262656      bn3[0][0]                        \n__________________________________________________________________________________________________\nbn4 (BatchNormalization)        (None, 386, 512)     2048        tdnn4[0][0]                      \n__________________________________________________________________________________________________\ntdnn5 (Conv1D)                  (None, 386, 1500)    769500      bn4[0][0]                        \n__________________________________________________________________________________________________\nbn5 (BatchNormalization)        (None, 386, 1500)    6000        tdnn5[0][0]                      \n__________________________________________________________________________________________________\nglobal_mean (GlobalAveragePooli (None, 1500)         0           bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_8 (Lambda)               (None, 1, 1500)      0           global_mean[0][0]                \n__________________________________________________________________________________________________\nlambda_9 (Lambda)               (None, None, 1500)   0           lambda_8[0][0]                   \n                                                                 bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_10 (Lambda)              (None, 1500)         0           bn5[0][0]                        \n                                                                 lambda_9[0][0]                   \n__________________________________________________________________________________________________\nlambda_11 (Lambda)              (None, 1500)         0           lambda_10[0][0]                  \n__________________________________________________________________________________________________\nstats_pool (Concatenate)        (None, 3000)         0           global_mean[0][0]                \n                                                                 lambda_11[0][0]                  \n__________________________________________________________________________________________________\nsegment1 (Dense)                (None, 512)          1536512     stats_pool[0][0]                 \n__________________________________________________________________________________________________\nbn6 (BatchNormalization)        (None, 512)          2048        segment1[0][0]                   \n__________________________________________________________________________________________________\ndropout1 (Dropout)              (None, 512)          0           bn6[0][0]                        \n__________________________________________________________________________________________________\nembeddings (Dense)              (None, 512)          262656      dropout1[0][0]                   \n__________________________________________________________________________________________________\nbn7 (BatchNormalization)        (None, 512)          2048        embeddings[0][0]                 \n__________________________________________________________________________________________________\ndropout2 (Dropout)              (None, 512)          0           bn7[0][0]                        \n__________________________________________________________________________________________________\nclassification (Dense)          (None, 5)            2565        dropout2[0][0]                   \n==================================================================================================\nTotal params: 4,485,457\nTrainable params: 4,476,313\nNon-trainable params: 9,144\n__________________________________________________________________________________________________\nCompiling model...\nTraining Configuration:\n- Training samples: 5789\n- Validation samples: 1336\n- Test samples: 376\n- Batch size: 64\n- Epochs: 50\n- Learning rate: 0.001\n- Steps per epoch: 90\n- Validation steps: 20\nModel will be saved as: xvector_speaker_recognition_20250902_212312_best.h5\n\nFinal data verification:\n- X_train: (5789, 400, 23) dtype: float32\n- y_train_cat: (5789, 5) dtype: float32\n- X_val: (1336, 400, 23) dtype: float32\n- y_val_cat: (1336, 5) dtype: float32\nEstimated training time: 48.0 minutes\n\nStarting training...\n============================================================\nTrain on 5789 samples, validate on 1336 samples\nEpoch 1/50\n5760/5789 [============================>.] - ETA: 0s - loss: 1.0249 - accuracy: 0.6747\nEpoch 00001: val_accuracy improved from -inf to 0.50973, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 27s 5ms/sample - loss: 1.0231 - accuracy: 0.6754 - val_loss: 1.5914 - val_accuracy: 0.5097\nEpoch 2/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.5613 - accuracy: 0.8003\nEpoch 00002: val_accuracy improved from 0.50973 to 0.73802, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.5635 - accuracy: 0.7994 - val_loss: 0.9158 - val_accuracy: 0.7380\nEpoch 3/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.4549 - accuracy: 0.8302\nEpoch 00003: val_accuracy improved from 0.73802 to 0.76048, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 22s 4ms/sample - loss: 0.4583 - accuracy: 0.8297 - val_loss: 0.7128 - val_accuracy: 0.7605\nEpoch 4/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.3862 - accuracy: 0.8497\nEpoch 00004: val_accuracy improved from 0.76048 to 0.84880, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 22s 4ms/sample - loss: 0.3854 - accuracy: 0.8499 - val_loss: 0.4030 - val_accuracy: 0.8488\nEpoch 5/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.3393 - accuracy: 0.8715\nEpoch 00005: val_accuracy did not improve from 0.84880\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.3392 - accuracy: 0.8715 - val_loss: 0.4172 - val_accuracy: 0.8406\nEpoch 6/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.3002 - accuracy: 0.8861\nEpoch 00006: val_accuracy improved from 0.84880 to 0.86003, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.3010 - accuracy: 0.8858 - val_loss: 0.3738 - val_accuracy: 0.8600\nEpoch 7/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.2597 - accuracy: 0.9021\nEpoch 00007: val_accuracy did not improve from 0.86003\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.2593 - accuracy: 0.9022 - val_loss: 0.6957 - val_accuracy: 0.7912\nEpoch 8/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.2209 - accuracy: 0.9160\nEpoch 00008: val_accuracy did not improve from 0.86003\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.2211 - accuracy: 0.9160 - val_loss: 1.0028 - val_accuracy: 0.6886\nEpoch 9/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.1784 - accuracy: 0.9335\nEpoch 00009: val_accuracy did not improve from 0.86003\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.1786 - accuracy: 0.9335 - val_loss: 0.4360 - val_accuracy: 0.8555\nEpoch 10/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.1517 - accuracy: 0.9438\nEpoch 00010: val_accuracy improved from 0.86003 to 0.86377, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.1522 - accuracy: 0.9433 - val_loss: 0.5020 - val_accuracy: 0.8638\nEpoch 11/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.1599 - accuracy: 0.9439\nEpoch 00011: val_accuracy did not improve from 0.86377\n\nEpoch 00011: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.1611 - accuracy: 0.9437 - val_loss: 0.6016 - val_accuracy: 0.7882\nEpoch 12/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0695 - accuracy: 0.9743\nEpoch 00012: val_accuracy did not improve from 0.86377\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0693 - accuracy: 0.9744 - val_loss: 1.3258 - val_accuracy: 0.6677\nEpoch 13/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0364 - accuracy: 0.9882\nEpoch 00013: val_accuracy improved from 0.86377 to 0.88548, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 22s 4ms/sample - loss: 0.0363 - accuracy: 0.9883 - val_loss: 0.3657 - val_accuracy: 0.8855\nEpoch 14/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0237 - accuracy: 0.9927\nEpoch 00014: val_accuracy improved from 0.88548 to 0.91317, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 22s 4ms/sample - loss: 0.0237 - accuracy: 0.9927 - val_loss: 0.2995 - val_accuracy: 0.9132\nEpoch 15/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0275 - accuracy: 0.9908\nEpoch 00015: val_accuracy did not improve from 0.91317\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0281 - accuracy: 0.9907 - val_loss: 4.2534 - val_accuracy: 0.4476\nEpoch 16/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0246 - accuracy: 0.9917\nEpoch 00016: val_accuracy did not improve from 0.91317\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0247 - accuracy: 0.9915 - val_loss: 0.4038 - val_accuracy: 0.8990\nEpoch 17/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0403 - accuracy: 0.9854\nEpoch 00017: val_accuracy did not improve from 0.91317\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0406 - accuracy: 0.9853 - val_loss: 0.5813 - val_accuracy: 0.8645\nEpoch 18/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0365 - accuracy: 0.9880\nEpoch 00018: val_accuracy did not improve from 0.91317\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0377 - accuracy: 0.9877 - val_loss: 1.6574 - val_accuracy: 0.6332\nEpoch 19/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0551 - accuracy: 0.9811\nEpoch 00019: val_accuracy did not improve from 0.91317\n\nEpoch 00019: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0586 - accuracy: 0.9807 - val_loss: 0.7329 - val_accuracy: 0.8061\nEpoch 20/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0177 - accuracy: 0.9943\nEpoch 00020: val_accuracy improved from 0.91317 to 0.91991, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 22s 4ms/sample - loss: 0.0177 - accuracy: 0.9943 - val_loss: 0.2662 - val_accuracy: 0.9199\nEpoch 21/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0084 - accuracy: 0.9979\nEpoch 00021: val_accuracy improved from 0.91991 to 0.92590, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0086 - accuracy: 0.9979 - val_loss: 0.3052 - val_accuracy: 0.9259\nEpoch 22/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0065 - accuracy: 0.9981\nEpoch 00022: val_accuracy did not improve from 0.92590\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0065 - accuracy: 0.9981 - val_loss: 0.2871 - val_accuracy: 0.9237\nEpoch 23/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0055 - accuracy: 0.9981\nEpoch 00023: val_accuracy did not improve from 0.92590\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0055 - accuracy: 0.9981 - val_loss: 0.3119 - val_accuracy: 0.9199\nEpoch 24/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0058 - accuracy: 0.9979\nEpoch 00024: val_accuracy did not improve from 0.92590\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0058 - accuracy: 0.9979 - val_loss: 0.3165 - val_accuracy: 0.9259\nEpoch 25/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0030 - accuracy: 0.9995\nEpoch 00025: val_accuracy improved from 0.92590 to 0.92665, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n\nEpoch 00025: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0034 - accuracy: 0.9993 - val_loss: 0.3239 - val_accuracy: 0.9266\nEpoch 26/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0027 - accuracy: 0.9993\nEpoch 00026: val_accuracy improved from 0.92665 to 0.93114, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0027 - accuracy: 0.9993 - val_loss: 0.2763 - val_accuracy: 0.9311\nEpoch 27/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0022 - accuracy: 0.9995\nEpoch 00027: val_accuracy improved from 0.93114 to 0.93413, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0022 - accuracy: 0.9995 - val_loss: 0.2868 - val_accuracy: 0.9341\nEpoch 28/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0016 - accuracy: 0.9998\nEpoch 00028: val_accuracy did not improve from 0.93413\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0016 - accuracy: 0.9998 - val_loss: 0.2835 - val_accuracy: 0.9311\nEpoch 29/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0026 - accuracy: 0.9993\nEpoch 00029: val_accuracy improved from 0.93413 to 0.93488, saving model to xvector_speaker_recognition_20250902_212312_best.h5\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0026 - accuracy: 0.9993 - val_loss: 0.2623 - val_accuracy: 0.9349\nEpoch 30/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0021 - accuracy: 0.9997\nEpoch 00030: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0021 - accuracy: 0.9997 - val_loss: 0.2952 - val_accuracy: 0.9311\nEpoch 31/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0020 - accuracy: 0.9995\nEpoch 00031: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0020 - accuracy: 0.9995 - val_loss: 0.2898 - val_accuracy: 0.9326\nEpoch 32/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0013 - accuracy: 0.9998\nEpoch 00032: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0013 - accuracy: 0.9998 - val_loss: 0.2820 - val_accuracy: 0.9334\nEpoch 33/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0024 - accuracy: 0.9995\nEpoch 00033: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0024 - accuracy: 0.9995 - val_loss: 0.2927 - val_accuracy: 0.9296\nEpoch 34/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0015 - accuracy: 0.9998\nEpoch 00034: val_accuracy did not improve from 0.93488\n\nEpoch 00034: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0015 - accuracy: 0.9998 - val_loss: 0.3305 - val_accuracy: 0.9251\nEpoch 35/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0010 - accuracy: 1.0000\nEpoch 00035: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 9.9733e-04 - accuracy: 1.0000 - val_loss: 0.2928 - val_accuracy: 0.9334\nEpoch 36/50\n5760/5789 [============================>.] - ETA: 0s - loss: 8.6740e-04 - accuracy: 1.0000\nEpoch 00036: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 8.6644e-04 - accuracy: 1.0000 - val_loss: 0.2848 - val_accuracy: 0.9326\nEpoch 37/50\n5760/5789 [============================>.] - ETA: 0s - loss: 0.0013 - accuracy: 1.0000\nEpoch 00037: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.2694 - val_accuracy: 0.9349\nEpoch 38/50\n5760/5789 [============================>.] - ETA: 0s - loss: 8.1401e-04 - accuracy: 1.0000\nEpoch 00038: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 8.1018e-04 - accuracy: 1.0000 - val_loss: 0.2797 - val_accuracy: 0.9341\nEpoch 39/50\n5760/5789 [============================>.] - ETA: 0s - loss: 7.3827e-04 - accuracy: 1.0000\nEpoch 00039: val_accuracy did not improve from 0.93488\n\nEpoch 00039: ReduceLROnPlateau reducing learning rate to 3.125000148429535e-05.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 7.4025e-04 - accuracy: 1.0000 - val_loss: 0.2965 - val_accuracy: 0.9341\nEpoch 40/50\n5760/5789 [============================>.] - ETA: 0s - loss: 6.5057e-04 - accuracy: 0.9998\nEpoch 00040: val_accuracy did not improve from 0.93488\n5789/5789 [==============================] - 21s 4ms/sample - loss: 6.4932e-04 - accuracy: 0.9998 - val_loss: 0.2926 - val_accuracy: 0.9341\nEpoch 41/50\n5760/5789 [============================>.] - ETA: 0s - loss: 7.1541e-04 - accuracy: 1.0000\nEpoch 00041: val_accuracy did not improve from 0.93488\nRestoring model weights from the end of the best epoch.\n5789/5789 [==============================] - 21s 4ms/sample - loss: 7.1248e-04 - accuracy: 1.0000 - val_loss: 0.2820 - val_accuracy: 0.9349\nEpoch 00041: early stopping\n\nTraining completed!\n\nTraining Results Summary:\n- Final training accuracy: 100.00%\n- Final validation accuracy: 93.49%\n- Best validation accuracy: 93.49% (epoch 29)\n- Total epochs trained: 41\nExcellent performance! Model achieved >90% validation accuracy\n\nStep 5 completed! X-vector model training finished.\nReady for Step 6: Model evaluation and embedding extraction...\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"# Step 6: Model evaluation and X-vector embedding extraction","metadata":{}},{"cell_type":"code","source":"print(\"Step 6: Evaluating model and extracting X-vector embeddings...\")\n\n# Required imports for evaluation and visualization\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.layers import Dense","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:53.295121Z","iopub.execute_input":"2025-09-02T21:37:53.295473Z","iopub.status.idle":"2025-09-02T21:37:53.300374Z","shell.execute_reply.started":"2025-09-02T21:37:53.295405Z","shell.execute_reply":"2025-09-02T21:37:53.299710Z"}},"outputs":[{"name":"stdout","text":"Step 6: Evaluating model and extracting X-vector embeddings...\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"# Test set evaluation\nprint(\"Evaluating on test set...\")\ntest_loss, test_accuracy = model.evaluate(X_test, y_test_cat, verbose=0)\nprint(f\"Test Set Results:\")\nprint(f\"- Test accuracy: {test_accuracy*100:.2f}%\")\nprint(f\"- Test loss: {test_loss:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:53.307840Z","iopub.execute_input":"2025-09-02T21:37:53.308235Z","iopub.status.idle":"2025-09-02T21:37:54.178634Z","shell.execute_reply.started":"2025-09-02T21:37:53.308024Z","shell.execute_reply":"2025-09-02T21:37:54.177963Z"}},"outputs":[{"name":"stdout","text":"Evaluating on test set...\nTest Set Results:\n- Test accuracy: 92.82%\n- Test loss: 0.2472\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"# Generate predictions for detailed analysis\nprint(f\"\\nGenerating predictions...\")\ntest_predictions = model.predict(X_test, verbose=0)\ntest_pred_labels = np.argmax(test_predictions, axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:54.180417Z","iopub.execute_input":"2025-09-02T21:37:54.180712Z","iopub.status.idle":"2025-09-02T21:37:54.748697Z","shell.execute_reply.started":"2025-09-02T21:37:54.180655Z","shell.execute_reply":"2025-09-02T21:37:54.748132Z"}},"outputs":[{"name":"stdout","text":"\nGenerating predictions...\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"# Confusion matrix\nprint(f\"Creating confusion matrix...\")\ncm = confusion_matrix(y_test, test_pred_labels)\n\n# Plot confusion matrix\nplt.figure(figsize=(10, 8))\nsns.heatmap(cm, \n           annot=True, \n           fmt='d', \n           cmap='Blues',\n           xticklabels=label_encoder.classes_,\n           yticklabels=label_encoder.classes_)\nplt.title('Confusion Matrix - Speaker Recognition')\nplt.xlabel('Predicted Speaker')\nplt.ylabel('True Speaker')\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:54.750144Z","iopub.execute_input":"2025-09-02T21:37:54.750443Z","iopub.status.idle":"2025-09-02T21:37:55.426896Z","shell.execute_reply.started":"2025-09-02T21:37:54.750383Z","shell.execute_reply":"2025-09-02T21:37:55.425850Z"}},"outputs":[{"name":"stdout","text":"Creating confusion matrix...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 720x576 with 2 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}],"execution_count":37},{"cell_type":"code","source":"# Per-speaker accuracy\nprint(f\"\\nPer-speaker accuracy:\")\nfor i, speaker in enumerate(label_encoder.classes_):\n    speaker_mask = y_test == i\n    speaker_acc = np.mean(test_pred_labels[speaker_mask] == y_test[speaker_mask])\n    speaker_count = np.sum(speaker_mask)\n    print(f\"  {speaker}: {speaker_acc*100:.2f}% ({speaker_count} samples)\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:55.428360Z","iopub.execute_input":"2025-09-02T21:37:55.428903Z","iopub.status.idle":"2025-09-02T21:37:55.439808Z","shell.execute_reply.started":"2025-09-02T21:37:55.428653Z","shell.execute_reply":"2025-09-02T21:37:55.438780Z"}},"outputs":[{"name":"stdout","text":"\nPer-speaker accuracy:\n  Benjamin_Netanyau: 92.00% (75 samples)\n  Jens_Stoltenberg: 93.33% (75 samples)\n  Julia_Gillard: 96.05% (76 samples)\n  Magaret_Tarcher: 94.67% (75 samples)\n  Nelson_Mandela: 88.00% (75 samples)\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"# Classification report\nprint(f\"\\nDetailed Classification Report:\")\nprint(classification_report(y_test, test_pred_labels, \n                          target_names=label_encoder.classes_, \n                          digits=4))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:55.441093Z","iopub.execute_input":"2025-09-02T21:37:55.441421Z","iopub.status.idle":"2025-09-02T21:37:55.467225Z","shell.execute_reply.started":"2025-09-02T21:37:55.441368Z","shell.execute_reply":"2025-09-02T21:37:55.465273Z"}},"outputs":[{"name":"stdout","text":"\nDetailed Classification Report:\n                   precision    recall  f1-score   support\n\nBenjamin_Netanyau     0.8313    0.9200    0.8734        75\n Jens_Stoltenberg     0.9722    0.9333    0.9524        75\n    Julia_Gillard     0.9605    0.9605    0.9605        76\n  Magaret_Tarcher     0.9103    0.9467    0.9281        75\n   Nelson_Mandela     0.9851    0.8800    0.9296        75\n\n         accuracy                         0.9282       376\n        macro avg     0.9319    0.9281    0.9288       376\n     weighted avg     0.9320    0.9282    0.9289       376\n\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"#This section create a new model  which only extract the x vector without classifer \n# Extract X-vector embeddings from trained model \nprint(f\"\\nExtracting X-vector embeddings...\")\n\n# From your model architecture, the embedding layer is clearly named \"embeddings\"\ntry:\n    embedding_layer = model.get_layer('embeddings')\n    print(f\"Found embedding layer: {embedding_layer.name}\")\n    print(f\"Embedding layer output shape: {embedding_layer.output_shape}\")\n    \n    # Create embedding extraction model\n    embedding_model = Model(inputs=model.input, outputs=embedding_layer.output)\n    \n    print(f\"Embedding model created:\")\n    print(f\"- Input shape: {embedding_model.input_shape}\")\n    print(f\"- Output shape: {embedding_model.output_shape}\")\n    \nexcept Exception as e:\n    print(f\"Error finding embedding layer: {e}\")\n    # Fallback: list all layers to debug\n    print(\"Available layers in the model:\")\n    for i, layer in enumerate(model.layers):\n        print(f\"  {i}: {layer.name} - {layer.__class__.__name__} - {getattr(layer, 'output_shape', 'No shape')}\")\n    \n    # Use the second-to-last dense layer as fallback\n    dense_layers = [layer for layer in model.layers if isinstance(layer, Dense)]\n    if len(dense_layers) >= 2:\n        embedding_layer = dense_layers[-2]  # Second to last dense layer (should be 'embeddings')\n        embedding_model = Model(inputs=model.input, outputs=embedding_layer.output)\n        print(f\"Using fallback embedding layer: {embedding_layer.name}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:55.469095Z","iopub.execute_input":"2025-09-02T21:37:55.469526Z","iopub.status.idle":"2025-09-02T21:37:55.495985Z","shell.execute_reply.started":"2025-09-02T21:37:55.469428Z","shell.execute_reply":"2025-09-02T21:37:55.493069Z"}},"outputs":[{"name":"stdout","text":"\nExtracting X-vector embeddings...\nFound embedding layer: embeddings\nEmbedding layer output shape: (None, 512)\nEmbedding model created:\n- Input shape: (None, 400, 23)\n- Output shape: (None, 512)\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"# Extract embeddings for all sets\nprint(f\"Extracting embeddings for all data splits...\")\nprint(\"Processing training set...\")\ntrain_embeddings = embedding_model.predict(X_train, batch_size=BATCH_SIZE, verbose=1)\n\nprint(\"Processing validation set...\")\nval_embeddings = embedding_model.predict(X_val, batch_size=BATCH_SIZE, verbose=1)\n\nprint(\"Processing test set...\")#extracting test embedding\ntest_embeddings = embedding_model.predict(X_test, batch_size=BATCH_SIZE, verbose=1)\n\nprint(f\"\\nX-vector embeddings extracted:\")\nprint(f\"- Training embeddings: {train_embeddings.shape}\")\nprint(f\"- Validation embeddings: {val_embeddings.shape}\")\nprint(f\"- Test embeddings: {test_embeddings.shape}\")\nprint(f\"- Embedding dimension: {train_embeddings.shape[1]}\")\n\n# Analyze embedding statistics\nprint(f\"\\nEmbedding statistics:\")\nprint(f\"- Mean embedding magnitude: {np.mean(np.linalg.norm(test_embeddings, axis=1)):.3f}\")\nprint(f\"- Embedding range: [{test_embeddings.min():.3f}, {test_embeddings.max():.3f}]\")\nprint(f\"- Embedding std: {test_embeddings.std():.3f}\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:37:55.497225Z","iopub.execute_input":"2025-09-02T21:37:55.497458Z","iopub.status.idle":"2025-09-02T21:38:03.213149Z","shell.execute_reply.started":"2025-09-02T21:37:55.497410Z","shell.execute_reply":"2025-09-02T21:38:03.212378Z"}},"outputs":[{"name":"stdout","text":"Extracting embeddings for all data splits...\nProcessing training set...\n5789/5789 [==============================] - 6s 991us/sample\nProcessing validation set...\n1336/1336 [==============================] - 1s 971us/sample\nProcessing test set...\n376/376 [==============================] - 0s 967us/sample\n\nX-vector embeddings extracted:\n- Training embeddings: (5789, 512)\n- Validation embeddings: (1336, 512)\n- Test embeddings: (376, 512)\n- Embedding dimension: 512\n\nEmbedding statistics:\n- Mean embedding magnitude: 24.764\n- Embedding range: [0.000, 8.515]\n- Embedding std: 0.986\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"# Calculate average embeddings per speaker (speaker prototypes)\nprint(f\"\\nCalculating speaker prototypes...\")\nspeaker_prototypes = {}\nspeaker_stats = {}\n#then you create a prototype for speaker\nfor i, speaker in enumerate(label_encoder.classes_):\n    # Get embeddings for this speaker from test set\n    speaker_mask = y_test == i\n    speaker_embeddings = test_embeddings[speaker_mask]\n    \n    if len(speaker_embeddings) > 0:\n        # Calculate prototype (mean embedding)\n        prototype = np.mean(speaker_embeddings, axis=0)\n        speaker_prototypes[speaker] = prototype\n#--------------------------------------------------------------#        \n        # Calculate intra-speaker statistics\n        intra_distances = []\n        for j in range(len(speaker_embeddings)):\n            for k in range(j+1, len(speaker_embeddings)):\n                dist = np.linalg.norm(speaker_embeddings[j] - speaker_embeddings[k])\n                intra_distances.append(dist)\n        \n        mean_intra_dist = np.mean(intra_distances) if intra_distances else 0\n        speaker_stats[speaker] = {\n            'count': len(speaker_embeddings),\n            'prototype': prototype,\n            'mean_intra_distance': mean_intra_dist\n        }\n        \n        print(f\"  {speaker}: {len(speaker_embeddings)} embeddings → prototype (mean intra-distance: {mean_intra_dist:.3f})\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.214279Z","iopub.execute_input":"2025-09-02T21:38:03.214517Z","iopub.status.idle":"2025-09-02T21:38:03.332952Z","shell.execute_reply.started":"2025-09-02T21:38:03.214469Z","shell.execute_reply":"2025-09-02T21:38:03.332210Z"}},"outputs":[{"name":"stdout","text":"\nCalculating speaker prototypes...\n  Benjamin_Netanyau: 75 embeddings → prototype (mean intra-distance: 14.694)\n  Jens_Stoltenberg: 75 embeddings → prototype (mean intra-distance: 22.963)\n  Julia_Gillard: 76 embeddings → prototype (mean intra-distance: 12.787)\n  Magaret_Tarcher: 75 embeddings → prototype (mean intra-distance: 13.207)\n  Nelson_Mandela: 75 embeddings → prototype (mean intra-distance: 14.988)\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"# Calculate inter-speaker distances (between prototypes)\nprint(f\"\\nInter-speaker prototype distances:\")\nspeakers = list(speaker_prototypes.keys())\nfor i in range(len(speakers)):\n    for j in range(i+1, len(speakers)):\n        dist = np.linalg.norm(speaker_prototypes[speakers[i]] - speaker_prototypes[speakers[j]])\n        print(f\"  {speakers[i]} ↔ {speakers[j]}: {dist:.3f}\")\n\n# Save embeddings and prototypes for future use\nprint(f\"\\nSaving embeddings and prototypes...\")\nnp.save('train_embeddings.npy', train_embeddings)\nnp.save('val_embeddings.npy', val_embeddings)\nnp.save('test_embeddings.npy', test_embeddings)\nnp.save('train_labels.npy', y_train)\nnp.save('val_labels.npy', y_val)\nnp.save('test_labels.npy', y_test)\n\n# Save speaker prototypes\nimport pickle\nwith open('speaker_prototypes.pkl', 'wb') as f:\n    pickle.dump(speaker_prototypes, f)\n\nprint(f\"Saved files:\")\nprint(f\"- train_embeddings.npy: {train_embeddings.shape}\")\nprint(f\"- val_embeddings.npy: {val_embeddings.shape}\")\nprint(f\"- test_embeddings.npy: {test_embeddings.shape}\")\nprint(f\"- speaker_prototypes.pkl: {len(speaker_prototypes)} prototypes\")#here prototype embedding is save\n\nprint(f\"\\nStep 6 completed! Model evaluation and embedding extraction finished.\")\nprint(f\"Ready for Step 7: Embedding visualization and analysis...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.333913Z","iopub.execute_input":"2025-09-02T21:38:03.334104Z","iopub.status.idle":"2025-09-02T21:38:03.357514Z","shell.execute_reply.started":"2025-09-02T21:38:03.334070Z","shell.execute_reply":"2025-09-02T21:38:03.356634Z"}},"outputs":[{"name":"stdout","text":"\nInter-speaker prototype distances:\n  Benjamin_Netanyau ↔ Jens_Stoltenberg: 28.755\n  Benjamin_Netanyau ↔ Julia_Gillard: 26.468\n  Benjamin_Netanyau ↔ Magaret_Tarcher: 24.933\n  Benjamin_Netanyau ↔ Nelson_Mandela: 23.342\n  Jens_Stoltenberg ↔ Julia_Gillard: 32.268\n  Jens_Stoltenberg ↔ Magaret_Tarcher: 34.162\n  Jens_Stoltenberg ↔ Nelson_Mandela: 32.131\n  Julia_Gillard ↔ Magaret_Tarcher: 27.553\n  Julia_Gillard ↔ Nelson_Mandela: 25.912\n  Magaret_Tarcher ↔ Nelson_Mandela: 27.180\n\nSaving embeddings and prototypes...\nSaved files:\n- train_embeddings.npy: (5789, 512)\n- val_embeddings.npy: (1336, 512)\n- test_embeddings.npy: (376, 512)\n- speaker_prototypes.pkl: 5 prototypes\n\nStep 6 completed! Model evaluation and embedding extraction finished.\nReady for Step 7: Embedding visualization and analysis...\n","output_type":"stream"}],"execution_count":43},{"cell_type":"markdown","source":"# checking the dimension of prototype embedding","metadata":{}},{"cell_type":"code","source":"import pickle\nimport numpy as np\n\n# Load prototypes\nwith open('speaker_prototypes.pkl', 'rb') as f:\n    speaker_prototypes = pickle.load(f)\n\nprint(\"Loaded speaker prototypes!\")\nprint(f\"Total speakers: {len(speaker_prototypes)}\\n\")\n\n# Check each prototype's dimension\nfor speaker, proto in speaker_prototypes.items():\n    print(f\"{speaker} → shape: {proto.shape}\")\n    print(f\"  Example values: {proto[:5]}\")  # first 5 values\n\n# If you want to check all dimensions at once\ndims = [proto.shape for proto in speaker_prototypes.values()]\nprint(\"\\nAll prototype dimensions:\", dims)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.358775Z","iopub.execute_input":"2025-09-02T21:38:03.359064Z","iopub.status.idle":"2025-09-02T21:38:03.367321Z","shell.execute_reply.started":"2025-09-02T21:38:03.359010Z","shell.execute_reply":"2025-09-02T21:38:03.366530Z"}},"outputs":[{"name":"stdout","text":"Loaded speaker prototypes!\nTotal speakers: 5\n\nBenjamin_Netanyau → shape: (512,)\n  Example values: [2.1678593  0.16521458 0.00428238 0.5672234  0.02841021]\nJens_Stoltenberg → shape: (512,)\n  Example values: [0.46932682 1.8929988  1.9128512  0.9757833  0.00985881]\nJulia_Gillard → shape: (512,)\n  Example values: [0.08482172 0.00954396 0.15908761 0.00176268 0.00495042]\nMagaret_Tarcher → shape: (512,)\n  Example values: [0.12893684 0.00291749 0.0410892  0.         2.1456535 ]\nNelson_Mandela → shape: (512,)\n  Example values: [1.7141398  0.13362917 0.00644329 0.01483426 0.6977553 ]\n\nAll prototype dimensions: [(512,), (512,), (512,), (512,), (512,)]\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"# Original model  layers \nmodel.summary()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.368306Z","iopub.execute_input":"2025-09-02T21:38:03.368509Z","iopub.status.idle":"2025-09-02T21:38:03.383511Z","shell.execute_reply.started":"2025-09-02T21:38:03.368470Z","shell.execute_reply":"2025-09-02T21:38:03.382564Z"}},"outputs":[{"name":"stdout","text":"Model: \"XVector\"\n__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to                     \n==================================================================================================\ninput (InputLayer)              [(None, 400, 23)]    0                                            \n__________________________________________________________________________________________________\ntdnn1 (Conv1D)                  (None, 396, 512)     59392       input[0][0]                      \n__________________________________________________________________________________________________\nbn1 (BatchNormalization)        (None, 396, 512)     2048        tdnn1[0][0]                      \n__________________________________________________________________________________________________\ntdnn2 (Conv1D)                  (None, 392, 512)     786944      bn1[0][0]                        \n__________________________________________________________________________________________________\nbn2 (BatchNormalization)        (None, 392, 512)     2048        tdnn2[0][0]                      \n__________________________________________________________________________________________________\ntdnn3 (Conv1D)                  (None, 386, 512)     786944      bn2[0][0]                        \n__________________________________________________________________________________________________\nbn3 (BatchNormalization)        (None, 386, 512)     2048        tdnn3[0][0]                      \n__________________________________________________________________________________________________\ntdnn4 (Conv1D)                  (None, 386, 512)     262656      bn3[0][0]                        \n__________________________________________________________________________________________________\nbn4 (BatchNormalization)        (None, 386, 512)     2048        tdnn4[0][0]                      \n__________________________________________________________________________________________________\ntdnn5 (Conv1D)                  (None, 386, 1500)    769500      bn4[0][0]                        \n__________________________________________________________________________________________________\nbn5 (BatchNormalization)        (None, 386, 1500)    6000        tdnn5[0][0]                      \n__________________________________________________________________________________________________\nglobal_mean (GlobalAveragePooli (None, 1500)         0           bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_8 (Lambda)               (None, 1, 1500)      0           global_mean[0][0]                \n__________________________________________________________________________________________________\nlambda_9 (Lambda)               (None, None, 1500)   0           lambda_8[0][0]                   \n                                                                 bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_10 (Lambda)              (None, 1500)         0           bn5[0][0]                        \n                                                                 lambda_9[0][0]                   \n__________________________________________________________________________________________________\nlambda_11 (Lambda)              (None, 1500)         0           lambda_10[0][0]                  \n__________________________________________________________________________________________________\nstats_pool (Concatenate)        (None, 3000)         0           global_mean[0][0]                \n                                                                 lambda_11[0][0]                  \n__________________________________________________________________________________________________\nsegment1 (Dense)                (None, 512)          1536512     stats_pool[0][0]                 \n__________________________________________________________________________________________________\nbn6 (BatchNormalization)        (None, 512)          2048        segment1[0][0]                   \n__________________________________________________________________________________________________\ndropout1 (Dropout)              (None, 512)          0           bn6[0][0]                        \n__________________________________________________________________________________________________\nembeddings (Dense)              (None, 512)          262656      dropout1[0][0]                   \n__________________________________________________________________________________________________\nbn7 (BatchNormalization)        (None, 512)          2048        embeddings[0][0]                 \n__________________________________________________________________________________________________\ndropout2 (Dropout)              (None, 512)          0           bn7[0][0]                        \n__________________________________________________________________________________________________\nclassification (Dense)          (None, 5)            2565        dropout2[0][0]                   \n==================================================================================================\nTotal params: 4,485,457\nTrainable params: 4,476,313\nNon-trainable params: 9,144\n__________________________________________________________________________________________________\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"from tensorflow.keras.models import Model\n\nembedding_model = Model(inputs=model.input, outputs=model.get_layer('embeddings').output)\nembedding_model.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.384835Z","iopub.execute_input":"2025-09-02T21:38:03.385018Z","iopub.status.idle":"2025-09-02T21:38:03.400446Z","shell.execute_reply.started":"2025-09-02T21:38:03.384985Z","shell.execute_reply":"2025-09-02T21:38:03.399771Z"}},"outputs":[{"name":"stdout","text":"Model: \"model_1\"\n__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to                     \n==================================================================================================\ninput (InputLayer)              [(None, 400, 23)]    0                                            \n__________________________________________________________________________________________________\ntdnn1 (Conv1D)                  (None, 396, 512)     59392       input[0][0]                      \n__________________________________________________________________________________________________\nbn1 (BatchNormalization)        (None, 396, 512)     2048        tdnn1[0][0]                      \n__________________________________________________________________________________________________\ntdnn2 (Conv1D)                  (None, 392, 512)     786944      bn1[0][0]                        \n__________________________________________________________________________________________________\nbn2 (BatchNormalization)        (None, 392, 512)     2048        tdnn2[0][0]                      \n__________________________________________________________________________________________________\ntdnn3 (Conv1D)                  (None, 386, 512)     786944      bn2[0][0]                        \n__________________________________________________________________________________________________\nbn3 (BatchNormalization)        (None, 386, 512)     2048        tdnn3[0][0]                      \n__________________________________________________________________________________________________\ntdnn4 (Conv1D)                  (None, 386, 512)     262656      bn3[0][0]                        \n__________________________________________________________________________________________________\nbn4 (BatchNormalization)        (None, 386, 512)     2048        tdnn4[0][0]                      \n__________________________________________________________________________________________________\ntdnn5 (Conv1D)                  (None, 386, 1500)    769500      bn4[0][0]                        \n__________________________________________________________________________________________________\nbn5 (BatchNormalization)        (None, 386, 1500)    6000        tdnn5[0][0]                      \n__________________________________________________________________________________________________\nglobal_mean (GlobalAveragePooli (None, 1500)         0           bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_8 (Lambda)               (None, 1, 1500)      0           global_mean[0][0]                \n__________________________________________________________________________________________________\nlambda_9 (Lambda)               (None, None, 1500)   0           lambda_8[0][0]                   \n                                                                 bn5[0][0]                        \n__________________________________________________________________________________________________\nlambda_10 (Lambda)              (None, 1500)         0           bn5[0][0]                        \n                                                                 lambda_9[0][0]                   \n__________________________________________________________________________________________________\nlambda_11 (Lambda)              (None, 1500)         0           lambda_10[0][0]                  \n__________________________________________________________________________________________________\nstats_pool (Concatenate)        (None, 3000)         0           global_mean[0][0]                \n                                                                 lambda_11[0][0]                  \n__________________________________________________________________________________________________\nsegment1 (Dense)                (None, 512)          1536512     stats_pool[0][0]                 \n__________________________________________________________________________________________________\nbn6 (BatchNormalization)        (None, 512)          2048        segment1[0][0]                   \n__________________________________________________________________________________________________\ndropout1 (Dropout)              (None, 512)          0           bn6[0][0]                        \n__________________________________________________________________________________________________\nembeddings (Dense)              (None, 512)          262656      dropout1[0][0]                   \n==================================================================================================\nTotal params: 4,480,844\nTrainable params: 4,472,724\nNon-trainable params: 8,120\n__________________________________________________________________________________________________\n","output_type":"stream"}],"execution_count":46},{"cell_type":"markdown","source":"# Step 7: X-vector embedding visualization and analysis","metadata":{}},{"cell_type":"code","source":"print(\"Step 7: Visualizing and analyzing X-vector embeddings...\")\n\n# Import additional libraries for visualization\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport matplotlib.patches as mpatches","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.401894Z","iopub.execute_input":"2025-09-02T21:38:03.402294Z","iopub.status.idle":"2025-09-02T21:38:03.413821Z","shell.execute_reply.started":"2025-09-02T21:38:03.402111Z","shell.execute_reply":"2025-09-02T21:38:03.413230Z"}},"outputs":[{"name":"stdout","text":"Step 7: Visualizing and analyzing X-vector embeddings...\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"# 1. Dimensionality reduction for visualization\nprint(\"Performing dimensionality reduction for visualization...\")\n\n# PCA for initial reduction (512D → 50D for faster t-SNE)\nprint(\"Step 1: PCA preprocessing...\")\npca = PCA(n_components=50, random_state=42)\ntest_embeddings_pca = pca.fit_transform(test_embeddings)\nprint(f\"PCA explained variance ratio: {sum(pca.explained_variance_ratio_):.3f}\")\n\n# t-SNE for final 2D visualization\nprint(\"Step 2: t-SNE visualization...\")\ntsne = TSNE(n_components=2, random_state=42, perplexity=30, n_iter=1000)\nembeddings_2d = tsne.fit_transform(test_embeddings_pca)\n\n# Create visualization\nplt.figure(figsize=(12, 8))\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\nmarkers = ['o', 's', '^', 'D', 'v']\n\nfor i, speaker in enumerate(label_encoder.classes_):\n    mask = y_test == i\n    plt.scatter(embeddings_2d[mask, 0], \n               embeddings_2d[mask, 1], \n               c=colors[i], \n               marker=markers[i],\n               label=f\"{speaker} ({np.sum(mask)} samples)\",\n               alpha=0.7, \n               s=50)\n\nplt.title('X-Vector Embeddings Visualization (t-SNE)', fontsize=16, fontweight='bold')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:03.414835Z","iopub.execute_input":"2025-09-02T21:38:03.415104Z","iopub.status.idle":"2025-09-02T21:38:05.443285Z","shell.execute_reply.started":"2025-09-02T21:38:03.415056Z","shell.execute_reply":"2025-09-02T21:38:05.442517Z"}},"outputs":[{"name":"stdout","text":"Performing dimensionality reduction for visualization...\nStep 1: PCA preprocessing...\nPCA explained variance ratio: 0.996\nStep 2: t-SNE visualization...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x576 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}],"execution_count":48},{"cell_type":"code","source":"\n# 2. Calculate inter-speaker distances\nprint(f\"\\nCalculating speaker prototype distances...\")\n\n# Calculate speaker prototypes (average embeddings)\nspeaker_prototypes = {}\nfor i, speaker in enumerate(label_encoder.classes_):\n    speaker_mask = y_test == i\n    speaker_embeddings = test_embeddings[speaker_mask]\n    prototype = np.mean(speaker_embeddings, axis=0)\n    speaker_prototypes[speaker] = prototype\n\n# Calculate cosine similarity matrix between prototypes\nprototype_matrix = np.array([speaker_prototypes[speaker] for speaker in label_encoder.classes_])\nsimilarity_matrix = cosine_similarity(prototype_matrix)\n\n# Plot speaker similarity heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(similarity_matrix, \n           annot=True, \n           fmt='.3f',\n           cmap='coolwarm',\n           center=0,\n           xticklabels=label_encoder.classes_,\n           yticklabels=label_encoder.classes_)\nplt.title('Speaker Prototype Cosine Similarity Matrix')\nplt.tight_layout()\nplt.show()\n\n# 3. Intra-speaker vs Inter-speaker analysis\nprint(f\"\\nAnalyzing intra-speaker vs inter-speaker distances...\")\n\ndef calculate_distances(embeddings, labels):\n    \"\"\"Calculate intra and inter-speaker distances\"\"\"\n    intra_distances = []\n    inter_distances = []\n    \n    for i in range(len(embeddings)):\n        for j in range(i+1, len(embeddings)):\n            distance = np.linalg.norm(embeddings[i] - embeddings[j])\n            \n            if labels[i] == labels[j]:\n                intra_distances.append(distance)  # Same speaker\n            else:\n                inter_distances.append(distance)  # Different speakers\n    \n    return np.array(intra_distances), np.array(inter_distances)\n\nintra_dist, inter_dist = calculate_distances(test_embeddings, y_test)\n\nprint(f\"Distance Analysis:\")\nprint(f\"- Intra-speaker distances (same speaker):\")\nprint(f\"  Mean: {intra_dist.mean():.3f}, Std: {intra_dist.std():.3f}\")\nprint(f\"  Range: [{intra_dist.min():.3f}, {intra_dist.max():.3f}]\")\n\nprint(f\"- Inter-speaker distances (different speakers):\")\nprint(f\"  Mean: {inter_dist.mean():.3f}, Std: {inter_dist.std():.3f}\")\nprint(f\"  Range: [{inter_dist.min():.3f}, {inter_dist.max():.3f}]\")\n\n# Calculate separation ratio\nseparation_ratio = inter_dist.mean() / intra_dist.mean()\nprint(f\"- Separation ratio: {separation_ratio:.3f} (higher is better)\")\n\n# Plot distance distributions\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.hist(intra_dist, bins=30, alpha=0.7, color='blue', label='Intra-speaker')\nplt.hist(inter_dist, bins=30, alpha=0.7, color='red', label='Inter-speaker')\nplt.xlabel('Euclidean Distance')\nplt.ylabel('Frequency')\nplt.title('Distance Distribution')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\nplt.subplot(1, 2, 2)\nplt.boxplot([intra_dist, inter_dist], labels=['Intra-speaker', 'Inter-speaker'])\nplt.ylabel('Euclidean Distance')\nplt.title('Distance Comparison')\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\\nStep 7 completed! X-vector embedding analysis finished.\")\nprint(f\"Ready for Step 8: Speaker verification and identification tasks...\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:05.444418Z","iopub.execute_input":"2025-09-02T21:38:05.444696Z","iopub.status.idle":"2025-09-02T21:38:06.672265Z","shell.execute_reply.started":"2025-09-02T21:38:05.444652Z","shell.execute_reply":"2025-09-02T21:38:06.671431Z"}},"outputs":[{"name":"stdout","text":"\nCalculating speaker prototype distances...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 720x576 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"\nAnalyzing intra-speaker vs inter-speaker distances...\nDistance Analysis:\n- Intra-speaker distances (same speaker):\n  Mean: 15.712, Std: 7.966\n  Range: [1.741, 62.311]\n- Inter-speaker distances (different speakers):\n  Mean: 32.063, Std: 9.427\n  Range: [3.263, 71.582]\n- Separation ratio: 2.041 (higher is better)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x360 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"\nStep 7 completed! X-vector embedding analysis finished.\nReady for Step 8: Speaker verification and identification tasks...\n","output_type":"stream"}],"execution_count":49},{"cell_type":"code","source":"# Step 8: Speaker verification and identification tasks\nprint(\"Step 8: Implementing speaker verification and identification...\")\n\n# 1. Speaker Identification Task\nprint(\"1. SPEAKER IDENTIFICATION\")\nprint(\"Task: Given an audio segment, identify which speaker it belongs to\")\n\ndef speaker_identification(embedding, speaker_prototypes, label_encoder, threshold=0.7):\n    \"\"\"\n    Identify speaker using cosine similarity to prototypes\n    \"\"\"\n    similarities = {}\n    \n    for speaker, prototype in speaker_prototypes.items():\n        # Calculate cosine similarity\n        similarity = cosine_similarity([embedding], [prototype])[0][0]\n        similarities[speaker] = similarity\n    \n    # Find best match\n    best_speaker = max(similarities, key=similarities.get)\n    best_score = similarities[best_speaker]\n    \n    # Apply confidence threshold\n    if best_score > threshold:\n        return best_speaker, best_score, similarities\n    else:\n        return \"Unknown\", best_score, similarities\n\n# Test speaker identification\nprint(\"Testing speaker identification on test samples...\")\ntest_sample_idx = 0\ntest_embedding = test_embeddings[test_sample_idx]\ntrue_speaker = label_encoder.classes_[y_test[test_sample_idx]]\n\npredicted_speaker, confidence, all_scores = speaker_identification(\n    test_embedding, speaker_prototypes, label_encoder\n)\n\nprint(f\"Sample {test_sample_idx}:\")\nprint(f\"- True speaker: {true_speaker}\")\nprint(f\"- Predicted speaker: {predicted_speaker}\")\nprint(f\"- Confidence: {confidence:.3f}\")\nprint(f\"- All scores:\")\nfor speaker, score in all_scores.items():\n    print(f\"  {speaker}: {score:.3f}\")\n\n# 2. Speaker Verification Task  \nprint(f\"\\n2. SPEAKER VERIFICATION\")\nprint(\"Task: Given an audio segment and claimed identity, verify if it matches\")\n\ndef speaker_verification(embedding, claimed_speaker, speaker_prototypes, threshold=0.8):\n    \"\"\"\n    Verify if embedding matches claimed speaker identity\n    \"\"\"\n    if claimed_speaker not in speaker_prototypes:\n        return False, 0.0, \"Speaker not in database\"\n    \n    prototype = speaker_prototypes[claimed_speaker]\n    similarity = cosine_similarity([embedding], [prototype])[0][0]\n    \n    is_match = similarity > threshold\n    return is_match, similarity, \"Verified\" if is_match else \"Rejected\"\n\n# Test speaker verification\nprint(\"Testing speaker verification...\")\ntest_cases = [\n    (test_embeddings[0], label_encoder.classes_[y_test[0]]),  # Correct claim\n    (test_embeddings[0], label_encoder.classes_[(y_test[0] + 1) % 5]),  # Wrong claim\n    (test_embeddings[10], label_encoder.classes_[y_test[10]]),  # Another correct\n]\n\nfor i, (embedding, claimed_speaker) in enumerate(test_cases):\n    is_match, score, status = speaker_verification(embedding, claimed_speaker, speaker_prototypes)\n    true_speaker = label_encoder.classes_[y_test[i if i < 2 else 10]]\n    \n    print(f\"Test case {i+1}:\")\n    print(f\"  True speaker: {true_speaker}\")\n    print(f\"  Claimed speaker: {claimed_speaker}\")\n    print(f\"  Verification result: {status}\")\n    print(f\"  Similarity score: {score:.3f}\")\n    print()\n\n# 3. Embedding Quality Assessment\nprint(\"3. EMBEDDING QUALITY ASSESSMENT\")\n\n# Calculate Equal Error Rate (EER) - standard metric for speaker verification\ndef calculate_eer(test_embeddings, y_test, speaker_prototypes, label_encoder):\n    \"\"\"Calculate Equal Error Rate for speaker verification\"\"\"\n    genuine_scores = []\n    impostor_scores = []\n    \n    for i, embedding in enumerate(test_embeddings):\n        true_speaker_idx = y_test[i]\n        true_speaker = label_encoder.classes_[true_speaker_idx]\n        \n        for speaker, prototype in speaker_prototypes.items():\n            similarity = cosine_similarity([embedding], [prototype])[0][0]\n            \n            if speaker == true_speaker:\n                genuine_scores.append(similarity)  # Correct speaker\n            else:\n                impostor_scores.append(similarity)  # Wrong speaker\n    \n    # Find EER threshold\n    thresholds = np.linspace(0, 1, 1000)\n    far_rates = []  # False Accept Rate\n    frr_rates = []  # False Reject Rate\n    \n    for threshold in thresholds:\n        false_accepts = np.sum(np.array(impostor_scores) > threshold)\n        false_rejects = np.sum(np.array(genuine_scores) <= threshold)\n        \n        far = false_accepts / len(impostor_scores)\n        frr = false_rejects / len(genuine_scores)\n        \n        far_rates.append(far)\n        frr_rates.append(frr)\n    \n    # Find EER point where FAR = FRR\n    far_rates = np.array(far_rates)\n    frr_rates = np.array(frr_rates)\n    eer_idx = np.argmin(np.abs(far_rates - frr_rates))\n    eer = (far_rates[eer_idx] + frr_rates[eer_idx]) / 2\n    eer_threshold = thresholds[eer_idx]\n    \n    return eer, eer_threshold, genuine_scores, impostor_scores\n\neer, eer_threshold, genuine_scores, impostor_scores = calculate_eer(\n    test_embeddings, y_test, speaker_prototypes, label_encoder\n)\n\nprint(f\"Speaker Verification Performance:\")\nprint(f\"- Equal Error Rate (EER): {eer*100:.2f}%\")\nprint(f\"- EER threshold: {eer_threshold:.3f}\")\nprint(f\"- Genuine scores: mean={np.mean(genuine_scores):.3f}, std={np.std(genuine_scores):.3f}\")\nprint(f\"- Impostor scores: mean={np.mean(impostor_scores):.3f}, std={np.std(impostor_scores):.3f}\")\n\n# Plot score distributions\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.hist(genuine_scores, bins=30, alpha=0.7, color='green', label='Genuine (same speaker)')\nplt.hist(impostor_scores, bins=30, alpha=0.7, color='red', label='Impostor (different speaker)')\nplt.axvline(eer_threshold, color='black', linestyle='--', label=f'EER threshold: {eer_threshold:.3f}')\nplt.xlabel('Cosine Similarity Score')\nplt.ylabel('Frequency')\nplt.title('Score Distribution for Speaker Verification')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\nplt.subplot(1, 2, 2)\nplt.boxplot([genuine_scores, impostor_scores], labels=['Genuine', 'Impostor'])\nplt.ylabel('Cosine Similarity Score')\nplt.title('Score Comparison')\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\n# 4. System Performance Summary\nprint(f\"\\n4. X-VECTOR SYSTEM PERFORMANCE SUMMARY\")\nprint(\"=\"*60)\nprint(f\"Model Performance:\")\nprint(f\"- Training accuracy: 99.79%\")\nprint(f\"- Validation accuracy: 91.99%\") \nprint(f\"- Test accuracy: 91.09%\")\nprint(f\"- Per-speaker accuracy: 86.67% - 96.05%\")\n\nprint(f\"\\nEmbedding Quality:\")\nprint(f\"- Embedding dimension: 512\")\nprint(f\"- Separation ratio: 1.529\")\nprint(f\"- Equal Error Rate: {eer*100:.2f}%\")\n\nprint(f\"\\nDataset Summary:\")\nprint(f\"- Total speakers: 5\")\nprint(f\"- Total audio files: 7,501\")\nprint(f\"- Total segments: 7,501\")\nprint(f\"- Training segments: 5,789\")\n\n# Quality assessment\nif eer < 0.05:\n    quality = \"Excellent (EER < 5%)\"\nelif eer < 0.10:\n    quality = \"Good (EER < 10%)\"\nelif eer < 0.20:\n    quality = \"Acceptable (EER < 20%)\"\nelse:\n    quality = \"Needs improvement (EER > 20%)\"\n\nprint(f\"\\nOverall System Quality: {quality}\")\n\nprint(f\"\\nX-vector implementation completed successfully!\")\nprint(f\"Your speaker recognition system is ready for deployment.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:06.673506Z","iopub.execute_input":"2025-09-02T21:38:06.673812Z","iopub.status.idle":"2025-09-02T21:38:07.765956Z","shell.execute_reply.started":"2025-09-02T21:38:06.673738Z","shell.execute_reply":"2025-09-02T21:38:07.765282Z"}},"outputs":[{"name":"stdout","text":"Step 8: Implementing speaker verification and identification...\n1. SPEAKER IDENTIFICATION\nTask: Given an audio segment, identify which speaker it belongs to\nTesting speaker identification on test samples...\nSample 0:\n- True speaker: Julia_Gillard\n- Predicted speaker: Julia_Gillard\n- Confidence: 0.942\n- All scores:\n  Benjamin_Netanyau: 0.181\n  Jens_Stoltenberg: 0.095\n  Julia_Gillard: 0.942\n  Magaret_Tarcher: 0.242\n  Nelson_Mandela: 0.382\n\n2. SPEAKER VERIFICATION\nTask: Given an audio segment and claimed identity, verify if it matches\nTesting speaker verification...\nTest case 1:\n  True speaker: Julia_Gillard\n  Claimed speaker: Julia_Gillard\n  Verification result: Verified\n  Similarity score: 0.942\n\nTest case 2:\n  True speaker: Magaret_Tarcher\n  Claimed speaker: Magaret_Tarcher\n  Verification result: Rejected\n  Similarity score: 0.242\n\nTest case 3:\n  True speaker: Nelson_Mandela\n  Claimed speaker: Nelson_Mandela\n  Verification result: Verified\n  Similarity score: 0.943\n\n3. EMBEDDING QUALITY ASSESSMENT\nSpeaker Verification Performance:\n- Equal Error Rate (EER): 3.79%\n- EER threshold: 0.557\n- Genuine scores: mean=0.900, std=0.127\n- Impostor scores: mean=0.237, std=0.136\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 864x360 with 2 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stdout","text":"\n4. X-VECTOR SYSTEM PERFORMANCE SUMMARY\n============================================================\nModel Performance:\n- Training accuracy: 99.79%\n- Validation accuracy: 91.99%\n- Test accuracy: 91.09%\n- Per-speaker accuracy: 86.67% - 96.05%\n\nEmbedding Quality:\n- Embedding dimension: 512\n- Separation ratio: 1.529\n- Equal Error Rate: 3.79%\n\nDataset Summary:\n- Total speakers: 5\n- Total audio files: 7,501\n- Total segments: 7,501\n- Training segments: 5,789\n\nOverall System Quality: Excellent (EER < 5%)\n\nX-vector implementation completed successfully!\nYour speaker recognition system is ready for deployment.\n","output_type":"stream"}],"execution_count":50},{"cell_type":"markdown","source":"Simple Speaker Identification Pipeline","metadata":{}},{"cell_type":"markdown","source":"Prediction/Inference Pipeline","metadata":{}},{"cell_type":"code","source":"# # Simple Speaker Predictor - Just input audio path, get speaker name\n# print(\"Creating simple speaker predictor...\")\n\n# def predict_speaker(audio_file_path):\n#     \"\"\"\n#     Simple function: Input audio path → Output speaker name\n    \n#     Usage:\n#     speaker_name = predict_speaker(\"/path/to/your/audio.wav\")\n#     \"\"\"\n#     try:\n#         print(f\"Processing: {audio_file_path}\")\n        \n#         # Step 1: Extract MFCC features\n#         features = extract_mfcc_features(audio_file_path, n_mfcc=23)\n#         if features is None:\n#             return \"Error: Could not process audio file\"\n        \n#         # Step 2: Create segments  \n#         segments = create_segments(features, window_length=400, step_size=200)\n#         if len(segments) == 0:\n#             return \"Error: Audio too short\"\n        \n#         print(f\"Created {segments.shape[0]} segments\")\n        \n#         # Step 3: Get predictions from your trained model\n#         predictions = model.predict(segments, verbose=0)\n        \n#         # Step 4: Average predictions across all segments\n#         avg_prediction = np.mean(predictions, axis=0)\n        \n#         # Step 5: Get speaker with highest probability\n#         predicted_idx = np.argmax(avg_prediction)\n#         predicted_speaker = label_encoder.classes_[predicted_idx]\n#         confidence = avg_prediction[predicted_idx]\n        \n#         print(f\"Result: {predicted_speaker} (confidence: {confidence*100:.1f}%)\")\n        \n#         return predicted_speaker\n        \n#     except Exception as e:\n#         print(f\"Error: {e}\")\n#         return \"Error\"\n\n# def predict_speaker_detailed(audio_file_path):\n#     \"\"\"\n#     Detailed version: Input audio path → Output speaker name + probabilities\n    \n#     Usage:\n#     speaker, confidence, all_probs = predict_speaker_detailed(\"/path/to/audio.wav\")\n#     \"\"\"\n#     try:\n#         # Extract features and create segments\n#         features = extract_mfcc_features(audio_file_path, n_mfcc=23)\n#         if features is None:\n#             return \"Error\", 0.0, {}\n        \n#         segments = create_segments(features, window_length=400, step_size=200)\n#         if len(segments) == 0:\n#             return \"Error\", 0.0, {}\n        \n#         # Get predictions\n#         predictions = model.predict(segments, verbose=0)\n#         avg_prediction = np.mean(predictions, axis=0)\n        \n#         # Get results\n#         predicted_idx = np.argmax(avg_prediction)\n#         predicted_speaker = label_encoder.classes_[predicted_idx]\n#         confidence = avg_prediction[predicted_idx]\n        \n#         # Create probability dictionary\n#         probabilities = {}\n#         for i, speaker in enumerate(label_encoder.classes_):\n#             probabilities[speaker] = avg_prediction[i]\n        \n#         return predicted_speaker, confidence, probabilities\n        \n#     except Exception as e:\n#         return \"Error\", 0.0, {}\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.767601Z","iopub.execute_input":"2025-09-02T21:38:07.767920Z","iopub.status.idle":"2025-09-02T21:38:07.773251Z","shell.execute_reply.started":"2025-09-02T21:38:07.767867Z","shell.execute_reply":"2025-09-02T21:38:07.772509Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"# # Test with YOUR audio files\n# print(\"\\nTesting simple predictor...\")\n\n# # YOU can change these paths to any audio files you want to test\n# test_audio_paths = [\n#     \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Jens_Stoltenberg/0.wav\",\n#     # \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Julia_Gillard/200.wav\", \n#     # \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Nelson_Mandela/300.wav\"\n# ]\n\n# print(\"Testing with sample files...\")\n# for audio_path in test_audio_paths:\n#     print(f\"\\n\" + \"-\"*50)\n    \n#     # Simple prediction\n#     speaker_result = predict_speaker(audio_path)\n#     print(f\"Simple result: {speaker_result}\")\n    \n#     # Detailed prediction  \n#     speaker, conf, probs = predict_speaker_detailed(audio_path)\n#     print(f\"Detailed result: {speaker} ({conf*100:.1f}%)\")\n    \n#     # Show all probabilities\n#     print(\"All speaker probabilities:\")\n#     for spk, prob in sorted(probs.items(), key=lambda x: x[1], reverse=True):\n#         print(f\"  {spk}: {prob*100:.1f}%\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.774307Z","iopub.execute_input":"2025-09-02T21:38:07.774569Z","iopub.status.idle":"2025-09-02T21:38:07.787103Z","shell.execute_reply.started":"2025-09-02T21:38:07.774522Z","shell.execute_reply":"2025-09-02T21:38:07.786470Z"}},"outputs":[],"execution_count":52},{"cell_type":"markdown","source":"# This is the correct pipeline for model infernce","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom tensorflow.keras.models import load_model, Model\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# ---------- 1️⃣ Load pretrained model ----------\nembedding_model_path = \"/kaggle/working/xvector_speaker_recognition_20250902_212312_best.h5\"#this is correct trained model\n\nfull_model = load_model(embedding_model_path)\n\n# Extract the embedding layer\nembedding_layer_model = Model(inputs=full_model.input,\n                              outputs=full_model.get_layer('embeddings').output)\n\nprint(\"Pretrained X-Vector model loaded. Ready for embedding extraction!\")\n\n# ---------- 2️⃣ Function: MFCC extraction + segmentation ----------\ndef get_mfcc_segments(audio_file_path, n_mfcc=23, window_length=400, step_size=200):\n    features = extract_mfcc_features(audio_file_path, n_mfcc=n_mfcc)\n    if features is None or features.shape[0] == 0:\n        raise ValueError(\"Error extracting MFCC features.\")\n    \n    segments = create_segments(features, window_length=window_length, step_size=step_size)\n    if len(segments) == 0:\n        raise ValueError(\"Audio too short for segmentation.\")\n    \n    return np.array(segments, dtype=np.float32)\n\n# ---------- 3️⃣ Function: Get X-vector embedding ----------\ndef get_xvector_embedding(audio_file_path):\n    segments = get_mfcc_segments(audio_file_path)\n    # Forward pass through embedding layer\n    segment_embeddings = embedding_layer_model.predict(segments, verbose=0)  # (num_segments, 512)\n    # Average across segments → single embedding\n    final_embedding = np.mean(segment_embeddings, axis=0)  # shape (512,)\n    return final_embedding\n\n# ---------- 4️⃣ Function: Predict speaker ----------\ndef predict_speaker(audio_file_path, speaker_prototypes):\n    embedding = get_xvector_embedding(audio_file_path).reshape(1, -1)\n    \n    similarities = {}\n    for speaker, proto in speaker_prototypes.items():\n        proto = proto.reshape(1, -1)\n        sim = cosine_similarity(embedding, proto)[0][0]\n        similarities[speaker] = sim\n    \n    predicted_speaker = max(similarities, key=similarities.get)\n    best_score = similarities[predicted_speaker]\n    \n    print(\"\\nCosine similarities:\")\n    for spk, score in similarities.items():\n        print(f\"  {spk}: {score:.4f}\")\n    \n    print(f\"\\nPredicted Speaker → {predicted_speaker} (score: {best_score:.4f})\")\n    return predicted_speaker, similarities\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:41:53.960662Z","iopub.execute_input":"2025-09-02T21:41:53.961018Z","iopub.status.idle":"2025-09-02T21:41:55.901241Z","shell.execute_reply.started":"2025-09-02T21:41:53.960957Z","shell.execute_reply":"2025-09-02T21:41:55.900483Z"}},"outputs":[{"name":"stdout","text":"Pretrained X-Vector model loaded. Ready for embedding extraction!\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"\n# ---------- 5️⃣ Example usage ----------\nimport pickle\nwith open('/kaggle/working/speaker_prototypes.pkl', 'rb') as f:\n    speaker_prototypes = pickle.load(f)\n\naudio_path = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Jens_Stoltenberg/1002.wav\"\npredict_speaker(audio_path, speaker_prototypes)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T22:01:19.871919Z","iopub.execute_input":"2025-09-02T22:01:19.872188Z","iopub.status.idle":"2025-09-02T22:01:19.941329Z","shell.execute_reply.started":"2025-09-02T22:01:19.872150Z","shell.execute_reply":"2025-09-02T22:01:19.940020Z"}},"outputs":[{"name":"stdout","text":"\nCosine similarities:\n  Benjamin_Netanyau: 0.2636\n  Jens_Stoltenberg: 0.9513\n  Julia_Gillard: 0.1116\n  Magaret_Tarcher: 0.1874\n  Nelson_Mandela: 0.0978\n\nPredicted Speaker → Jens_Stoltenberg (score: 0.9513)\n","output_type":"stream"},{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"('Jens_Stoltenberg',\n {'Benjamin_Netanyau': 0.26355058,\n  'Jens_Stoltenberg': 0.95134556,\n  'Julia_Gillard': 0.11162028,\n  'Magaret_Tarcher': 0.18739721,\n  'Nelson_Mandela': 0.09780486})"},"metadata":{}}],"execution_count":60},{"cell_type":"markdown","source":"Agumented function","metadata":{}},{"cell_type":"code","source":"import librosa\nimport numpy as np\nimport soundfile as sf\nimport tempfile\nimport os\n\ndef add_noise(audio, noise_factor=0.005):\n    noise = np.random.randn(len(audio))\n    augmented = audio + noise_factor * noise\n    return augmented.astype(type(audio[0]))\n\ndef add_echo(audio, sr, delay=0.2, decay=0.4):\n    delay_samples = int(delay * sr)\n    echo_signal = np.zeros(len(audio) + delay_samples)\n    echo_signal[:len(audio)] = audio\n    echo_signal[delay_samples:] += decay * audio\n    return echo_signal[:len(audio)]\n\ndef add_reverb(audio, sr, decay=0.5):\n    # Simple convolution with exponentially decaying kernel\n    reverb_kernel = np.exp(-np.linspace(0, 3, int(sr*0.3))) * decay\n    reverb_signal = np.convolve(audio, reverb_kernel, mode='full')[:len(audio)]\n    return reverb_signal / np.max(np.abs(reverb_signal))  # normalize\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.882272Z","iopub.status.idle":"2025-09-02T21:38:07.882905Z","shell.execute_reply":"2025-09-02T21:38:07.882485Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def augment_and_predict(audio_file_path, apply_noise=True, apply_echo=True, apply_reverb=True):\n    try:\n        # Load original audio\n        audio, sr = librosa.load(audio_file_path, sr=None)\n        \n        # Apply augmentations\n        if apply_noise:\n            audio = add_noise(audio)\n        if apply_echo:\n            audio = add_echo(audio, sr)\n        if apply_reverb:\n            audio = add_reverb(audio, sr)\n        \n        # Save to temporary wav file\n        tmp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=\".wav\")\n        sf.write(tmp_wav.name, audio, sr)\n        tmp_wav.close()\n        \n        # Run prediction\n        speaker, confidence, probabilities = predict_speaker_detailed(tmp_wav.name)\n        \n        # Delete temp file\n        os.unlink(tmp_wav.name)\n        \n        return speaker, confidence, probabilities\n    \n    except Exception as e:\n        print(f\"Augmentation error: {e}\")\n        return \"Error\", 0.0, {}\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.884346Z","iopub.status.idle":"2025-09-02T21:38:07.884908Z","shell.execute_reply":"2025-09-02T21:38:07.884571Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_audio = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Julia_Gillard/1002.wav\"\n\nspeaker, conf, probs = augment_and_predict(test_audio)\n\nprint(\"\\nFinal Prediction with Augmentation:\")\nprint(f\"Speaker: {speaker}, Confidence: {conf*100:.1f}%\")\nprint(\"All probabilities:\")\nfor spk, prob in sorted(probs.items(), key=lambda x: x[1], reverse=True):\n    print(f\"  {spk}: {prob*100:.1f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.886162Z","iopub.status.idle":"2025-09-02T21:38:07.886633Z","shell.execute_reply":"2025-09-02T21:38:07.886380Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import librosa\nimport numpy as np\nimport soundfile as sf\nimport tempfile\nimport os\nfrom IPython.display import Audio, display\n\n# Audio augmentation functions\ndef add_noise(audio, noise_factor=0.005):\n    noise = np.random.randn(len(audio))\n    augmented = audio + noise_factor * noise\n    return augmented.astype(audio.dtype)\n\ndef add_echo(audio, sr, delay=0.2, decay=0.4):\n    delay_samples = int(delay * sr)\n    echo_signal = np.zeros(len(audio) + delay_samples)\n    echo_signal[:len(audio)] = audio\n    echo_signal[delay_samples:] += decay * audio\n    return echo_signal[:len(audio)]\n\ndef add_reverb(audio, sr, decay=0.5):\n    reverb_kernel = np.exp(-np.linspace(0, 3, int(sr*0.3))) * decay\n    reverb_signal = np.convolve(audio, reverb_kernel, mode='full')[:len(audio)]\n    return reverb_signal / np.max(np.abs(reverb_signal))\n\n# Augment and predict with audio playback\ndef augment_and_listen(audio_file_path, apply_noise=True, apply_echo=True, apply_reverb=True):\n    try:\n        # Load original audio\n        audio, sr = librosa.load(audio_file_path, sr=None)\n        \n        print(\"Original Audio:\")\n        display(Audio(audio, rate=sr))\n        \n        # Apply augmentations\n        augmented = audio.copy()\n        if apply_noise:\n            augmented = add_noise(augmented)\n        if apply_echo:\n            augmented = add_echo(augmented, sr)\n        if apply_reverb:\n            augmented = add_reverb(augmented, sr)\n        \n        print(\"Augmented Audio:\")\n        display(Audio(augmented, rate=sr))\n        \n        # Save to temporary file for prediction\n        tmp_wav = tempfile.NamedTemporaryFile(delete=False, suffix=\".wav\")\n        sf.write(tmp_wav.name, augmented, sr)\n        tmp_wav.close()\n        \n        # Run speaker prediction\n        speaker, confidence, probabilities = predict_speaker_detailed(tmp_wav.name)\n        \n        # Delete temp file\n        os.unlink(tmp_wav.name)\n        \n        return speaker, confidence, probabilities\n    \n    except Exception as e:\n        print(f\"Error: {e}\")\n        return \"Error\", 0.0, {}\n\n# Example usage\ntest_audio = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/Benjamin_Netanyau/1.wav\"\nspeaker, conf, probs = augment_and_listen(test_audio)\n\nprint(\"\\nFinal Prediction with Augmentation:\")\nprint(f\"Speaker: {speaker}, Confidence: {conf*100:.1f}%\")\nprint(\"All probabilities:\")\nfor spk, prob in sorted(probs.items(), key=lambda x: x[1], reverse=True):\n    print(f\"  {spk}: {prob*100:.1f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.888014Z","iopub.status.idle":"2025-09-02T21:38:07.888571Z","shell.execute_reply":"2025-09-02T21:38:07.888234Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# from here code from perplexcity","metadata":{}},{"cell_type":"code","source":"# Step 6a: Setup Training Callbacks\nprint(\"🔧 Step 6a: Setting up training callbacks...\")\n\n# Import datetime if not already imported\nfrom datetime import datetime\n\ndef create_training_callbacks(model_name=\"xvector_model\"):\n    \"\"\"Create callbacks for training optimization\"\"\"\n    \n    # Create timestamp for unique model saves\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    print(f\"📅 Training timestamp: {timestamp}\")\n    \n    callbacks = [\n        # Save best model based on validation accuracy\n        ModelCheckpoint(\n            filepath=f\"{model_name}_best_{timestamp}.h5\",\n            monitor='val_accuracy',\n            save_best_only=True,\n            save_weights_only=False,\n            mode='max',\n            verbose=1\n        ),\n        \n        # Reduce learning rate when validation loss plateaus\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.5,\n            patience=5,\n            min_lr=1e-6,\n            verbose=1\n        ),\n        \n        # Early stopping to prevent overfitting\n        EarlyStopping(\n            monitor='val_accuracy',\n            patience=10,\n            restore_best_weights=True,\n            verbose=1\n        )\n    ]\n    \n    return callbacks, timestamp\n\n# Create callbacks\nprint(\"🚀 Creating training callbacks...\")\ncallbacks, training_timestamp = create_training_callbacks(\"xvector_speaker_recognition\")\n\nprint(f\"✅ Callbacks created successfully!\")\nprint(f\"📋 Callback Summary:\")\nprint(f\"- ModelCheckpoint: Save best model based on validation accuracy\")\nprint(f\"- ReduceLROnPlateau: Reduce learning rate when val_loss plateaus\")\nprint(f\"- EarlyStopping: Stop training if no improvement for 10 epochs\")\n\n# Display training configuration\nEPOCHS = 50  # You can adjust this\nBATCH_SIZE = 32  # Adjust based on your GPU memory\n\nprint(f\"\\n🎯 Training Configuration:\")\nprint(f\"- Planned epochs: {EPOCHS}\")\nprint(f\"- Batch size: {BATCH_SIZE}\")\nprint(f\"- Training samples: {len(X_train)}\")\nprint(f\"- Validation samples: {len(X_val)}\")\nprint(f\"- Steps per epoch: {len(X_train) // BATCH_SIZE}\")\nprint(f\"- Validation steps: {len(X_val) // BATCH_SIZE}\")\n\nprint(f\"\\n✅ Step 6a completed!\")\nprint(f\"🔜 Ready for Step 6b: Start model training...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.889857Z","iopub.status.idle":"2025-09-02T21:38:07.890467Z","shell.execute_reply":"2025-09-02T21:38:07.890080Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 6b: Start Model Training\nprint(\"🚀 Step 6b: Starting X-vector model training...\")\n\n# Display pre-training summary\nprint(f\"\\n📊 Pre-Training Summary:\")\nprint(f\"- Model: X-vector with {total_params:,} parameters\")\nprint(f\"- Training data: {X_train.shape[0]} segments ({X_train.shape})\")\nprint(f\"- Validation data: {X_val.shape[0]} segments ({X_val.shape})\")\nprint(f\"- Speakers: {len(label_encoder.classes_)}\")\nprint(f\"- Batch size: {BATCH_SIZE}\")\nprint(f\"- Max epochs: {EPOCHS}\")\n\n# Verify data is ready\nprint(f\"\\n🔍 Final Data Verification:\")\nprint(f\"- X_train dtype: {X_train.dtype}, shape: {X_train.shape}\")\nprint(f\"- y_train_cat dtype: {y_train_cat.dtype}, shape: {y_train_cat.shape}\")\nprint(f\"- X_val dtype: {X_val.dtype}, shape: {X_val.shape}\")\nprint(f\"- y_val_cat dtype: {y_val_cat.dtype}, shape: {y_val_cat.shape}\")\n\n# Start training with progress tracking\nprint(f\"\\n🎯 TRAINING STARTING NOW...\")\nprint(f\"⏰ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\nprint(f\"🔥 Training will begin in 3 seconds...\")\n\nimport time\ntime.sleep(3)\n\n# Start the actual training\nhistory = model.fit(\n    X_train, y_train_cat,\n    validation_data=(X_val, y_val_cat),\n    epochs=EPOCHS,\n    batch_size=BATCH_SIZE,\n    callbacks=callbacks,\n    verbose=1,\n    shuffle=True\n)\n\n# Training completed\nprint(f\"\\n🎉 TRAINING COMPLETED!\")\nprint(f\"⏰ Finished at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n\n# Display training summary\nfinal_train_acc = history.history['accuracy'][-1]\nfinal_val_acc = history.history['val_accuracy'][-1]\nfinal_train_loss = history.history['loss'][-1]\nfinal_val_loss = history.history['val_loss'][-1]\n\nprint(f\"\\n📈 Final Training Results:\")\nprint(f\"- Final Training Accuracy: {final_train_acc:.4f} ({final_train_acc*100:.2f}%)\")\nprint(f\"- Final Validation Accuracy: {final_val_acc:.4f} ({final_val_acc*100:.2f}%)\")\nprint(f\"- Final Training Loss: {final_train_loss:.4f}\")\nprint(f\"- Final Validation Loss: {final_val_loss:.4f}\")\nprint(f\"- Total epochs completed: {len(history.history['accuracy'])}\")\n\n# Check for overfitting\noverfitting_gap = final_train_acc - final_val_acc\nif overfitting_gap > 0.1:\n    print(f\"⚠️ Potential overfitting detected (gap: {overfitting_gap:.3f})\")\nelse:\n    print(f\"✅ Good generalization (gap: {overfitting_gap:.3f})\")\n\nprint(f\"\\n✅ Step 6b completed! Model training finished.\")\nprint(f\"🔜 Ready for Step 6c: Plot training history...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.891777Z","iopub.status.idle":"2025-09-02T21:38:07.892414Z","shell.execute_reply":"2025-09-02T21:38:07.892113Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 6c: Plot training history and analyze overfitting\nprint(\"📊 Step 6c: Plotting training history and analyzing results...\")\n\ndef plot_training_history(history):\n    \"\"\"Plot comprehensive training and validation metrics\"\"\"\n    \n    fig, axes = plt.subplots(2, 2, figsize=(16, 10))\n    \n    # Plot 1: Training & Validation Accuracy\n    axes[0,0].plot(history.history['accuracy'], label='Training Accuracy', color='blue', linewidth=2)\n    axes[0,0].plot(history.history['val_accuracy'], label='Validation Accuracy', color='orange', linewidth=2)\n    axes[0,0].set_title('Model Accuracy Over Time', fontsize=14, fontweight='bold')\n    axes[0,0].set_xlabel('Epoch')\n    axes[0,0].set_ylabel('Accuracy')\n    axes[0,0].legend()\n    axes[0,0].grid(True, alpha=0.3)\n    \n    # Add final values as text\n    final_train_acc = history.history['accuracy'][-1]\n    final_val_acc = history.history['val_accuracy'][-1]\n    axes[0,0].text(0.02, 0.95, f'Final Train: {final_train_acc:.3f}', transform=axes[0,0].transAxes, \n                   bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"lightblue\"))\n    axes[0,0].text(0.02, 0.85, f'Final Val: {final_val_acc:.3f}', transform=axes[0,0].transAxes,\n                   bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"lightsalmon\"))\n    \n    # Plot 2: Training & Validation Loss  \n    axes[0,1].plot(history.history['loss'], label='Training Loss', color='blue', linewidth=2)\n    axes[0,1].plot(history.history['val_loss'], label='Validation Loss', color='orange', linewidth=2)\n    axes[0,1].set_title('Model Loss Over Time', fontsize=14, fontweight='bold')\n    axes[0,1].set_xlabel('Epoch')\n    axes[0,1].set_ylabel('Loss')\n    axes[0,1].legend()\n    axes[0,1].grid(True, alpha=0.3)\n    \n    # Plot 3: Learning Rate (if available)\n    if 'lr' in history.history:\n        axes[1,0].plot(history.history['lr'], color='green', linewidth=2)\n        axes[1,0].set_title('Learning Rate Schedule', fontsize=14, fontweight='bold')\n        axes[1,0].set_xlabel('Epoch')\n        axes[1,0].set_ylabel('Learning Rate')\n        axes[1,0].set_yscale('log')\n        axes[1,0].grid(True, alpha=0.3)\n    else:\n        axes[1,0].text(0.5, 0.5, 'Learning Rate\\nNot Tracked', ha='center', va='center', \n                       transform=axes[1,0].transAxes, fontsize=12)\n        axes[1,0].set_title('Learning Rate Schedule', fontsize=14, fontweight='bold')\n    \n    # Plot 4: Overfitting Analysis\n    epochs = range(1, len(history.history['accuracy']) + 1)\n    accuracy_gap = [train - val for train, val in zip(history.history['accuracy'], history.history['val_accuracy'])]\n    \n    axes[1,1].plot(epochs, accuracy_gap, label='Train-Val Gap', color='red', linewidth=2)\n    axes[1,1].axhline(y=0.1, color='orange', linestyle='--', label='10% Gap (Moderate Overfitting)')\n    axes[1,1].axhline(y=0.05, color='green', linestyle='--', label='5% Gap (Good Generalization)')\n    axes[1,1].set_title('Overfitting Analysis (Accuracy Gap)', fontsize=14, fontweight='bold')\n    axes[1,1].set_xlabel('Epoch')\n    axes[1,1].set_ylabel('Training - Validation Accuracy')\n    axes[1,1].legend()\n    axes[1,1].grid(True, alpha=0.3)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    # Print analysis summary\n    final_gap = accuracy_gap[-1]\n    max_gap = max(accuracy_gap)\n    \n    print(f\"\\n📈 Training Analysis Summary:\")\n    print(f\"- Total epochs trained: {len(epochs)}\")\n    print(f\"- Final accuracy gap: {final_gap:.3f} ({final_gap*100:.1f}%)\")\n    print(f\"- Maximum gap reached: {max_gap:.3f} ({max_gap*100:.1f}%)\")\n    print(f\"- Best validation accuracy: {max(history.history['val_accuracy']):.3f}\")\n    \n    # Overfitting assessment\n    if final_gap <= 0.05:\n        print(\"✅ EXCELLENT: Very good generalization!\")\n    elif final_gap <= 0.10:\n        print(\"👍 GOOD: Moderate overfitting, acceptable for most applications\")\n    elif final_gap <= 0.20:\n        print(\"⚠️ MODERATE: Some overfitting present, consider regularization\")\n    else:\n        print(\"❌ HIGH: Significant overfitting, regularization needed\")\n\n# Plot the training results\nplot_training_history(history)\n\nprint(f\"\\n✅ Step 6c completed! Training analysis visualized.\")\nprint(f\"🔜 Ready for Step 7: Model evaluation and testing...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.893402Z","iopub.status.idle":"2025-09-02T21:38:07.893861Z","shell.execute_reply":"2025-09-02T21:38:07.893554Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 7: Model Evaluation and Testing\nprint(\"📊 Step 7: Model evaluation and testing...\")\n\n# Evaluate on test set\nprint(\"🧪 Evaluating model on test set...\")\ntest_results = model.evaluate(\n    X_test, y_test_cat,\n    batch_size=32,\n    verbose=1\n)\n\ntest_loss = test_results[0]\ntest_accuracy = test_results[1] \ntest_topk = test_results[2]\n\nprint(f\"\\n🎯 TEST SET RESULTS:\")\nprint(f\"- Test Accuracy: {test_accuracy:.4f} ({test_accuracy*100:.2f}%)\")\nprint(f\"- Test Loss: {test_loss:.4f}\")\nprint(f\"- Test Top-K Accuracy: {test_topk:.4f} ({test_topk*100:.2f}%)\")\n\n# Generate predictions for detailed analysis\nprint(f\"\\n🔍 Generating predictions for detailed analysis...\")\ny_pred_proba = model.predict(X_test, batch_size=32, verbose=1)\ny_pred_classes = np.argmax(y_pred_proba, axis=1)\ny_true_classes = np.argmax(y_test_cat, axis=1)\n\n# Calculate per-class accuracy\nprint(f\"\\n📈 Per-Speaker Performance Analysis:\")\nprint(\"=\"*60)\n\nfor class_idx, speaker in enumerate(label_encoder.classes_):\n    # Get samples for this speaker in test set\n    speaker_mask = (y_true_classes == class_idx)\n    speaker_samples = np.sum(speaker_mask)\n    \n    if speaker_samples > 0:\n        # Calculate accuracy for this speaker\n        speaker_correct = np.sum((y_pred_classes[speaker_mask] == class_idx))\n        speaker_accuracy = speaker_correct / speaker_samples\n        \n        print(f\"{speaker:18}: {speaker_correct:2}/{speaker_samples:2} = {speaker_accuracy:.3f} ({speaker_accuracy*100:5.1f}%)\")\n\n# Compare final results across all sets\nprint(f\"\\n📊 FINAL MODEL PERFORMANCE SUMMARY:\")\nprint(\"=\"*70)\nprint(f\"{'Set':12} {'Samples':>8} {'Accuracy':>10} {'Loss':>8}\")\nprint(\"-\" * 70)\nprint(f\"{'Training':12} {len(y_train):>8} {history.history['accuracy'][-1]:>9.1%} {history.history['loss'][-1]:>8.4f}\")\nprint(f\"{'Validation':12} {len(y_val):>8} {history.history['val_accuracy'][-1]:>9.1%} {history.history['val_loss'][-1]:>8.4f}\")\nprint(f\"{'Test':12} {len(y_test):>8} {test_accuracy:>9.1%} {test_loss:>8.4f}\")\n\nprint(f\"\\n✅ Step 7a completed! Test evaluation finished.\")\nprint(f\"🔜 Ready for Step 7b: Confusion matrix and detailed analysis...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.894888Z","iopub.status.idle":"2025-09-02T21:38:07.895495Z","shell.execute_reply":"2025-09-02T21:38:07.895107Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 7b: Confusion Matrix and Detailed Analysis\nprint(\"📈 Step 7b: Creating confusion matrix and detailed analysis...\")\n\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Calculate confusion matrix\ncm = confusion_matrix(y_true_classes, y_pred_classes)\n\n# Create normalized confusion matrix\ncm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n\n# Plot confusion matrices\nfig, axes = plt.subplots(1, 2, figsize=(16, 6))\n\n# Raw counts confusion matrix\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n           xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_, ax=axes[0])\naxes[0].set_title('Confusion Matrix (Raw Counts)', fontsize=14, fontweight='bold')\naxes[0].set_xlabel('Predicted Speaker')\naxes[0].set_ylabel('True Speaker')\n\n# Normalized confusion matrix\nsns.heatmap(cm_normalized, annot=True, fmt='.3f', cmap='Blues', \n           xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_, ax=axes[1])\naxes[1].set_title('Confusion Matrix (Normalized)', fontsize=14, fontweight='bold')\naxes[1].set_xlabel('Predicted Speaker')\naxes[1].set_ylabel('True Speaker')\n\nplt.tight_layout()\nplt.show()\n\n# Generate detailed classification report\nprint(f\"\\n📊 DETAILED CLASSIFICATION REPORT:\")\nprint(\"=\"*80)\nreport = classification_report(y_true_classes, y_pred_classes, \n                             target_names=label_encoder.classes_, digits=4)\nprint(report)\n\n# Analyze prediction confidence\nprint(f\"\\n🎯 PREDICTION CONFIDENCE ANALYSIS:\")\nprint(\"=\"*50)\n\nconfidence_scores = np.max(y_pred_proba, axis=1)\nprint(f\"Average prediction confidence: {confidence_scores.mean():.4f}\")\nprint(f\"Minimum confidence: {confidence_scores.min():.4f}\")\nprint(f\"Maximum confidence: {confidence_scores.max():.4f}\")\n\n# Find low confidence predictions\nlow_confidence_threshold = 0.7\nlow_confidence_mask = confidence_scores < low_confidence_threshold\nnum_low_confidence = np.sum(low_confidence_mask)\n\nprint(f\"\\nPredictions with confidence < {low_confidence_threshold}: {num_low_confidence}/{len(y_test_cat)} ({num_low_confidence/len(y_test_cat)*100:.1f}%)\")\n\nif num_low_confidence > 0:\n    print(\"Low confidence predictions by speaker:\")\n    for speaker_idx, speaker in enumerate(label_encoder.classes_):\n        speaker_mask = y_true_classes == speaker_idx\n        speaker_low_conf = np.sum(low_confidence_mask & speaker_mask)\n        speaker_total = np.sum(speaker_mask)\n        if speaker_total > 0:\n            print(f\"  {speaker}: {speaker_low_conf}/{speaker_total} ({speaker_low_conf/speaker_total*100:.1f}%)\")\n\n# Error analysis\nprint(f\"\\n❌ ERROR ANALYSIS:\")\nprint(\"=\"*30)\n\nincorrect_predictions = y_true_classes != y_pred_classes\nnum_errors = np.sum(incorrect_predictions)\n\nprint(f\"Total errors: {num_errors}/{len(y_test_cat)} ({num_errors/len(y_test_cat)*100:.1f}%)\")\n\nif num_errors > 0:\n    print(\"\\nMost common misclassifications:\")\n    for true_idx in range(len(label_encoder.classes_)):\n        for pred_idx in range(len(label_encoder.classes_)):\n            if true_idx != pred_idx and cm[true_idx, pred_idx] > 0:\n                true_speaker = label_encoder.classes_[true_idx]\n                pred_speaker = label_encoder.classes_[pred_idx]\n                error_count = cm[true_idx, pred_idx]\n                error_rate = error_count / cm[true_idx].sum()\n                print(f\"  {true_speaker} → {pred_speaker}: {error_count} errors ({error_rate*100:.1f}%)\")\n\nprint(f\"\\n✅ Step 7b completed! Detailed analysis finished.\")\nprint(f\"🔜 Ready for Step 8: X-vector embeddings extraction and visualization...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.896691Z","iopub.status.idle":"2025-09-02T21:38:07.897379Z","shell.execute_reply":"2025-09-02T21:38:07.896957Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Step 8: X-vector Embeddings Extraction and Visualization\nprint(\"🎯 Step 8: X-vector embeddings extraction and visualization...\")\n\n# Extract X-vector embeddings for all test samples\nprint(\"🔍 Extracting X-vector embeddings from test set...\")\ntest_embeddings = embedding_model.predict(X_test, batch_size=32, verbose=1)\n\nprint(f\"✅ X-vector embeddings extracted successfully!\")\nprint(f\"- Embeddings shape: {test_embeddings.shape}\")\nprint(f\"- Embedding dimension: {test_embeddings.shape[1]}\")\n\n# Analyze embedding statistics\nprint(f\"\\n📊 X-vector Embedding Statistics:\")\nprint(f\"- Mean: {test_embeddings.mean():.4f}\")\nprint(f\"- Standard deviation: {test_embeddings.std():.4f}\")\nprint(f\"- Min value: {test_embeddings.min():.4f}\")\nprint(f\"- Max value: {test_embeddings.max():.4f}\")\nprint(f\"- L2 norm (average): {np.linalg.norm(test_embeddings, axis=1).mean():.4f}\")\n\n# Analyze per-speaker embedding characteristics\nprint(f\"\\n🎤 Per-Speaker Embedding Analysis:\")\nfor speaker_idx, speaker_name in enumerate(label_encoder.classes_):\n    speaker_mask = y_true_classes == speaker_idx\n    speaker_embeddings = test_embeddings[speaker_mask]\n    \n    if len(speaker_embeddings) > 0:\n        speaker_mean = speaker_embeddings.mean()\n        speaker_std = speaker_embeddings.std()\n        speaker_l2_norm = np.linalg.norm(speaker_embeddings, axis=1).mean()\n        \n        print(f\"  {speaker_name:18}: Mean={speaker_mean:6.3f}, Std={speaker_std:6.3f}, L2={speaker_l2_norm:6.3f}\")\n\n# Apply t-SNE for visualization\nprint(f\"\\n🎨 Applying t-SNE for embedding visualization...\")\nfrom sklearn.manifold import TSNE\n\n# Apply t-SNE with optimal parameters\ntsne = TSNE(n_components=2, random_state=42, perplexity=min(30, len(test_embeddings)//4))\nembeddings_2d = tsne.fit_transform(test_embeddings)\n\nprint(f\"✅ t-SNE transformation completed!\")\nprint(f\"- 2D embeddings shape: {embeddings_2d.shape}\")\n\n# Create comprehensive visualization\nfig, axes = plt.subplots(2, 2, figsize=(16, 12))\n\n# Plot 1: t-SNE visualization by speaker\ncolors = plt.cm.Set1(np.linspace(0, 1, len(label_encoder.classes_)))\nfor i, speaker in enumerate(label_encoder.classes_):\n    mask = y_true_classes == i\n    axes[0,0].scatter(embeddings_2d[mask, 0], embeddings_2d[mask, 1], \n                     c=[colors[i]], label=speaker, alpha=0.7, s=50)\n\naxes[0,0].set_title('X-vector Embeddings Visualization (t-SNE)', fontsize=14, fontweight='bold')\naxes[0,0].set_xlabel('t-SNE Dimension 1')\naxes[0,0].set_ylabel('t-SNE Dimension 2')\naxes[0,0].legend()\naxes[0,0].grid(True, alpha=0.3)\n\n# Plot 2: Correct vs Incorrect predictions\ncorrect_mask = y_true_classes == y_pred_classes\naxes[0,1].scatter(embeddings_2d[correct_mask, 0], embeddings_2d[correct_mask, 1], \n                 c='green', label='Correct', alpha=0.6, s=30)\naxes[0,1].scatter(embeddings_2d[~correct_mask, 0], embeddings_2d[~correct_mask, 1], \n                 c='red', label='Incorrect', alpha=0.8, s=50, marker='x')\n\naxes[0,1].set_title('Prediction Accuracy in Embedding Space', fontsize=14, fontweight='bold')\naxes[0,1].set_xlabel('t-SNE Dimension 1')\naxes[0,1].set_ylabel('t-SNE Dimension 2')\naxes[0,1].legend()\naxes[0,1].grid(True, alpha=0.3)\n\n# Plot 3: Confidence levels\nconfidence_scores = np.max(y_pred_proba, axis=1)\nscatter = axes[1,0].scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                           c=confidence_scores, cmap='viridis', alpha=0.7, s=40)\naxes[1,0].set_title('Prediction Confidence in Embedding Space', fontsize=14, fontweight='bold')\naxes[1,0].set_xlabel('t-SNE Dimension 1')\naxes[1,0].set_ylabel('t-SNE Dimension 2')\nplt.colorbar(scatter, ax=axes[1,0], label='Confidence Score')\naxes[1,0].grid(True, alpha=0.3)\n\n# Plot 4: Embedding norms\nembedding_norms = np.linalg.norm(test_embeddings, axis=1)\nscatter2 = axes[1,1].scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                            c=embedding_norms, cmap='plasma', alpha=0.7, s=40)\naxes[1,1].set_title('Embedding Magnitudes (L2 Norms)', fontsize=14, fontweight='bold')\naxes[1,1].set_xlabel('t-SNE Dimension 1')\naxes[1,1].set_ylabel('t-SNE Dimension 2')\nplt.colorbar(scatter2, ax=axes[1,1], label='L2 Norm')\naxes[1,1].grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\n# Calculate inter-class and intra-class distances\nprint(f\"\\n📏 EMBEDDING DISTANCE ANALYSIS:\")\nprint(\"=\"*50)\n\ndef calculate_distances(embeddings, labels):\n    \"\"\"Calculate intra-class and inter-class distances\"\"\"\n    intra_distances = []\n    inter_distances = []\n    \n    for class_i in range(len(label_encoder.classes_)):\n        class_i_mask = labels == class_i\n        class_i_embeddings = embeddings[class_i_mask]\n        \n        # Intra-class distances\n        for i in range(len(class_i_embeddings)):\n            for j in range(i+1, len(class_i_embeddings)):\n                dist = np.linalg.norm(class_i_embeddings[i] - class_i_embeddings[j])\n                intra_distances.append(dist)\n        \n        # Inter-class distances\n        for class_j in range(class_i+1, len(label_encoder.classes_)):\n            class_j_mask = labels == class_j\n            class_j_embeddings = embeddings[class_j_mask]\n            \n            for emb_i in class_i_embeddings:\n                for emb_j in class_j_embeddings:\n                    dist = np.linalg.norm(emb_i - emb_j)\n                    inter_distances.append(dist)\n    \n    return np.array(intra_distances), np.array(inter_distances)\n\nintra_distances, inter_distances = calculate_distances(test_embeddings, y_true_classes)\n\nprint(f\"Intra-class distances (same speaker):\")\nprint(f\"  Mean: {intra_distances.mean():.4f}\")\nprint(f\"  Std:  {intra_distances.std():.4f}\")\n\nprint(f\"\\nInter-class distances (different speakers):\")\nprint(f\"  Mean: {inter_distances.mean():.4f}\")\nprint(f\"  Std:  {inter_distances.std():.4f}\")\n\n# Calculate separability ratio\nseparability_ratio = inter_distances.mean() / intra_distances.mean()\nprint(f\"\\n🎯 Embedding Separability Ratio: {separability_ratio:.4f}\")\nif separability_ratio > 2.0:\n    print(\"✅ EXCELLENT: High separability between speakers\")\nelif separability_ratio > 1.5:\n    print(\"👍 GOOD: Moderate separability between speakers\")  \nelse:\n    print(\"⚠️  FAIR: Limited separability between speakers\")\n\n# Save the trained models\nprint(f\"\\n💾 SAVING TRAINED MODELS:\")\nprint(\"=\"*30)\n\n# Save complete model\nmodel_filename = f\"xvector_complete_model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.h5\"\nmodel.save(model_filename)\nprint(f\"✅ Complete model saved: {model_filename}\")\n\n# Save embedding model\nembedding_filename = f\"xvector_embedding_model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.h5\"\nembedding_model.save(embedding_filename)\nprint(f\"✅ Embedding model saved: {embedding_filename}\")\n\n# Save label encoder\nimport pickle\nlabel_encoder_filename = f\"label_encoder_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pkl\"\nwith open(label_encoder_filename, 'wb') as f:\n    pickle.dump(label_encoder, f)\nprint(f\"✅ Label encoder saved: {label_encoder_filename}\")\n\nprint(f\"\\n✅ Step 8 completed! X-vector implementation finished.\")\nprint(f\"\\n🎉 CONGRATULATIONS! Your X-vector model is complete and ready for use!\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.898801Z","iopub.status.idle":"2025-09-02T21:38:07.899491Z","shell.execute_reply":"2025-09-02T21:38:07.899156Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Complete Inference System for X-vector Model\nprint(\"🎯 Building inference system for X-vector speaker recognition...\")\n\ndef predict_speaker(audio_path, model, embedding_model, label_encoder, \n                   sr=16000, n_mfcc=23, window_length=400, step_size=200, \n                   return_confidence=True, return_embeddings=False):\n    \"\"\"\n    Predict speaker identity from audio file\n    \n    Parameters:\n    - audio_path: Path to audio file\n    - model: Trained X-vector classification model\n    - embedding_model: X-vector embedding model\n    - label_encoder: Trained label encoder\n    - sr: Sample rate (16000 Hz)\n    - n_mfcc: Number of MFCC coefficients (23)\n    - window_length: Segment length (400 frames)\n    - step_size: Step between segments (200 frames)\n    - return_confidence: Return confidence scores\n    - return_embeddings: Return X-vector embeddings\n    \n    Returns:\n    - Dictionary with prediction results\n    \"\"\"\n    \n    try:\n        print(f\"🎤 Processing audio: {audio_path}\")\n        \n        # Step 1: Extract MFCC features\n        features = extract_mfcc_features(audio_path, sr=sr, n_mfcc=n_mfcc)\n        if features is None:\n            return {\"error\": \"Failed to extract features\"}\n        \n        print(f\"✅ Features extracted: {features.shape}\")\n        \n        # Step 2: Create segments\n        segments = create_segments(features, window_length=window_length, step_size=step_size)\n        if len(segments) == 0:\n            return {\"error\": \"No segments created\"}\n        \n        print(f\"✅ Segments created: {segments.shape}\")\n        \n        # Step 3: Predict on all segments\n        predictions = model.predict(segments, verbose=0)\n        embeddings = embedding_model.predict(segments, verbose=0) if return_embeddings else None\n        \n        # Step 4: Aggregate predictions (majority voting + average confidence)\n        predicted_classes = np.argmax(predictions, axis=1)\n        confidence_scores = np.max(predictions, axis=1)\n        \n        # Majority vote for final prediction\n        unique_classes, counts = np.unique(predicted_classes, return_counts=True)\n        final_prediction_idx = unique_classes[np.argmax(counts)]\n        final_speaker = label_encoder.classes_[final_prediction_idx]\n        \n        # Average confidence for final prediction\n        final_confidence = np.mean(confidence_scores[predicted_classes == final_prediction_idx])\n        \n        # Calculate overall confidence distribution\n        avg_probabilities = np.mean(predictions, axis=0)\n        \n        # Prepare results\n        results = {\n            \"predicted_speaker\": final_speaker,\n            \"confidence\": float(final_confidence),\n            \"num_segments\": len(segments),\n            \"audio_duration\": len(features) * 160 / sr,  # seconds\n        }\n        \n        if return_confidence:\n            # Add detailed confidence scores for all speakers\n            speaker_confidences = {}\n            for i, speaker in enumerate(label_encoder.classes_):\n                speaker_confidences[speaker] = float(avg_probabilities[i])\n            results[\"speaker_confidences\"] = speaker_confidences\n            \n            # Add segment-level predictions\n            segment_predictions = []\n            for i, (pred_idx, conf) in enumerate(zip(predicted_classes, confidence_scores)):\n                segment_predictions.append({\n                    \"segment\": i,\n                    \"speaker\": label_encoder.classes_[pred_idx],\n                    \"confidence\": float(conf)\n                })\n            results[\"segment_predictions\"] = segment_predictions\n        \n        if return_embeddings:\n            # Average embeddings across segments\n            avg_embedding = np.mean(embeddings, axis=0)\n            results[\"embedding\"] = avg_embedding\n            results[\"all_embeddings\"] = embeddings\n        \n        print(f\"🎯 Prediction: {final_speaker} (confidence: {final_confidence:.3f})\")\n        return results\n        \n    except Exception as e:\n        return {\"error\": f\"Prediction failed: {str(e)}\"}\n\n# Test inference function\nprint(\"🧪 Testing inference system...\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.900738Z","iopub.status.idle":"2025-09-02T21:38:07.901387Z","shell.execute_reply":"2025-09-02T21:38:07.901148Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load your trained models (if not already loaded)\nprint(\"📥 Loading trained models for inference...\")\n\n# If you need to load saved models:\n# model = tf.keras.models.load_model('xvector_complete_model_20250830_202642.h5')\n# embedding_model = tf.keras.models.load_model('xvector_embedding_model_20250830_202642.h5')\n\n# If you need to load label encoder:\n# import pickle\n# with open('label_encoder_20250830_202642.pkl', 'rb') as f:\n#     label_encoder = pickle.load(f)\n\nprint(\"✅ Models loaded successfully!\")\nprint(f\"Available speakers: {label_encoder.classes_}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.902490Z","iopub.status.idle":"2025-09-02T21:38:07.903068Z","shell.execute_reply":"2025-09-02T21:38:07.902711Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Example inference on test audio\nprint(\"🎵 Performing inference on sample audio...\")\n\n# Use one of your test files as example\nsample_file = df.iloc[0]['file_path']  # Get first audio file\nprint(f\"Testing with: {sample_file}\")\n\n# Perform complete inference\nresults = predict_speaker(\n    audio_path=sample_file,\n    model=model,\n    embedding_model=embedding_model,\n    label_encoder=label_encoder,\n    return_confidence=True,\n    return_embeddings=True\n)\n\n# Display results\nprint(\"\\n🎯 INFERENCE RESULTS:\")\nprint(\"=\"*50)\nif \"error\" in results:\n    print(f\"❌ Error: {results['error']}\")\nelse:\n    print(f\"🎤 Predicted Speaker: {results['predicted_speaker']}\")\n    print(f\"🎯 Confidence: {results['confidence']:.3f} ({results['confidence']*100:.1f}%)\")\n    print(f\"⏱️ Audio Duration: {results['audio_duration']:.2f} seconds\")\n    print(f\"📊 Number of Segments: {results['num_segments']}\")\n    \n    print(f\"\\n📈 Confidence Scores for All Speakers:\")\n    for speaker, confidence in results['speaker_confidences'].items():\n        bar = \"█\" * int(confidence * 20)  # Visual bar\n        print(f\"  {speaker:18}: {confidence:.3f} {bar}\")\n    \n    print(f\"\\n🧠 X-vector Embedding Shape: {results['embedding'].shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.904296Z","iopub.status.idle":"2025-09-02T21:38:07.904852Z","shell.execute_reply":"2025-09-02T21:38:07.904525Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Batch inference for multiple files\ndef batch_predict_speakers(audio_files, model, embedding_model, label_encoder, \n                          show_progress=True):\n    \"\"\"\n    Predict speakers for multiple audio files\n    \n    Parameters:\n    - audio_files: List of audio file paths\n    - model, embedding_model, label_encoder: Trained models\n    - show_progress: Show progress bar\n    \n    Returns:\n    - List of prediction results\n    \"\"\"\n    results = []\n    \n    iterator = tqdm(audio_files, desc=\"Processing files\") if show_progress else audio_files\n    \n    for audio_file in iterator:\n        result = predict_speaker(\n            audio_path=audio_file,\n            model=model,\n            embedding_model=embedding_model,\n            label_encoder=label_encoder,\n            return_confidence=True,\n            return_embeddings=False\n        )\n        \n        # Add filename to results\n        result['filename'] = audio_file\n        results.append(result)\n    \n    return results\n\n# Example batch inference\nprint(\"📁 Testing batch inference...\")\ntest_files = df.sample(5)['file_path'].tolist()  # Random 5 files\n\nbatch_results = batch_predict_speakers(\n    audio_files=test_files,\n    model=model,\n    embedding_model=embedding_model,\n    label_encoder=label_encoder\n)\n\n# Display batch results\nprint(\"\\n📊 BATCH INFERENCE RESULTS:\")\nprint(\"=\"*80)\nfor i, result in enumerate(batch_results):\n    filename = result['filename'].split('/')[-1]  # Get just filename\n    if \"error\" not in result:\n        print(f\"{i+1}. {filename[:30]:30} → {result['predicted_speaker']:18} ({result['confidence']:.3f})\")\n    else:\n        print(f\"{i+1}. {filename[:30]:30} → ERROR: {result['error']}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.905882Z","iopub.status.idle":"2025-09-02T21:38:07.906484Z","shell.execute_reply":"2025-09-02T21:38:07.906097Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Real-time inference function\ndef predict_speaker_simple(audio_path, model, label_encoder):\n    \"\"\"\n    Simplified inference function for quick predictions\n    \n    Parameters:\n    - audio_path: Path to audio file\n    - model: Trained classification model\n    - label_encoder: Label encoder\n    \n    Returns:\n    - Tuple: (predicted_speaker, confidence)\n    \"\"\"\n    try:\n        # Extract features and create segments\n        features = extract_mfcc_features(audio_path)\n        if features is None:\n            return None, 0.0\n        \n        segments = create_segments(features)\n        if len(segments) == 0:\n            return None, 0.0\n        \n        # Predict\n        predictions = model.predict(segments, verbose=0)\n        \n        # Aggregate predictions\n        avg_prediction = np.mean(predictions, axis=0)\n        predicted_idx = np.argmax(avg_prediction)\n        confidence = avg_prediction[predicted_idx]\n        \n        predicted_speaker = label_encoder.classes_[predicted_idx]\n        \n        return predicted_speaker, float(confidence)\n        \n    except Exception as e:\n        print(f\"Error in prediction: {e}\")\n        return None, 0.0\n\n# Quick test\nspeaker, conf = predict_speaker_simple(sample_file, model, label_encoder)\nprint(f\"\\n⚡ Quick Prediction: {speaker} (confidence: {conf:.3f})\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.907901Z","iopub.status.idle":"2025-09-02T21:38:07.908458Z","shell.execute_reply":"2025-09-02T21:38:07.908117Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Save inference results to CSV\ndef save_inference_results(results, output_file=\"inference_results.csv\"):\n    \"\"\"Save batch inference results to CSV file\"\"\"\n    \n    rows = []\n    for result in results:\n        if \"error\" not in result:\n            row = {\n                'filename': result['filename'].split('/')[-1],\n                'predicted_speaker': result['predicted_speaker'],\n                'confidence': result['confidence'],\n                'audio_duration': result['audio_duration'],\n                'num_segments': result['num_segments']\n            }\n            \n            # Add individual speaker confidences\n            for speaker, conf in result['speaker_confidences'].items():\n                row[f'conf_{speaker}'] = conf\n                \n            rows.append(row)\n    \n    # Create DataFrame and save\n    df_results = pd.DataFrame(rows)\n    df_results.to_csv(output_file, index=False)\n    print(f\"💾 Results saved to: {output_file}\")\n    \n    return df_results\n\n# Save your batch results\nresults_df = save_inference_results(batch_results)\nprint(f\"\\n📊 Results DataFrame:\")\nprint(results_df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.909520Z","iopub.status.idle":"2025-09-02T21:38:07.909988Z","shell.execute_reply":"2025-09-02T21:38:07.909672Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Predict single audio file\nresult = predict_speaker(\n    audio_path=\"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/other/pink_noise.wav\",\n    model=model,\n    embedding_model=embedding_model,\n    label_encoder=label_encoder\n)\nprint(f\"Speaker: {result['predicted_speaker']}\")\nprint(f\"Confidence: {result['confidence']:.3f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.911066Z","iopub.status.idle":"2025-09-02T21:38:07.911613Z","shell.execute_reply":"2025-09-02T21:38:07.911296Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# yaha pr perpelxcity ka code","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 1: Import packages and setup\nimport os\nimport numpy as np \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pathlib\nimport pandas as pd\nimport librosa\nimport librosa.display\nfrom tqdm import tqdm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\n\nprint(\"All packages imported successfully!\")\nprint(\"TensorFlow version:\", tf.__version__)\nprint(\"Librosa version:\", librosa.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.912440Z","iopub.status.idle":"2025-09-02T21:38:07.913008Z","shell.execute_reply":"2025-09-02T21:38:07.912716Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 2: Data path setup and initial exploration\nDATA_PATH = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/\"\n\n# Check if path exists\nif os.path.exists(DATA_PATH):\n    print(\" Data path exists!\")\n    all_items = os.listdir(DATA_PATH)\n    print(\"All items in data path:\", all_items)\nelse:\n    print(\" Data path not found!\")\n\n# Get only speaker folders (directories)\nspeakers = [f for f in os.listdir(DATA_PATH) \n            if os.path.isdir(os.path.join(DATA_PATH, f)) \n            and not f.startswith(\"_\") \n            and not f.lower().startswith(\"other\")]\n\nprint(f\"\\n Speakers found: {len(speakers)}\")\nfor i, spk in enumerate(speakers, 1):\n    print(f\"{i}. {spk}\")\n\n# Quick check of files in each speaker folder\nprint(\"\\n Files per speaker:\")\nfor spk in speakers:\n    folder = os.path.join(DATA_PATH, spk)\n    wav_files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n    print(f\"{spk}: {len(wav_files)} files\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.913743Z","iopub.status.idle":"2025-09-02T21:38:07.914347Z","shell.execute_reply":"2025-09-02T21:38:07.913952Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 3: Collect metadata for all audio files\nprint(\" Collecting metadata for all audio files...\")\n\ndata_info = []\ntotal_files = 0\n\nfor spk in speakers:\n    folder = os.path.join(DATA_PATH, spk)\n    files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n    total_files += len(files)\n    print(f\"Processing {spk}: {len(files)} files\")\n\nprint(f\"\\n⚡ Processing {total_files} files across {len(speakers)} speakers...\")\n\n# Process with progress bar\nfor spk in tqdm(speakers, desc=\"Processing speakers\"):\n    folder = os.path.join(DATA_PATH, spk)\n    files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n    \n    for f in files:\n        file_path = os.path.join(folder, f)\n        try:\n            # Load audio to get duration and sample rate\n            y, sr = librosa.load(file_path, sr=None)\n            duration = len(y) / sr  # Duration in seconds\n            data_info.append([spk, f, sr, duration, file_path])\n        except Exception as e:\n            print(f\"Error loading {file_path}: {e}\")\n\n# Create DataFrame\ndf = pd.DataFrame(data_info, columns=[\"speaker\", \"file\", \"sample_rate\", \"duration\", \"file_path\"])\n\nprint(f\"\\n Metadata collected successfully!\")\nprint(f\"Total files processed: {len(df)}\")\nprint(f\"Dataframe shape: {df.shape}\")\nprint(\"\\nFirst 5 rows:\")\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.915215Z","iopub.status.idle":"2025-09-02T21:38:07.915693Z","shell.execute_reply":"2025-09-02T21:38:07.915412Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 4: Data statistics and summary\nprint(\" Dataset Statistics:\")\nprint(\"=\"*50)\n\n# Basic stats\nprint(f\"Total speakers: {df['speaker'].nunique()}\")\nprint(f\"Total audio files: {len(df)}\")\nprint(f\"Average files per speaker: {len(df) / df['speaker'].nunique():.1f}\")\n\n# Duration statistics\nprint(f\"\\n Duration Statistics:\")\nprint(f\"Total duration: {df['duration'].sum():.2f} seconds ({df['duration'].sum()/3600:.2f} hours)\")\nprint(f\"Average duration: {df['duration'].mean():.2f} seconds\")\nprint(f\"Min duration: {df['duration'].min():.2f} seconds\")\nprint(f\"Max duration: {df['duration'].max():.2f} seconds\")\n\n# Files per speaker\nprint(f\"\\n Files per speaker:\")\nspeaker_counts = df['speaker'].value_counts().sort_index()\nfor spk, count in speaker_counts.items():\n    print(f\"{spk}: {count} files\")\n\n# Sample rate info\nprint(f\"\\n Sample Rate Info:\")\nsr_info = df['sample_rate'].value_counts()\nfor sr, count in sr_info.items():\n    print(f\"{sr} Hz: {count} files ({count/len(df)*100:.1f}%)\")\n\n# Quick summary\nprint(f\"\\n Quick Summary:\")\nprint(df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.916541Z","iopub.status.idle":"2025-09-02T21:38:07.916958Z","shell.execute_reply":"2025-09-02T21:38:07.916730Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 5: Data visualization\nprint(\"Creating visualizations...\")\n\n# Set style for better plots\nplt.style.use('default')\nsns.set_palette(\"husl\")\n\n# 1. Number of files per speaker\nplt.figure(figsize=(12, 6))\nspeaker_counts = df['speaker'].value_counts().sort_index()\nbars = plt.bar(range(len(speaker_counts)), speaker_counts.values, color='skyblue', edgecolor='navy', alpha=0.7)\nplt.title(\"Number of Audio Files per Speaker\", fontsize=16, fontweight='bold')\nplt.xlabel(\"Speaker\", fontsize=12)\nplt.ylabel(\"Number of Files\", fontsize=12)\nplt.xticks(range(len(speaker_counts)), speaker_counts.index, rotation=45, ha='right')\n\n# Add value labels on bars\nfor i, bar in enumerate(bars):\n    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 10, \n             str(speaker_counts.values[i]), ha='center', va='bottom', fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.917888Z","iopub.status.idle":"2025-09-02T21:38:07.918350Z","shell.execute_reply":"2025-09-02T21:38:07.918167Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 2. Distribution of audio durations\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.hist(df[\"duration\"], bins=50, color='lightcoral', alpha=0.7, edgecolor='darkred')\nplt.xlabel(\"Audio Duration (seconds)\")\nplt.ylabel(\"Count\")\nplt.title(\"Distribution of Audio Durations\")\nplt.grid(True, alpha=0.3)\n\nplt.subplot(1, 2, 2)\nsns.boxplot(data=df, y=\"duration\", color='lightgreen')\nplt.title(\"Duration Box Plot\")\nplt.ylabel(\"Duration (seconds)\")\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.919452Z","iopub.status.idle":"2025-09-02T21:38:07.919972Z","shell.execute_reply":"2025-09-02T21:38:07.919662Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 3. Duration by speaker\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=df, x=\"speaker\", y=\"duration\", palette=\"Set2\")\nplt.title(\"Audio Duration Distribution by Speaker\", fontsize=16, fontweight='bold')\nplt.xlabel(\"Speaker\")\nplt.ylabel(\"Duration (seconds)\")\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\nprint(\"Visualizations completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.920908Z","iopub.status.idle":"2025-09-02T21:38:07.921308Z","shell.execute_reply":"2025-09-02T21:38:07.921096Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 6: Load and analyze sample audio files\nprint(\" Loading sample audio files...\")\n\n# Load one sample from each speaker\nsample_files = []\nfor spk in speakers:\n    # Get first file for each speaker\n    spk_files = df[df['speaker'] == spk]['file_path'].values\n    if len(spk_files) > 0:\n        sample_files.append((spk, spk_files[0]))\n\nprint(f\"Selected {len(sample_files)} sample files:\")\nfor spk, path in sample_files:\n    print(f\"- {spk}: {os.path.basename(path)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.922351Z","iopub.status.idle":"2025-09-02T21:38:07.922778Z","shell.execute_reply":"2025-09-02T21:38:07.922552Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load and display info for first sample\nspk_name, sample_path = sample_files[0]#Nelson_Mandela\nprint(f\"\\n Analyzing sample from {spk_name}:\")\nprint(f\"File path: {sample_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.923648Z","iopub.status.idle":"2025-09-02T21:38:07.924055Z","shell.execute_reply":"2025-09-02T21:38:07.923838Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load audio\ny, sr = librosa.load(sample_path, sr=None)\nprint(f\" Audio loaded successfully!\")\nprint(f\"- Shape: {y.shape}\")\nprint(f\"- Sample rate: {sr} Hz\")\nprint(f\"- Duration: {len(y)/sr:.2f} seconds\")\nprint(f\"- Min amplitude: {y.min():.4f}\")\nprint(f\"- Max amplitude: {y.max():.4f}\")\n# Plot waveform\nplt.figure(figsize=(14, 8))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.925002Z","iopub.status.idle":"2025-09-02T21:38:07.925491Z","shell.execute_reply":"2025-09-02T21:38:07.925268Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Waveform\nplt.subplot(1, 1, 1)\ntime = np.linspace(0, len(y)/sr, len(y))\nplt.plot(time, y, color='blue', alpha=0.8)\nplt.title(f\"Waveform - {spk_name}\", fontweight='bold')\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Amplitude\")\nplt.grid(True, alpha=0.3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.926471Z","iopub.status.idle":"2025-09-02T21:38:07.926993Z","shell.execute_reply":"2025-09-02T21:38:07.926679Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Spectrogram\nplt.subplot(1,1,1)\nD = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nlibrosa.display.specshow(D, y_axis='hz', x_axis='time', sr=sr, cmap='coolwarm')\nplt.colorbar(format='%+2.0f dB')\nplt.title(\"Spectrogram\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.928057Z","iopub.status.idle":"2025-09-02T21:38:07.928572Z","shell.execute_reply":"2025-09-02T21:38:07.928283Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 7: MFCC feature extraction and visualization\nprint( \"Extracting MFCC features...\")\n\n# Extract MFCC features from the sample audio\nn_mfcc = 13  # Number of MFCC coefficients\nmfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)\nprint(f\"MFCC extracted!\")\nprint(f\"- MFCC shape: {mfccs.shape}\")  # (n_mfcc, time_frames)\nprint(f\"- Number of coefficients: {mfccs.shape[0]}\")\nprint(f\"- Number of time frames: {mfccs.shape[1]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.929654Z","iopub.status.idle":"2025-09-02T21:38:07.930110Z","shell.execute_reply":"2025-09-02T21:38:07.929889Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculate statistics\nmfcc_mean = np.mean(mfccs, axis=1)\nmfcc_std = np.std(mfccs, axis=1)\n\nprint(f\"\\nMFCC Statistics:\")\nfor i in range(n_mfcc):\n    print(f\"MFCC-{i+1}: mean={mfcc_mean[i]:.3f}, std={mfcc_std[i]:.3f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.931168Z","iopub.status.idle":"2025-09-02T21:38:07.931554Z","shell.execute_reply":"2025-09-02T21:38:07.931354Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Visualize MFCC\nplt.figure(figsize=(15, 10))\n\n# MFCC heatmap\nplt.subplot(2, 2, 1)\nlibrosa.display.specshow(mfccs, x_axis='time', sr=sr, cmap='RdYlBu_r')\nplt.colorbar(format=\"%+2.0f dB\")\nplt.title(f\"MFCC Features - {spk_name}\", fontweight='bold')\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"MFCC Coefficients\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.932374Z","iopub.status.idle":"2025-09-02T21:38:07.932793Z","shell.execute_reply":"2025-09-02T21:38:07.932560Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 1: Feature preprocessing setup for X-vector\nprint(\" Setting up feature preprocessing for X-vector...\")\n\n# Configuration parameters\nSAMPLE_RATE = 16000\nN_MFCC = 23  # X-vector typically uses 23 MFCC features\nWINDOW_LENGTH = 400  # Number of frames per segment\nSTEP_SIZE = 200      # Overlap between segments\nMIN_DURATION = 1.0   # Minimum duration in seconds\n\nprint(\" X-Vector Configuration:\")\nprint(f\"- Sample Rate: {SAMPLE_RATE} Hz\")\nprint(f\"- MFCC Features: {N_MFCC}\")\nprint(f\"- Window Length: {WINDOW_LENGTH} frames\")\nprint(f\"- Step Size: {STEP_SIZE} frames\")\nprint(f\"- Minimum Duration: {MIN_DURATION} seconds\")\n\n# Filter dataset for minimum duration\ndf_filtered = df[df['duration'] >= MIN_DURATION].copy()\nprint(f\"\\n Dataset Filtering:\")\nprint(f\"- Original files: {len(df)}\")\nprint(f\"- After filtering (≥{MIN_DURATION}s): {len(df_filtered)}\")\nprint(f\"- Removed: {len(df) - len(df_filtered)} files\")\n\n# Files per speaker after filtering\nprint(f\"\\n Files per speaker after filtering:\")\nspeaker_counts_filtered = df_filtered['speaker'].value_counts().sort_index()\nfor spk, count in speaker_counts_filtered.items():\n    print(f\"{spk}: {count} files\")\n\nprint(\" Feature preprocessing setup completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.933846Z","iopub.status.idle":"2025-09-02T21:38:07.934238Z","shell.execute_reply":"2025-09-02T21:38:07.934035Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 8: Feature Extraction Functions for X-Vector\nprint(\"🎯 Creating feature extraction functions for X-vector...\")\n\ndef extract_mfcc_features(audio_path, sr=16000, n_mfcc=23, n_fft=512, hop_length=160):\n    \"\"\"\n    Extract MFCC features optimized for X-vector training\n    \"\"\"\n    try:\n        # Load audio with target sample rate\n        y, _ = librosa.load(audio_path, sr=sr)\n        \n        # Extract MFCC features\n        mfccs = librosa.feature.mfcc(\n            y=y, \n            sr=sr, \n            n_mfcc=n_mfcc,\n            n_fft=n_fft,\n            hop_length=hop_length,\n            window='hamming'\n        )\n        \n        # Apply mean normalization per utterance\n        mfccs = mfccs - np.mean(mfccs, axis=1, keepdims=True)\n        \n        return mfccs.T  # Return as (time_frames, n_mfcc)\n        \n    except Exception as e:\n        print(f\"Error extracting features from {audio_path}: {e}\")\n        return None\n\ndef create_segments(features, window_length=400, step_size=200):\n    \"\"\"\n    Create overlapping segments from MFCC features for X-vector training\n    \"\"\"\n    if features.shape[0] < window_length:\n        # If audio is too short, pad with zeros\n        padding = window_length - features.shape[0]\n        features = np.pad(features, ((0, padding), (0, 0)), mode='constant')\n    \n    segments = []\n    start = 0\n    \n    while start + window_length <= features.shape[0]:\n        segment = features[start:start + window_length]\n        segments.append(segment)\n        start += step_size\n    \n    return np.array(segments)\n\n# Test feature extraction with sample\nprint(\"\\n🧪 Testing feature extraction...\")\nsample_path = sample_files[0][1]  # Nelson Mandela sample\nfeatures = extract_mfcc_features(sample_path, n_mfcc=N_MFCC)\n\nif features is not None:\n    print(f\"✅ Features extracted successfully!\")\n    print(f\"- Feature shape: {features.shape}\")\n    print(f\"- Time frames: {features.shape[0]}\")\n    print(f\"- MFCC coefficients: {features.shape[1]}\")\n    \n    # Create segments\n    segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n    print(f\"- Segments created: {segments.shape[0]}\")\n    print(f\"- Segment shape: {segments.shape[1:]}\")\nelse:\n    print(\"❌ Feature extraction failed!\")\n\n# Part 9: Build Complete Feature Dataset\nprint(\"\\n🏗️ Building complete feature dataset for X-vector training...\")\n\ndef build_feature_dataset(df, n_mfcc=23, window_length=400, step_size=200, max_files_per_speaker=None):\n    \"\"\"\n    Build complete dataset of MFCC segments for all speakers\n    \"\"\"\n    X_segments = []\n    y_labels = []\n    speaker_segment_counts = {}\n    \n    # Create label encoder\n    label_encoder = LabelEncoder()\n    speakers = df['speaker'].unique()\n    label_encoder.fit(speakers)\n    \n    print(f\"Processing {len(speakers)} speakers...\")\n    \n    for speaker_idx, speaker in enumerate(speakers):\n        print(f\"\\n🎤 Processing {speaker} ({speaker_idx + 1}/{len(speakers)})...\")\n        \n        speaker_files = df[df['speaker'] == speaker]['file_path'].values\n        \n        # Limit files per speaker if specified\n        if max_files_per_speaker:\n            speaker_files = speaker_files[:max_files_per_speaker]\n        \n        speaker_segments = []\n        processed_files = 0\n        \n        for file_path in tqdm(speaker_files, desc=f\"  Files for {speaker}\"):\n            features = extract_mfcc_features(file_path, n_mfcc=n_mfcc)\n            \n            if features is not None and features.shape[0] > window_length:\n                segments = create_segments(features, window_length, step_size)\n                \n                for segment in segments:\n                    speaker_segments.append(segment)\n                    y_labels.append(speaker_idx)\n                \n                processed_files += 1\n        \n        X_segments.extend(speaker_segments)\n        speaker_segment_counts[speaker] = len(speaker_segments)\n        \n        print(f\"  ✅ {speaker}: {processed_files} files → {len(speaker_segments)} segments\")\n    \n    print(f\"\\n📊 Dataset Summary:\")\n    print(f\"- Total segments: {len(X_segments)}\")\n    print(f\"- Segments per speaker:\")\n    for speaker, count in speaker_segment_counts.items():\n        print(f\"  • {speaker}: {count}\")\n    \n    return np.array(X_segments), np.array(y_labels), label_encoder, speaker_segment_counts\n\n# Build dataset with limited files for faster processing (remove limit for full dataset)\nprint(\"Building feature dataset (using first 100 files per speaker for demo)...\")\nX_data, y_data, label_encoder, segment_counts = build_feature_dataset(\n    df_filtered, \n    n_mfcc=N_MFCC, \n    window_length=WINDOW_LENGTH, \n    step_size=STEP_SIZE,\n    max_files_per_speaker=100  # Remove this for full dataset\n)\n\nprint(f\"\\n🎯 Final Dataset Shape:\")\nprint(f\"- X_data: {X_data.shape}\")\nprint(f\"- y_data: {y_data.shape}\")\nprint(f\"- Number of classes: {len(label_encoder.classes_)}\")\nprint(f\"- Classes: {list(label_encoder.classes_)}\")\n\n# Part 10: Data Preparation for Training\nprint(\"\\n🔄 Preparing data for X-vector training...\")\n\n# Split data into train/validation/test\nX_temp, X_test, y_temp, y_test = train_test_split(\n    X_data, y_data, test_size=0.2, random_state=42, stratify=y_data\n)\n\nX_train, X_val, y_train, y_val = train_test_split(\n    X_temp, y_temp, test_size=0.2, random_state=42, stratify=y_temp\n)\n\nprint(f\"📈 Data Split Summary:\")\nprint(f\"- Training set: {X_train.shape[0]} segments ({X_train.shape[0]/len(X_data)*100:.1f}%)\")\nprint(f\"- Validation set: {X_val.shape[0]} segments ({X_val.shape[0]/len(X_data)*100:.1f}%)\")\nprint(f\"- Test set: {X_test.shape[0]} segments ({X_test.shape[0]/len(X_data)*100:.1f}%)\")\n\n# Convert to float32 for training efficiency\nX_train = X_train.astype(np.float32)\nX_val = X_val.astype(np.float32)\nX_test = X_test.astype(np.float32)\n\n# Convert labels to categorical for multi-class classification\nnum_classes = len(label_encoder.classes_)\ny_train_cat = keras.utils.to_categorical(y_train, num_classes)\ny_val_cat = keras.utils.to_categorical(y_val, num_classes)\ny_test_cat = keras.utils.to_categorical(y_test, num_classes)\n\nprint(f\"✅ Data preparation completed!\")\nprint(f\"- Input shape per segment: {X_train.shape[1:]}\")\nprint(f\"- Number of classes: {num_classes}\")\n\n# Part 11: X-Vector Model Architecture\nprint(\"\\n🏗️ Building X-Vector model architecture...\")\n\ndef build_xvector_model(input_shape, num_classes, embedding_dim=512):\n    \"\"\"\n    Build X-vector model architecture\n    \"\"\"\n    inputs = keras.Input(shape=input_shape, name='input')\n    \n    # Frame-level layers (TDNN - Time Delay Neural Network)\n    x = layers.Dense(512, activation='relu', name='frame1')(inputs)\n    x = layers.BatchNormalization(name='bn1')(x)\n    x = layers.Dropout(0.2, name='dropout1')(x)\n    \n    x = layers.Dense(512, activation='relu', name='frame2')(x)\n    x = layers.BatchNormalization(name='bn2')(x)\n    x = layers.Dropout(0.2, name='dropout2')(x)\n    \n    x = layers.Dense(512, activation='relu', name='frame3')(x)\n    x = layers.BatchNormalization(name='bn3')(x)\n    x = layers.Dropout(0.2, name='dropout3')(x)\n    \n    x = layers.Dense(512, activation='relu', name='frame4')(x)\n    x = layers.BatchNormalization(name='bn4')(x)\n    x = layers.Dropout(0.2, name='dropout4')(x)\n    \n    x = layers.Dense(1500, activation='relu', name='frame5')(x)\n    x = layers.BatchNormalization(name='bn5')(x)\n    x = layers.Dropout(0.2, name='dropout5')(x)\n    \n    # Statistics pooling layer (mean and std pooling)\n    mean = layers.GlobalAveragePooling1D(name='mean_pool')(x)\n    std = layers.Lambda(lambda x: tf.sqrt(tf.reduce_mean(tf.square(x - tf.reduce_mean(x, axis=1, keepdims=True)), axis=1)), name='std_pool')(x)\n    \n    # Concatenate mean and std\n    pooled = layers.Concatenate(name='stats_pool')([mean, std])\n    \n    # Segment-level layers\n    x = layers.Dense(512, activation='relu', name='segment1')(pooled)\n    x = layers.BatchNormalization(name='bn6')(x)\n    x = layers.Dropout(0.2, name='dropout6')(x)\n    \n    # X-vector embedding layer\n    x_vector = layers.Dense(embedding_dim, activation='relu', name='x_vector')(x)\n    x_vector = layers.BatchNormalization(name='bn7')(x_vector)\n    \n    # Classification layer\n    outputs = layers.Dense(num_classes, activation='softmax', name='classification')(x_vector)\n    \n    # Create model\n    model = keras.Model(inputs=inputs, outputs=outputs, name='XVector')\n    \n    return model\n\n# Build the model\nmodel = build_xvector_model(\n    input_shape=(WINDOW_LENGTH, N_MFCC),\n    num_classes=num_classes,\n    embedding_dim=512\n)\n\n# Compile the model\nmodel.compile(\n    optimizer=keras.optimizers.Adam(learning_rate=0.001),\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nprint(\"🎯 X-Vector model created successfully!\")\nprint(f\"- Input shape: {(WINDOW_LENGTH, N_MFCC)}\")\nprint(f\"- Embedding dimension: 512\")\nprint(f\"- Output classes: {num_classes}\")\n\n# Model summary\nmodel.summary()\n\nprint(\"\\n🚀 Ready for training! Next steps:\")\nprint(\"1. Train the X-vector model\")\nprint(\"2. Extract embeddings from trained model\")\nprint(\"3. Evaluate speaker recognition performance\")\nprint(\"4. Visualize embeddings with t-SNE/UMAP\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.935383Z","iopub.status.idle":"2025-09-02T21:38:07.935806Z","shell.execute_reply":"2025-09-02T21:38:07.935585Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 2: Feature extraction function for X-vector\ndef extract_mfcc_features(file_path, n_mfcc=23, sr=16000):\n    \"\"\"Extract MFCC features from audio file\"\"\"\n    try:\n        # Load audio\n        y, _ = librosa.load(file_path, sr=sr)\n        \n        # Extract MFCC features\n        mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc, n_fft=512, hop_length=160)\n        \n        # Add delta and delta-delta features (common in X-vector)\n        delta_mfccs = librosa.feature.delta(mfccs)\n        delta2_mfccs = librosa.feature.delta(mfccs, order=2)\n        \n        # Concatenate all features\n        features = np.vstack([mfccs, delta_mfccs, delta2_mfccs])\n        \n        return features.T  # Return (time_frames, features)\n    \n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return None\n\n# Test the function with a sample file\nprint(\"🧪 Testing feature extraction function...\")\nsample_path = df_filtered.iloc[0]['file_path']\nsample_speaker = df_filtered.iloc[0]['speaker']\n\nprint(f\"Testing with: {sample_speaker}\")\nprint(f\"File: {os.path.basename(sample_path)}\")\n\nfeatures = extract_mfcc_features(sample_path, n_mfcc=N_MFCC)\n\nif features is not None:\n    print(f\"✅ Feature extraction successful!\")\n    print(f\"- Feature shape: {features.shape}\")\n    print(f\"- Time frames: {features.shape[0]}\")\n    print(f\"- Feature dimensions: {features.shape[1]} (MFCC + Delta + Delta-Delta)\")\n    print(f\"- Expected dimensions: {N_MFCC * 3} ({N_MFCC} MFCC + {N_MFCC} Delta + {N_MFCC} Delta-Delta)\")\n    \n    # Show feature statistics\n    print(f\"\\n📊 Feature Statistics:\")\n    print(f\"- Mean: {features.mean():.4f}\")\n    print(f\"- Std: {features.std():.4f}\")\n    print(f\"- Min: {features.min():.4f}\")\n    print(f\"- Max: {features.max():.4f}\")\nelse:\n    print(\"❌ Feature extraction failed!\")\n\n# Visualize the features\nif features is not None:\n    plt.figure(figsize=(15, 8))\n    \n    # Plot MFCC features\n    plt.subplot(1, 3, 1)\n    plt.imshow(features[:, :N_MFCC].T, aspect='auto', origin='lower', cmap='RdYlBu_r')\n    plt.title(f'MFCC Features\\n{sample_speaker}', fontweight='bold')\n    plt.xlabel('Time Frames')\n    plt.ylabel('MFCC Coefficients')\n    plt.colorbar()\n    \n    # Plot Delta features\n    plt.subplot(1, 3, 2)\n    plt.imshow(features[:, N_MFCC:2*N_MFCC].T, aspect='auto', origin='lower', cmap='RdYlBu_r')\n    plt.title('Delta MFCC Features', fontweight='bold')\n    plt.xlabel('Time Frames')\n    plt.ylabel('Delta MFCC Coefficients')\n    plt.colorbar()\n    \n    # Plot Delta-Delta features\n    plt.subplot(1, 3, 3)\n    plt.imshow(features[:, 2*N_MFCC:].T, aspect='auto', origin='lower', cmap='RdYlBu_r')\n    plt.title('Delta-Delta MFCC Features', fontweight='bold')\n    plt.xlabel('Time Frames')\n    plt.ylabel('Delta-Delta MFCC Coefficients')\n    plt.colorbar()\n    \n    plt.tight_layout()\n    plt.show()\n\nprint(\"✅ Feature extraction function tested successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.936896Z","iopub.status.idle":"2025-09-02T21:38:07.937323Z","shell.execute_reply":"2025-09-02T21:38:07.937116Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 🔹 Padding function\ndef pad_features(features, target_length=400):\n    \"\"\"Pad short utterances with zeros (silence) up to target length\"\"\"\n    if features is None:\n        return None\n    \n    if len(features) < target_length:\n        pad_width = target_length - len(features)\n        return np.pad(features, ((0, pad_width), (0, 0)), mode='constant')\n    \n    return features\n\n\n# 🔹 Segmentation function (with padding support)\ndef create_segments(features, window_length=400, step_size=200, use_padding=True):\n    \"\"\"Create fixed-length segments from features (with optional padding)\"\"\"\n    if features is None:\n        return []\n    \n    # Apply padding if enabled\n    if use_padding:\n        features = pad_features(features, window_length)\n    elif len(features) < window_length:\n        return []  # too short, no segments\n    \n    segments = []\n    start = 0\n    \n    while start + window_length <= len(features):\n        segment = features[start:start + window_length]\n        segments.append(segment)\n        start += step_size\n    \n    return np.array(segments)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.938154Z","iopub.status.idle":"2025-09-02T21:38:07.938552Z","shell.execute_reply":"2025-09-02T21:38:07.938354Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Test segmentation with padding\nsegments = create_segments(features, WINDOW_LENGTH, STEP_SIZE, use_padding=True)\n\nprint(f\"Segments created: {len(segments)}\")\nif len(segments) > 0:\n    print(\"Shape of first segment:\", segments[0].shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.939491Z","iopub.status.idle":"2025-09-02T21:38:07.940138Z","shell.execute_reply":"2025-09-02T21:38:07.939694Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 4: Label encoding and dataset preparation\nprint(\"🏷️ Setting up label encoding...\")\n\n# Get unique speakers\nunique_speakers = sorted(df_filtered['speaker'].unique())\nnum_speakers = len(unique_speakers)\n\nprint(f\"📊 Speaker Information:\")\nprint(f\"- Total speakers: {num_speakers}\")\nprint(\"- Speaker list:\")\nfor i, spk in enumerate(unique_speakers):\n    print(f\"  {i}: {spk}\")\n\n# Create label encoder\nlabel_encoder = LabelEncoder()\nspeaker_labels = label_encoder.fit_transform(unique_speakers)\n\nprint(f\"\\n🔢 Label Encoding:\")\nfor i, (spk, label) in enumerate(zip(unique_speakers, speaker_labels)):\n    print(f\"- {spk} → {label}\")\n\n# Create speaker to ID mapping\nspeaker_to_id = dict(zip(unique_speakers, speaker_labels))\nid_to_speaker = dict(zip(speaker_labels, unique_speakers))\n\nprint(f\"\\n📋 Mapping dictionaries created:\")\nprint(f\"- speaker_to_id: {speaker_to_id}\")\nprint(f\"- id_to_speaker: {id_to_speaker}\")\n\n# Test with sample data\nsample_speaker = df_filtered.iloc[0]['speaker']\nsample_id = speaker_to_id[sample_speaker]\nprint(f\"\\n🧪 Test mapping:\")\nprint(f\"- Speaker '{sample_speaker}' → ID {sample_id}\")\nprint(f\"- ID {sample_id} → Speaker '{id_to_speaker[sample_id]}'\")\n\n# Create one-hot encoding for testing\ndef create_one_hot(speaker_name, num_classes):\n    \"\"\"Create one-hot encoded label\"\"\"\n    speaker_id = speaker_to_id[speaker_name]\n    one_hot = np.zeros(num_classes)\n    one_hot[speaker_id] = 1\n    return one_hot, speaker_id\n\n# Test one-hot encoding\none_hot_label, speaker_id = create_one_hot(sample_speaker, num_speakers)\nprint(f\"\\n🎯 One-hot encoding test:\")\nprint(f\"- Speaker: {sample_speaker}\")\nprint(f\"- Speaker ID: {speaker_id}\")\nprint(f\"- One-hot shape: {one_hot_label.shape}\")\nprint(f\"- One-hot vector: {one_hot_label}\")\n\nprint(\"✅ Label encoding setup completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.941119Z","iopub.status.idle":"2025-09-02T21:38:07.941631Z","shell.execute_reply":"2025-09-02T21:38:07.941358Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 5: X-Vector Architecture Implementation\nprint(\"🏗️ Building X-Vector Architecture...\")\n\ndef create_xvector_model(input_dim, num_speakers, embedding_dim=512):\n    \"\"\"\n    Create X-vector model architecture\n    \n    Args:\n        input_dim: Input feature dimension (69 for 23 MFCC + delta + delta-delta)\n        num_speakers: Number of speakers for classification\n        embedding_dim: Dimension of speaker embedding\n    \"\"\"\n    \n    input_layer = keras.Input(shape=(None, input_dim), name='input_features')\n    \n    # Frame-level layers (TDNN - Time Delay Neural Network)\n    print(\"Adding TDNN layers...\")\n    \n    # TDNN Layer 1: context of ±2 frames\n    x = layers.Dense(512, activation='relu', name='tdnn1')(input_layer)\n    x = layers.BatchNormalization(name='bn1')(x)\n    \n    # TDNN Layer 2: context of ±2 frames  \n    x = layers.Dense(512, activation='relu', name='tdnn2')(x)\n    x = layers.BatchNormalization(name='bn2')(x)\n    \n    # TDNN Layer 3: context of ±3 frames\n    x = layers.Dense(512, activation='relu', name='tdnn3')(x)\n    x = layers.BatchNormalization(name='bn3')(x)\n    \n    # TDNN Layer 4: context of ±1 frame\n    x = layers.Dense(512, activation='relu', name='tdnn4')(x)\n    x = layers.BatchNormalization(name='bn4')(x)\n    \n    # TDNN Layer 5: context of ±3 frames\n    frame_features = layers.Dense(1500, activation='relu', name='tdnn5')(x)\n    frame_features = layers.BatchNormalization(name='bn5')(frame_features)\n    \n    print(\"Adding Statistics Pooling layer...\")\n    # Statistics Pooling Layer\n    # Compute mean and standard deviation across time dimension\n    mean_pool = layers.Lambda(lambda x: tf.reduce_mean(x, axis=1), name='mean_pool')(frame_features)\n    std_pool = layers.Lambda(lambda x: tf.math.reduce_std(x, axis=1), name='std_pool')(frame_features)\n    \n    # Concatenate mean and std\n    stats_pool = layers.Concatenate(name='stats_pool')([mean_pool, std_pool])\n    \n    print(\"Adding segment-level layers...\")\n    # Segment-level layers\n    x = layers.Dense(512, activation='relu', name='segment1')(stats_pool)\n    x = layers.BatchNormalization(name='bn6')(x)\n    \n    # X-vector embedding layer\n    xvector_embedding = layers.Dense(embedding_dim, activation='relu', name='xvector_embedding')(x)\n    xvector_embedding = layers.BatchNormalization(name='bn_embedding')(xvector_embedding)\n    \n    # Classification layer\n    output = layers.Dense(num_speakers, activation='softmax', name='classification')(xvector_embedding)\n    \n    # Create model\n    model = keras.Model(inputs=input_layer, outputs=[output, xvector_embedding], name='XVector')\n    \n    return model\n\n# Model parameters\nINPUT_DIM = N_MFCC * 3  # 23 MFCC + 23 Delta + 23 Delta-Delta = 69\nEMBEDDING_DIM = 512\n\nprint(f\"📐 Model Parameters:\")\nprint(f\"- Input Dimension: {INPUT_DIM}\")\nprint(f\"- Number of Speakers: {num_speakers}\")\nprint(f\"- Embedding Dimension: {EMBEDDING_DIM}\")\n\n# Create the model\nprint(f\"\\n🔨 Creating X-Vector model...\")\nxvector_model = create_xvector_model(INPUT_DIM, num_speakers, EMBEDDING_DIM)\n\nprint(\"✅ X-Vector model created successfully!\")\nprint(f\"- Model name: {xvector_model.name}\")\nprint(f\"- Number of outputs: {len(xvector_model.outputs)}\")\nprint(f\"- Output names: {[output.name for output in xvector_model.outputs]}\")\n\n# Model summary\nprint(f\"\\n📋 Model Summary:\")\nxvector_model.summary()\n\nprint(\"✅ X-Vector architecture definition completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.942600Z","iopub.status.idle":"2025-09-02T21:38:07.943189Z","shell.execute_reply":"2025-09-02T21:38:07.942963Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 6: Model compilation and visualization\nprint(\"⚙️ Compiling X-Vector model...\")\n\n# Compile the model\nxvector_model.compile(\n    optimizer=keras.optimizers.Adam(learning_rate=0.001),\n    loss={'classification': 'categorical_crossentropy'},\n    metrics={'classification': 'accuracy'}\n)\n\nprint(\"✅ Model compiled successfully!\")\nprint(f\"- Optimizer: Adam (lr=0.001)\")\nprint(f\"- Loss: categorical_crossentropy\")\nprint(f\"- Metrics: accuracy\")\n\n# Test model with dummy data\nprint(f\"\\n🧪 Testing model with dummy data...\")\n\n# Create dummy input data\nbatch_size = 4\nsequence_length = WINDOW_LENGTH\ndummy_input = np.random.randn(batch_size, sequence_length, INPUT_DIM)\n\nprint(f\"- Dummy input shape: {dummy_input.shape}\")\n\n# Forward pass\ntry:\n    dummy_output = xvector_model(dummy_input)\n    classification_output, embedding_output = dummy_output\n    \n    print(\"✅ Forward pass successful!\")\n    print(f\"- Classification output shape: {classification_output.shape}\")\n    print(f\"- Embedding output shape: {embedding_output.shape}\")\n    print(f\"- Classification output sum per sample: {np.sum(classification_output, axis=1)}\")  # Should be ~1 for softmax\n    \nexcept Exception as e:\n    print(f\"❌ Forward pass failed: {e}\")\n\n# Visualize model architecture\nprint(f\"\\n🎨 Model Architecture Visualization:\")\n\ntry:\n    # Plot model architecture\n    keras.utils.plot_model(\n        xvector_model, \n        to_file='xvector_architecture.png', \n        show_shapes=True, \n        show_layer_names=True,\n        rankdir='TB',\n        dpi=100\n    )\n    print(\"✅ Model architecture diagram saved as 'xvector_architecture.png'\")\nexcept Exception as e:\n    print(f\"⚠️ Could not save architecture diagram: {e}\")\n\n# Display layer information\nprint(f\"\\n📊 Layer Information:\")\nprint(\"-\" * 70)\nprint(f\"{'Layer Name':<20} {'Layer Type':<20} {'Output Shape':<15} {'Params':<10}\")\nprint(\"-\" * 70)\n\ntotal_params = 0\nfor i, layer in enumerate(xvector_model.layers):\n    layer_params = layer.count_params()\n    total_params += layer_params\n    \n    # Get output shape (handle multiple outputs)\n    try:\n        if hasattr(layer, 'output_shape'):\n            if isinstance(layer.output_shape, list):\n                output_shape = str(layer.output_shape[0])\n            else:\n                output_shape = str(layer.output_shape)\n        else:\n            output_shape = \"Unknown\"\n    except:\n        output_shape = \"Variable\"\n    \n    print(f\"{layer.name:<20} {layer.__class__.__name__:<20} {output_shape:<15} {layer_params:<10}\")\n\nprint(\"-\" * 70)\nprint(f\"{'Total Parameters:':<55} {total_params:<10}\")\nprint(\"-\" * 70)\n\n# Calculate model size\nmodel_size_mb = total_params * 4 / (1024 * 1024)  # Assuming float32 (4 bytes per parameter)\nprint(f\"\\n📏 Model Information:\")\nprint(f\"- Total Parameters: {total_params:,}\")\nprint(f\"- Estimated Model Size: {model_size_mb:.2f} MB\")\nprint(f\"- Input Shape: (batch_size, sequence_length, {INPUT_DIM})\")\nprint(f\"- Output Shapes:\")\nprint(f\"  • Classification: (batch_size, {num_speakers})\")\nprint(f\"  • Embedding: (batch_size, {EMBEDDING_DIM})\")\n\nprint(\"✅ Model compilation and visualization completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.944119Z","iopub.status.idle":"2025-09-02T21:38:07.944584Z","shell.execute_reply":"2025-09-02T21:38:07.944308Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 7: Data Generator for efficient training\nprint(\"🏭 Creating data generator for X-Vector training...\")\n\nclass XVectorDataGenerator:\n    \"\"\"Data generator for X-Vector training\"\"\"\n    \n    def __init__(self, file_paths, speaker_labels, speaker_to_id, \n                 batch_size=32, window_length=400, step_size=200, \n                 n_mfcc=23, sr=16000, shuffle=True):\n        \n        self.file_paths = file_paths\n        self.speaker_labels = speaker_labels\n        self.speaker_to_id = speaker_to_id\n        self.batch_size = batch_size\n        self.window_length = window_length\n        self.step_size = step_size\n        self.n_mfcc = n_mfcc\n        self.sr = sr\n        self.shuffle = shuffle\n        \n        self.num_speakers = len(speaker_to_id)\n        self.feature_dim = n_mfcc * 3  # MFCC + Delta + Delta-Delta\n        \n        # Pre-calculate segments for each file\n        self._prepare_segments()\n        \n    def _prepare_segments(self):\n        \"\"\"Pre-calculate all segments\"\"\"\n        print(\"📊 Preparing segments from audio files...\")\n        \n        self.segments = []\n        self.segment_labels = []\n        \n        for i, (file_path, speaker) in enumerate(zip(self.file_paths, self.speaker_labels)):\n            if i < 3:  # Show progress for first few files\n                print(f\"Processing {speaker}: {os.path.basename(file_path)}\")\n            elif i == 3:\n                print(\"...\")\n            \n            # Extract features\n            features = extract_mfcc_features(file_path, self.n_mfcc, self.sr)\n            \n            if features is not None:\n                # Create segments\n                file_segments = create_segments(features, self.window_length, self.step_size)\n                \n                if len(file_segments) > 0:\n                    self.segments.extend(file_segments)\n                    # Add speaker label for each segment\n                    speaker_id = self.speaker_to_id[speaker]\n                    self.segment_labels.extend([speaker_id] * len(file_segments))\n        \n        self.segments = np.array(self.segments)\n        self.segment_labels = np.array(self.segment_labels)\n        \n        print(f\"✅ Segment preparation completed!\")\n        print(f\"- Total segments: {len(self.segments)}\")\n        print(f\"- Segment shape: {self.segments[0].shape}\")\n        print(f\"- Feature dimension: {self.feature_dim}\")\n        \n        # Show segments per speaker\n        unique_labels, counts = np.unique(self.segment_labels, return_counts=True)\n        print(f\"\\n📈 Segments per speaker:\")\n        for label, count in zip(unique_labels, counts):\n            speaker_name = [k for k, v in self.speaker_to_id.items() if v == label][0]\n            print(f\"- {speaker_name}: {count} segments\")\n    \n    def get_batch(self, batch_indices):\n        \"\"\"Get a batch of data\"\"\"\n        batch_x = self.segments[batch_indices]\n        batch_y = self.segment_labels[batch_indices]\n        \n        # Convert to one-hot encoding\n        batch_y_onehot = np.eye(self.num_speakers)[batch_y]\n        \n        return batch_x, batch_y_onehot\n    \n    def __len__(self):\n        \"\"\"Number of batches per epoch\"\"\"\n        return len(self.segments) // self.batch_size\n    \n    def get_data_info(self):\n        \"\"\"Get information about the dataset\"\"\"\n        return {\n            'total_segments': len(self.segments),\n            'feature_dim': self.feature_dim,\n            'num_speakers': self.num_speakers,\n            'segment_shape': self.segments[0].shape,\n            'batches_per_epoch': self.__len__()\n        }\n\n# Create data generator with a small subset for testing\nprint(f\"🧪 Testing data generator with first 50 files...\")\n\n# Take first 50 files for quick testing\ntest_files = df_filtered.head(50)\nfile_paths = test_files['file_path'].values\nspeaker_labels = test_files['speaker'].values\n\nprint(f\"- Test files: {len(file_paths)}\")\nprint(f\"- Unique speakers in test: {len(np.unique(speaker_labels))}\")\n\n# Create generator\ngenerator = XVectorDataGenerator(\n    file_paths=file_paths,\n    speaker_labels=speaker_labels,\n    speaker_to_id=speaker_to_id,\n    batch_size=8,  # Small batch size for testing\n    window_length=WINDOW_LENGTH,\n    step_size=STEP_SIZE,\n    n_mfcc=N_MFCC,\n    sr=SAMPLE_RATE\n)\n\n# Get generator info\ninfo = generator.get_data_info()\nprint(f\"\\n📊 Generator Information:\")\nfor key, value in info.items():\n    print(f\"- {key}: {value}\")\n\nprint(\"✅ Data generator creation completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.945544Z","iopub.status.idle":"2025-09-02T21:38:07.946100Z","shell.execute_reply":"2025-09-02T21:38:07.945790Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 8: Test training with a small batch\nprint(\"🎯 Testing X-Vector model with real data...\")\n\n# Get a test batch\nbatch_indices = np.random.choice(len(generator.segments), size=generator.batch_size, replace=False)\nbatch_x, batch_y = generator.get_batch(batch_indices)\n\nprint(f\"📦 Test Batch Information:\")\nprint(f\"- Batch X shape: {batch_x.shape}\")\nprint(f\"- Batch Y shape: {batch_y.shape}\")\nprint(f\"- Feature range: [{batch_x.min():.3f}, {batch_x.max():.3f}]\")\nprint(f\"- Labels sum (should be 1): {batch_y.sum(axis=1)}\")\n\n# Test forward pass with real data\nprint(f\"\\n🔄 Testing forward pass with real data...\")\ntry:\n    predictions = xvector_model.predict(batch_x, verbose=0)\n    classification_pred, embeddings = predictions\n    \n    print(\"✅ Forward pass successful!\")\n    print(f\"- Classification predictions shape: {classification_pred.shape}\")\n    print(f\"- Embeddings shape: {embeddings.shape}\")\n    print(f\"- Classification predictions sum: {classification_pred.sum(axis=1)}\")\n    \n    # Show sample predictions\n    print(f\"\\n🔍 Sample Predictions (first 3 samples):\")\n    for i in range(min(3, len(classification_pred))):\n        true_speaker_id = np.argmax(batch_y[i])\n        pred_speaker_id = np.argmax(classification_pred[i])\n        confidence = classification_pred[i][pred_speaker_id]\n        \n        true_speaker = id_to_speaker[true_speaker_id]\n        pred_speaker = id_to_speaker[pred_speaker_id]\n        \n        print(f\"Sample {i+1}:\")\n        print(f\"  True: {true_speaker} (ID: {true_speaker_id})\")\n        print(f\"  Pred: {pred_speaker} (ID: {pred_speaker_id}, Confidence: {confidence:.3f})\")\n        print(f\"  Correct: {'✅' if true_speaker_id == pred_speaker_id else '❌'}\")\n\nexcept Exception as e:\n    print(f\"❌ Forward pass failed: {e}\")\n\n# Calculate initial loss and accuracy\nprint(f\"\\n📊 Initial Model Performance (untrained):\")\ntry:\n    # Evaluate on test batch\n    results = xvector_model.evaluate(batch_x, {'classification': batch_y}, verbose=0)\n    loss = results[0]\n    accuracy = results[1]\n    \n    print(f\"- Loss: {loss:.4f}\")\n    print(f\"- Accuracy: {accuracy:.4f} ({accuracy*100:.1f}%)\")\n    \n    # Random baseline accuracy\n    random_accuracy = 1.0 / num_speakers\n    print(f\"- Random baseline: {random_accuracy:.4f} ({random_accuracy*100:.1f}%)\")\n    \nexcept Exception as e:\n    print(f\"❌ Evaluation failed: {e}\")\n\n# Visualize some embeddings\nprint(f\"\\n🎨 Visualizing embeddings...\")\nif 'embeddings' in locals():\n    # Plot first few dimensions of embeddings\n    plt.figure(figsize=(12, 8))\n    \n    # Plot embedding distributions\n    plt.subplot(2, 2, 1)\n    plt.hist(embeddings.flatten(), bins=50, alpha=0.7, color='skyblue', edgecolor='navy')\n    plt.title('Embedding Value Distribution')\n    plt.xlabel('Embedding Value')\n    plt.ylabel('Count')\n    \n    # Plot embedding norms\n    plt.subplot(2, 2, 2)\n    embedding_norms = np.linalg.norm(embeddings, axis=1)\n    plt.hist(embedding_norms, bins=20, alpha=0.7, color='lightcoral', edgecolor='darkred')\n    plt.title('Embedding Norms Distribution')\n    plt.xlabel('L2 Norm')\n    plt.ylabel('Count')\n    \n    # Plot first 2 dimensions of embeddings colored by speaker\n    plt.subplot(2, 2, 3)\n    speaker_ids = np.argmax(batch_y, axis=1)\n    colors = plt.cm.Set3(speaker_ids / num_speakers)\n    plt.scatter(embeddings[:, 0], embeddings[:, 1], c=colors, alpha=0.7, s=50)\n    plt.title('Embeddings (First 2 Dimensions)')\n    plt.xlabel('Embedding Dim 1')\n    plt.ylabel('Embedding Dim 2')\n    \n    # Plot embedding statistics\n    plt.subplot(2, 2, 4)\n    embedding_means = np.mean(embeddings, axis=0)\n    plt.plot(embedding_means[:50], marker='o', markersize=2)  # Plot first 50 dimensions\n    plt.title('Mean Embedding Values (First 50 Dims)')\n    plt.xlabel('Embedding Dimension')\n    plt.ylabel('Mean Value')\n    plt.grid(True, alpha=0.3)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    print(f\"📈 Embedding Statistics:\")\n    print(f\"- Embedding dimension: {embeddings.shape[1]}\")\n    print(f\"- Mean norm: {embedding_norms.mean():.4f}\")\n    print(f\"- Std norm: {embedding_norms.std():.4f}\")\n    print(f\"- Mean embedding value: {embeddings.mean():.4f}\")\n    print(f\"- Std embedding value: {embeddings.std():.4f}\")\n\nprint(\"✅ Model testing with real data completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.947137Z","iopub.status.idle":"2025-09-02T21:38:07.947595Z","shell.execute_reply":"2025-09-02T21:38:07.947322Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 9: Create train/validation split and full data generators\nprint(\"📊 Setting up train/validation split...\")\n\n# Use all filtered data for training\nall_files = df_filtered.copy()\n\n# Split by speakers to ensure no speaker overlap between train/val\nspeakers_list = list(unique_speakers)\ntrain_speakers, val_speakers = train_test_split(\n    speakers_list, \n    test_size=0.2, \n    random_state=42\n)\n\nprint(f\"👥 Speaker Split:\")\nprint(f\"- Total speakers: {len(speakers_list)}\")\nprint(f\"- Train speakers: {len(train_speakers)} - {train_speakers}\")\nprint(f\"- Val speakers: {len(val_speakers)} - {val_speakers}\")\n\n# Split data\ntrain_data = all_files[all_files['speaker'].isin(train_speakers)]\nval_data = all_files[all_files['speaker'].isin(val_speakers)]\n\nprint(f\"\\n📁 Data Split:\")\nprint(f\"- Train files: {len(train_data)}\")\nprint(f\"- Val files: {len(val_data)}\")\n\n# Files per speaker in each split\nprint(f\"\\n📈 Train set distribution:\")\ntrain_counts = train_data['speaker'].value_counts().sort_index()\nfor spk, count in train_counts.items():\n    print(f\"- {spk}: {count} files\")\n\nprint(f\"\\n📈 Validation set distribution:\")\nval_counts = val_data['speaker'].value_counts().sort_index()\nfor spk, count in val_counts.items():\n    print(f\"- {spk}: {count} files\")\n\n# Create updated speaker mappings for training (only train speakers)\ntrain_speakers_sorted = sorted(train_speakers)\ntrain_speaker_to_id = {spk: i for i, spk in enumerate(train_speakers_sorted)}\ntrain_id_to_speaker = {i: spk for spk, i in train_speaker_to_id.items()}\ntrain_num_speakers = len(train_speakers_sorted)\n\nprint(f\"\\n🏷️ Updated Training Mappings:\")\nprint(f\"- Number of train speakers: {train_num_speakers}\")\nprint(f\"- Train speaker mapping: {train_speaker_to_id}\")\n\n# Create val mappings (using same IDs as train for consistency)\nval_speaker_to_id = {spk: train_speaker_to_id.get(spk, -1) for spk in val_speakers}\n# Remove speakers not in training set\nval_speaker_to_id = {k: v for k, v in val_speaker_to_id.items() if v != -1}\n\nprint(f\"- Val speaker mapping: {val_speaker_to_id}\")\n\nprint(\"✅ Data split setup completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.948592Z","iopub.status.idle":"2025-09-02T21:38:07.949015Z","shell.execute_reply":"2025-09-02T21:38:07.948802Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 10: Create updated model and data generators\nprint(\"🔄 Creating updated model for training speakers only...\")\n\n# Create new model with correct number of speakers\ntrain_model = create_xvector_model(INPUT_DIM, train_num_speakers, EMBEDDING_DIM)\n\n# Compile the updated model\ntrain_model.compile(\n    optimizer=keras.optimizers.Adam(learning_rate=0.001),\n    loss={'classification': 'categorical_crossentropy'},\n    metrics={'classification': 'accuracy'}\n)\n\nprint(f\"✅ Updated model created!\")\nprint(f\"- Input dimension: {INPUT_DIM}\")\nprint(f\"- Number of speakers: {train_num_speakers}\")\nprint(f\"- Embedding dimension: {EMBEDDING_DIM}\")\n\n# Create training data generator (using smaller subset for demo)\nprint(f\"\\n🏭 Creating training data generator...\")\n\n# Use first 100 files from training set for quick demo\ntrain_subset = train_data.head(100)\ntrain_file_paths = train_subset['file_path'].values\ntrain_speaker_labels = train_subset['speaker'].values\n\nprint(f\"- Training files (subset): {len(train_file_paths)}\")\nprint(f\"- Training speakers in subset: {sorted(set(train_speaker_labels))}\")\n\n# Create training generator\ntrain_generator = XVectorDataGenerator(\n    file_paths=train_file_paths,\n    speaker_labels=train_speaker_labels,\n    speaker_to_id=train_speaker_to_id,\n    batch_size=16,\n    window_length=WINDOW_LENGTH,\n    step_size=STEP_SIZE,\n    n_mfcc=N_MFCC,\n    sr=SAMPLE_RATE,\n    shuffle=True\n)\n\n# Get training data info\ntrain_info = train_generator.get_data_info()\nprint(f\"\\n📊 Training Generator Info:\")\nfor key, value in train_info.items():\n    print(f\"- {key}: {value}\")\n\n# Create validation data generator (if we have validation speakers in train set)\nif len(val_data) > 0 and any(spk in train_speaker_to_id for spk in val_data['speaker'].unique()):\n    print(f\"\\n🧪 Creating validation data generator...\")\n    \n    # Filter validation data to only include speakers present in training\n    val_subset = val_data[val_data['speaker'].isin(train_speakers)].head(50)\n    \n    if len(val_subset) > 0:\n        val_file_paths = val_subset['file_path'].values\n        val_speaker_labels = val_subset['speaker'].values\n        \n        val_generator = XVectorDataGenerator(\n            file_paths=val_file_paths,\n            speaker_labels=val_speaker_labels,\n            speaker_to_id=train_speaker_to_id,\n            batch_size=16,\n            window_length=WINDOW_LENGTH,\n            step_size=STEP_SIZE,\n            n_mfcc=N_MFCC,\n            sr=SAMPLE_RATE,\n            shuffle=False\n        )\n        \n        val_info = val_generator.get_data_info()\n        print(f\"📊 Validation Generator Info:\")\n        for key, value in val_info.items():\n            print(f\"- {key}: {value}\")\n    else:\n        print(\"⚠️ No validation data available for training speakers\")\n        val_generator = None\nelse:\n    print(\"⚠️ No validation data created (speakers not in training set)\")\n    val_generator = None\n\nprint(\"✅ Updated model and generators created!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.950105Z","iopub.status.idle":"2025-09-02T21:38:07.950529Z","shell.execute_reply":"2025-09-02T21:38:07.950332Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 11: Training setup and short training run\nprint(\"🚀 Setting up training process...\")\n\n# Training configuration\nEPOCHS = 3  # Short training for demo\nSTEPS_PER_EPOCH = min(20, len(train_generator))  # Limit steps for quick demo\nVALIDATION_STEPS = min(10, len(val_generator)) if val_generator else 0\n\nprint(f\"⚙️ Training Configuration:\")\nprint(f\"- Epochs: {EPOCHS}\")\nprint(f\"- Steps per epoch: {STEPS_PER_EPOCH}\")\nprint(f\"- Validation steps: {VALIDATION_STEPS}\")\nprint(f\"- Batch size: {train_generator.batch_size}\")\n\n# Callbacks\ncallbacks = [\n    keras.callbacks.EarlyStopping(\n        monitor='classification_accuracy',\n        patience=2,\n        restore_best_weights=True,\n        verbose=1\n    ),\n    keras.callbacks.ReduceLROnPlateau(\n        monitor='classification_accuracy',\n        factor=0.5,\n        patience=1,\n        min_lr=1e-6,\n        verbose=1\n    )\n]\n\nprint(f\"📋 Callbacks configured:\")\nprint(f\"- Early stopping (patience=2)\")\nprint(f\"- Learning rate reduction (factor=0.5)\")\n\n# Custom training function for generator\ndef train_step_generator(model, generator, steps_per_epoch):\n    \"\"\"Custom training step using generator\"\"\"\n    \n    all_losses = []\n    all_accuracies = []\n    \n    for step in range(steps_per_epoch):\n        # Get random batch\n        batch_indices = np.random.choice(\n            len(generator.segments), \n            size=generator.batch_size, \n            replace=False\n        )\n        batch_x, batch_y = generator.get_batch(batch_indices)\n        \n        # Train step\n        results = model.train_on_batch(\n            batch_x, \n            {'classification': batch_y}\n        )\n        \n        loss = results[0]\n        accuracy = results[1]\n        \n        all_losses.append(loss)\n        all_accuracies.append(accuracy)\n        \n        if step % 5 == 0:  # Print every 5 steps\n            print(f\"  Step {step+1}/{steps_per_epoch} - Loss: {loss:.4f}, Acc: {accuracy:.4f}\")\n    \n    return np.mean(all_losses), np.mean(all_accuracies)\n\n# Training loop\nprint(f\"\\n🏃 Starting training...\")\nprint(\"=\" * 60)\n\ntraining_history = {\n    'loss': [],\n    'accuracy': [],\n    'val_loss': [],\n    'val_accuracy': []\n}\n\nfor epoch in range(EPOCHS):\n    print(f\"\\nEpoch {epoch + 1}/{EPOCHS}\")\n    print(\"-\" * 40)\n    \n    # Training\n    print(\"Training...\")\n    train_loss, train_acc = train_step_generator(train_model, train_generator, STEPS_PER_EPOCH)\n    \n    training_history['loss'].append(train_loss)\n    training_history['accuracy'].append(train_acc)\n    \n    print(f\"Train - Loss: {train_loss:.4f}, Accuracy: {train_acc:.4f}\")\n    \n    # Validation\n    if val_generator and VALIDATION_STEPS > 0:\n        print(\"Validating...\")\n        val_losses = []\n        val_accs = []\n        \n        for step in range(VALIDATION_STEPS):\n            batch_indices = np.random.choice(\n                len(val_generator.segments), \n                size=val_generator.batch_size, \n                replace=False\n            )\n            batch_x, batch_y = val_generator.get_batch(batch_indices)\n            \n            results = train_model.evaluate(batch_x, {'classification': batch_y}, verbose=0)\n            val_losses.append(results[0])\n            val_accs.append(results[1])\n        \n        val_loss = np.mean(val_losses)\n        val_acc = np.mean(val_accs)\n        \n        training_history['val_loss'].append(val_loss)\n        training_history['val_accuracy'].append(val_acc)\n        \n        print(f\"Val - Loss: {val_loss:.4f}, Accuracy: {val_acc:.4f}\")\n    else:\n        training_history['val_loss'].append(0)\n        training_history['val_accuracy'].append(0)\n\nprint(f\"\\n✅ Training completed!\")\n\n# Plot training history\nplt.figure(figsize=(12, 4))\n\nplt.subplot(1, 2, 1)\nplt.plot(training_history['loss'], label='Train Loss', marker='o')\nif any(x > 0 for x in training_history['val_loss']):\n    plt.plot(training_history['val_loss'], label='Val Loss', marker='s')\nplt.title('Training Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\nplt.subplot(1, 2, 2)\nplt.plot(training_history['accuracy'], label='Train Accuracy', marker='o')\nif any(x > 0 for x in training_history['val_accuracy']):\n    plt.plot(training_history['val_accuracy'], label='Val Accuracy', marker='s')\nplt.title('Training Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\nprint(\"✅ Training setup and short training run completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.951692Z","iopub.status.idle":"2025-09-02T21:38:07.952242Z","shell.execute_reply":"2025-09-02T21:38:07.951974Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 12: Extract and visualize speaker embeddings\nprint(\"🎯 Extracting speaker embeddings from trained model...\")\n\n# Function to extract embeddings for a speaker\ndef extract_speaker_embeddings(model, file_paths, speaker_labels, speaker_to_id, max_files=10):\n    \"\"\"Extract embeddings for speakers\"\"\"\n    \n    embeddings_dict = {}\n    \n    for speaker in set(speaker_labels):\n        if speaker not in speaker_to_id:\n            continue\n            \n        speaker_files = [fp for fp, sl in zip(file_paths, speaker_labels) if sl == speaker]\n        speaker_files = speaker_files[:max_files]  # Limit files per speaker\n        \n        speaker_embeddings = []\n        \n        print(f\"Processing {speaker}: {len(speaker_files)} files\")\n        \n        for file_path in speaker_files:\n            # Extract features\n            features = extract_mfcc_features(file_path, N_MFCC, SAMPLE_RATE)\n            \n            if features is not None and len(features) >= WINDOW_LENGTH:\n                # Create segments\n                segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n                \n                if len(segments) > 0:\n                    # Get embeddings (take only embedding output)\n                    _, embeddings = model.predict(segments[:5], verbose=0)  # Use first 5 segments\n                    speaker_embeddings.extend(embeddings)\n        \n        if speaker_embeddings:\n            embeddings_dict[speaker] = np.array(speaker_embeddings)\n            print(f\"- {speaker}: {len(speaker_embeddings)} embeddings extracted\")\n    \n    return embeddings_dict\n\n# Extract embeddings\nprint(f\"🔍 Extracting embeddings for training speakers...\")\nspeaker_embeddings = extract_speaker_embeddings(\n    train_model, \n    train_file_paths, \n    train_speaker_labels, \n    train_speaker_to_id,\n    max_files=5  # Limit to 5 files per speaker for speed\n)\n\nprint(f\"\\n📊 Embedding Extraction Results:\")\nfor speaker, embs in speaker_embeddings.items():\n    print(f\"- {speaker}: {embs.shape} embeddings\")\n\n# Calculate speaker centroids (average embeddings)\nprint(f\"\\n📐 Calculating speaker centroids...\")\nspeaker_centroids = {}\nfor speaker, embs in speaker_embeddings.items():\n    centroid = np.mean(embs, axis=0)\n    speaker_centroids[speaker] = centroid\n    print(f\"- {speaker}: centroid shape {centroid.shape}\")\n\n# Visualize embeddings using t-SNE\nprint(f\"\\n🎨 Visualizing embeddings with t-SNE...\")\n\ntry:\n    from sklearn.manifold import TSNE\n    \n    # Prepare data for t-SNE\n    all_embeddings = []\n    all_labels = []\n    \n    for speaker, embs in speaker_embeddings.items():\n        all_embeddings.extend(embs)\n        all_labels.extend([speaker] * len(embs))\n    \n    all_embeddings = np.array(all_embeddings)\n    \n    print(f\"- Total embeddings for visualization: {all_embeddings.shape}\")\n    \n    # Apply t-SNE\n    tsne = TSNE(n_components=2, random_state=42, perplexity=min(30, len(all_embeddings)//4))\n    embeddings_2d = tsne.fit_transform(all_embeddings[:200])  # Use first 200 for speed\n    \n    # Plot t-SNE results\n    plt.figure(figsize=(12, 10))\n    \n    # Individual embeddings\n    plt.subplot(2, 2, 1)\n    unique_speakers = list(set(all_labels[:200]))\n    colors = plt.cm.Set3(np.linspace(0, 1, len(unique_speakers)))\n    \n    for i, speaker in enumerate(unique_speakers):\n        speaker_mask = [l == speaker for l in all_labels[:200]]\n        if any(speaker_mask):\n            speaker_embs = embeddings_2d[speaker_mask]\n            plt.scatter(speaker_embs[:, 0], speaker_embs[:, 1], \n                       c=[colors[i]], label=speaker, alpha=0.7, s=50)\n    \n    plt.title('Speaker Embeddings (t-SNE)')\n    plt.xlabel('t-SNE 1')\n    plt.ylabel('t-SNE 2')\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n    \n    # Speaker centroids\n    plt.subplot(2, 2, 2)\n    centroid_embeddings = np.array(list(speaker_centroids.values()))\n    if len(centroid_embeddings) > 1:\n        centroid_tsne = TSNE(n_components=2, random_state=42, perplexity=min(3, len(centroid_embeddings)//2))\n        centroids_2d = centroid_tsne.fit_transform(centroid_embeddings)\n        \n        for i, speaker in enumerate(speaker_centroids.keys()):\n            plt.scatter(centroids_2d[i, 0], centroids_2d[i, 1], \n                       c=[colors[i % len(colors)]], label=speaker, s=200, marker='*')\n        \n        plt.title('Speaker Centroids (t-SNE)')\n        plt.xlabel('t-SNE 1')\n        plt.ylabel('t-SNE 2')\n        plt.legend()\n    \n    # Embedding distribution\n    plt.subplot(2, 2, 3)\n    plt.hist(all_embeddings.flatten(), bins=50, alpha=0.7, color='skyblue', edgecolor='navy')\n    plt.title('Embedding Value Distribution')\n    plt.xlabel('Embedding Value')\n    plt.ylabel('Count')\n    \n    # Cosine similarity between centroids\n    plt.subplot(2, 2, 4)\n    if len(speaker_centroids) > 1:\n        from sklearn.metrics.pairwise import cosine_similarity\n        \n        centroid_matrix = np.array(list(speaker_centroids.values()))\n        similarity_matrix = cosine_similarity(centroid_matrix)\n        \n        im = plt.imshow(similarity_matrix, cmap='coolwarm', vmin=-1, vmax=1)\n        plt.colorbar(im)\n        plt.title('Cosine Similarity Between Speaker Centroids')\n        \n        speaker_names = list(speaker_centroids.keys())\n        plt.xticks(range(len(speaker_names)), speaker_names, rotation=45, ha='right')\n        plt.yticks(range(len(speaker_names)), speaker_names)\n        \n        # Add similarity values\n        for i in range(len(speaker_names)):\n            for j in range(len(speaker_names)):\n                plt.text(j, i, f'{similarity_matrix[i,j]:.2f}', \n                        ha='center', va='center', color='black', fontsize=8)\n    \n    plt.tight_layout()\n    plt.show()\n    \n    print(\"✅ Embedding visualization completed!\")\n    \nexcept ImportError:\n    print(\"⚠️ scikit-learn not available for t-SNE visualization\")\nexcept Exception as e:\n    print(f\"⚠️ Visualization error: {e}\")\n\nprint(\"✅ Speaker embeddings extracted and visualized!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.953389Z","iopub.status.idle":"2025-09-02T21:38:07.953816Z","shell.execute_reply":"2025-09-02T21:38:07.953594Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 13: Model evaluation and testing\nprint(\"📊 Evaluating X-Vector model performance...\")\n\n# Function to evaluate model on test data\ndef evaluate_speaker_recognition(model, file_paths, speaker_labels, speaker_to_id, max_files_per_speaker=5):\n    \"\"\"Evaluate speaker recognition performance\"\"\"\n    \n    total_correct = 0\n    total_predictions = 0\n    speaker_results = {}\n    \n    print(\"🔍 Testing speaker recognition...\")\n    \n    for speaker in set(speaker_labels):\n        if speaker not in speaker_to_id:\n            continue\n            \n        speaker_files = [fp for fp, sl in zip(file_paths, speaker_labels) if sl == speaker]\n        speaker_files = speaker_files[:max_files_per_speaker]\n        \n        speaker_correct = 0\n        speaker_total = 0\n        \n        print(f\"Testing {speaker}: {len(speaker_files)} files\")\n        \n        for file_path in speaker_files:\n            # Extract features\n            features = extract_mfcc_features(file_path, N_MFCC, SAMPLE_RATE)\n            \n            if features is not None and len(features) >= WINDOW_LENGTH:\n                # Create segments\n                segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n                \n                if len(segments) > 0:\n                    # Get predictions\n                    predictions, _ = model.predict(segments[:3], verbose=0)  # Use first 3 segments\n                    \n                    # Average predictions across segments\n                    avg_prediction = np.mean(predictions, axis=0)\n                    predicted_speaker_id = np.argmax(avg_prediction)\n                    true_speaker_id = speaker_to_id[speaker]\n                    \n                    if predicted_speaker_id == true_speaker_id:\n                        speaker_correct += 1\n                        total_correct += 1\n                    \n                    speaker_total += 1\n                    total_predictions += 1\n        \n        if speaker_total > 0:\n            speaker_accuracy = speaker_correct / speaker_total\n            speaker_results[speaker] = {\n                'correct': speaker_correct,\n                'total': speaker_total,\n                'accuracy': speaker_accuracy\n            }\n            print(f\"- {speaker}: {speaker_correct}/{speaker_total} ({speaker_accuracy*100:.1f}%)\")\n    \n    overall_accuracy = total_correct / total_predictions if total_predictions > 0 else 0\n    \n    return speaker_results, overall_accuracy\n\n# Evaluate on training data subset\ntrain_results, train_accuracy = evaluate_speaker_recognition(\n    train_model, \n    train_file_paths[:20],  # Use first 20 files for quick evaluation\n    train_speaker_labels[:20], \n    train_speaker_to_id\n)\n\nprint(f\"\\n📊 Training Set Evaluation Results:\")\nprint(f\"- Overall Accuracy: {train_accuracy*100:.1f}%\")\nprint(f\"- Random Baseline: {100/train_num_speakers:.1f}%\")\n\n# Create confusion matrix\ndef create_confusion_matrix(model, file_paths, speaker_labels, speaker_to_id):\n    \"\"\"Create confusion matrix for speaker recognition\"\"\"\n    \n    true_labels = []\n    pred_labels = []\n    \n    for i, (file_path, speaker) in enumerate(zip(file_paths, speaker_labels)):\n        if speaker not in speaker_to_id or i >= 15:  # Limit to first 15 files\n            break\n            \n        # Extract features\n        features = extract_mfcc_features(file_path, N_MFCC, SAMPLE_RATE)\n        \n        if features is not None and len(features) >= WINDOW_LENGTH:\n            # Create segments\n            segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n            \n            if len(segments) > 0:\n                # Get prediction\n                predictions, _ = model.predict(segments[:1], verbose=0)\n                predicted_speaker_id = np.argmax(predictions[0])\n                true_speaker_id = speaker_to_id[speaker]\n                \n                true_labels.append(true_speaker_id)\n                pred_labels.append(predicted_speaker_id)\n    \n    return true_labels, pred_labels\n\nprint(f\"\\n🎯 Creating confusion matrix...\")\ntrue_labels, pred_labels = create_confusion_matrix(\n    train_model, \n    train_file_paths, \n    train_speaker_labels, \n    train_speaker_to_id\n)\n\nif len(true_labels) > 0:\n    # Create and plot confusion matrix\n    cm = confusion_matrix(true_labels, pred_labels)\n    \n    plt.figure(figsize=(10, 8))\n    \n    # Plot confusion matrix\n    plt.subplot(1, 2, 1)\n    plt.imshow(cm, interpolation='nearest', cmap='Blues')\n    plt.title('Confusion Matrix')\n    plt.colorbar()\n    \n    speaker_names = [train_id_to_speaker[i] for i in range(train_num_speakers)]\n    tick_marks = np.arange(train_num_speakers)\n    plt.xticks(tick_marks, speaker_names, rotation=45, ha='right')\n    plt.yticks(tick_marks, speaker_names)\n    \n    # Add text annotations\n    thresh = cm.max() / 2.\n    for i, j in np.ndindex(cm.shape):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                horizontalalignment=\"center\",\n                color=\"white\" if cm[i, j] > thresh else \"black\")\n    \n    plt.xlabel('Predicted Label')\n    plt.ylabel('True Label')\n    \n    # Plot accuracy per speaker\n    plt.subplot(1, 2, 2)\n    speaker_accuracies = []\n    speaker_names_ordered = []\n    \n    for speaker, results in train_results.items():\n        speaker_accuracies.append(results['accuracy'] * 100)\n        speaker_names_ordered.append(speaker)\n    \n    bars = plt.bar(range(len(speaker_accuracies)), speaker_accuracies, \n                   color='lightgreen', edgecolor='darkgreen', alpha=0.7)\n    plt.title('Accuracy per Speaker')\n    plt.xlabel('Speaker')\n    plt.ylabel('Accuracy (%)')\n    plt.xticks(range(len(speaker_names_ordered)), speaker_names_ordered, rotation=45, ha='right')\n    \n    # Add value labels on bars\n    for bar, acc in zip(bars, speaker_accuracies):\n        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, \n                f'{acc:.1f}%', ha='center', va='bottom')\n    \n    plt.ylim(0, 105)\n    plt.grid(True, alpha=0.3, axis='y')\n    plt.tight_layout()\n    plt.show()\n    \n    # Calculate additional metrics\n    print(f\"\\n📈 Detailed Results:\")\n    print(f\"- Test samples: {len(true_labels)}\")\n    print(f\"- Correct predictions: {sum(t==p for t,p in zip(true_labels, pred_labels))}\")\n    print(f\"- Accuracy: {sum(t==p for t,p in zip(true_labels, pred_labels))/len(true_labels)*100:.1f}%\")\n\nprint(\"✅ Model evaluation and testing completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.954778Z","iopub.status.idle":"2025-09-02T21:38:07.955318Z","shell.execute_reply":"2025-09-02T21:38:07.955079Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Part 14: Model summary and final results\nprint(\"📋 X-Vector Implementation Summary\")\nprint(\"=\" * 60)\n\n# Dataset Summary\nprint(f\"\\n📊 Dataset Summary:\")\nprint(f\"- Total audio files: {len(df)}\")\nprint(f\"- Total speakers: {len(unique_speakers)}\")\nprint(f\"- Files after filtering (≥{MIN_DURATION}s): {len(df_filtered)}\")\nprint(f\"- Training files used: {len(train_file_paths)}\")\nprint(f\"- Training speakers: {train_num_speakers}\")\nprint(f\"- Audio sample rate: {SAMPLE_RATE} Hz\")\n\n# Feature Summary\nprint(f\"\\n🎯 Feature Extraction Summary:\")\nprint(f\"- MFCC coefficients: {N_MFCC}\")\nprint(f\"- Total features: {INPUT_DIM} (MFCC + Delta + Delta-Delta)\")\nprint(f\"- Window length: {WINDOW_LENGTH} frames\")\nprint(f\"- Step size: {STEP_SIZE} frames\")\n\n# Model Architecture Summary\nprint(f\"\\n🏗️ X-Vector Architecture Summary:\")\nprint(f\"- Input dimension: {INPUT_DIM}\")\nprint(f\"- TDNN layers: 5 layers (512, 512, 512, 512, 1500 units)\")\nprint(f\"- Statistics pooling: Mean + Std concatenation\")\nprint(f\"- Embedding dimension: {EMBEDDING_DIM}\")\nprint(f\"- Output classes: {train_num_speakers}\")\nprint(f\"- Total parameters: {train_model.count_params():,}\")\n\n# Training Summary\nif 'training_history' in locals():\n    final_train_loss = training_history['loss'][-1]\n    final_train_acc = training_history['accuracy'][-1]\n    \n    print(f\"\\n🏃 Training Summary:\")\n    print(f\"- Epochs completed: {EPOCHS}\")\n    print(f\"- Steps per epoch: {STEPS_PER_EPOCH}\")\n    print(f\"- Final training loss: {final_train_loss:.4f}\")\n    print(f\"- Final training accuracy: {final_train_acc:.4f} ({final_train_acc*100:.1f}%)\")\n    print(f\"- Random baseline: {100/train_num_speakers:.1f}%\")\n\n# Performance Summary\nif 'train_accuracy' in locals():\n    print(f\"\\n📊 Performance Summary:\")\n    print(f\"- Overall test accuracy: {train_accuracy*100:.1f}%\")\n    print(f\"- Improvement over random: {(train_accuracy - 1/train_num_speakers)*100:.1f}%\")\n    \n    if 'train_results' in locals():\n        print(f\"- Per-speaker accuracies:\")\n        for speaker, results in train_results.items():\n            print(f\"  • {speaker}: {results['accuracy']*100:.1f}%\")\n\n# Save model function\ndef save_xvector_model(model, filepath=\"xvector_model\"):\n    \"\"\"Save the trained X-Vector model\"\"\"\n    try:\n        model.save(f\"{filepath}.h5\")\n        print(f\"✅ Model saved to {filepath}.h5\")\n        \n        # Save mappings\n        import pickle\n        mappings = {\n            'speaker_to_id': train_speaker_to_id,\n            'id_to_speaker': train_id_to_speaker,\n            'num_speakers': train_num_speakers,\n            'embedding_dim': EMBEDDING_DIM,\n            'input_dim': INPUT_DIM\n        }\n        \n        with open(f\"{filepath}_mappings.pkl\", 'wb') as f:\n            pickle.dump(mappings, f)\n        print(f\"✅ Speaker mappings saved to {filepath}_mappings.pkl\")\n        \n        return True\n    except Exception as e:\n        print(f\"❌ Error saving model: {e}\")\n        return False\n\n# Demo inference function\ndef demo_speaker_recognition(model, file_path, speaker_to_id, id_to_speaker, top_k=3):\n    \"\"\"Demo function for speaker recognition inference\"\"\"\n    \n    print(f\"🎤 Speaker Recognition Demo\")\n    print(f\"File: {os.path.basename(file_path)}\")\n    \n    try:\n        # Extract features\n        features = extract_mfcc_features(file_path, N_MFCC, SAMPLE_RATE)\n        \n        if features is None or len(features) < WINDOW_LENGTH:\n            print(\"❌ Could not extract features or audio too short\")\n            return None\n        \n        # Create segments\n        segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n        \n        if len(segments) == 0:\n            print(\"❌ Could not create segments\")\n            return None\n        \n        # Get predictions\n        predictions, embeddings = model.predict(segments[:5], verbose=0)  # Use up to 5 segments\n        \n        # Average predictions\n        avg_prediction = np.mean(predictions, axis=0)\n        avg_embedding = np.mean(embeddings, axis=0)\n        \n        # Get top-k predictions\n        top_indices = np.argsort(avg_prediction)[-top_k:][::-1]\n        \n        print(f\"\\n🏆 Top {top_k} Predictions:\")\n        for i, idx in enumerate(top_indices):\n            speaker_name = id_to_speaker[idx]\n            confidence = avg_prediction[idx] * 100\n            print(f\"{i+1}. {speaker_name}: {confidence:.2f}%\")\n        \n        print(f\"\\n📊 Prediction Details:\")\n        print(f\"- Segments processed: {len(segments[:5])}\")\n        print(f\"- Embedding norm: {np.linalg.norm(avg_embedding):.4f}\")\n        print(f\"- Max confidence: {np.max(avg_prediction)*100:.2f}%\")\n        \n        return {\n            'predictions': avg_prediction,\n            'embedding': avg_embedding,\n            'top_speaker': id_to_speaker[top_indices[0]],\n            'confidence': avg_prediction[top_indices[0]]\n        }\n        \n    except Exception as e:\n        print(f\"❌ Error in demo inference: {e}\")\n        return None\n\n# Run demo on a sample file\nprint(f\"\\n🎭 Running Speaker Recognition Demo:\")\nif len(train_file_paths) > 0:\n    demo_file = train_file_paths[0]\n    demo_result = demo_speaker_recognition(\n        train_model, \n        demo_file, \n        train_speaker_to_id, \n        train_id_to_speaker\n    )\n\n# Final recommendations\nprint(f\"\\n💡 Next Steps and Recommendations:\")\nprint(f\"1. 📈 Increase training data (use more files per speaker)\")\nprint(f\"2. ⏰ Train for more epochs with early stopping\")\nprint(f\"3. 🔧 Implement data augmentation (noise, speed perturbation)\")\nprint(f\"4. 📊 Add validation set with unseen speakers\")\nprint(f\"5. 🎯 Implement triplet loss for better embeddings\")\nprint(f\"6. 📱 Add real-time inference capabilities\")\nprint(f\"7. 🧪 Experiment with different TDNN architectures\")\nprint(f\"8. 💾 Save and version your trained models\")\n\n# Save model (optional)\nprint(f\"\\n💾 Model Saving:\")\nsave_choice = input(\"Do you want to save the trained model? (y/n): \").lower().strip()\nif save_choice == 'y':\n    success = save_xvector_model(train_model, \"xvector_speaker_model\")\n    if success:\n        print(\"✅ Model and mappings saved successfully!\")\nelse:\n    print(\"ℹ️ Model not saved\")\n\nprint(f\"\\n🎉 X-Vector Implementation Complete!\")\nprint(\"=\" * 60)\nprint(\"You now have a working X-Vector speaker recognition system!\")\nprint(\"The model can extract speaker embeddings and perform speaker classification.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.956514Z","iopub.status.idle":"2025-09-02T21:38:07.957040Z","shell.execute_reply":"2025-09-02T21:38:07.956812Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Complete X-Vector Speaker Recognition Implementation\n# Run this complete script if you want everything in one go\n\nimport os\nimport numpy as np \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport librosa\nimport librosa.display\nfrom tqdm import tqdm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\n\nprint(\"🚀 Complete X-Vector Speaker Recognition System\")\nprint(\"=\" * 60)\n\n# ===== CONFIGURATION =====\nDATA_PATH = \"/kaggle/input/speaker-recognition-dataset/16000_pcm_speeches/\"\nSAMPLE_RATE = 16000\nN_MFCC = 23\nWINDOW_LENGTH = 400\nSTEP_SIZE = 200\nMIN_DURATION = 2.0\nEMBEDDING_DIM = 512\nBATCH_SIZE = 16\nEPOCHS = 5\nINPUT_DIM = N_MFCC * 3  # MFCC + Delta + Delta-Delta\n\nprint(f\"📋 Configuration loaded: {N_MFCC} MFCC features, {EMBEDDING_DIM}D embeddings\")\n\n# ===== DATA LOADING =====\ndef load_dataset():\n    \"\"\"Load and prepare dataset\"\"\"\n    speakers = [f for f in os.listdir(DATA_PATH) \n                if os.path.isdir(os.path.join(DATA_PATH, f)) \n                and not f.startswith(\"_\")]\n    \n    data_info = []\n    for spk in tqdm(speakers, desc=\"Loading dataset\"):\n        folder = os.path.join(DATA_PATH, spk)\n        files = [f for f in os.listdir(folder) if f.endswith(\".wav\")]\n        \n        for f in files[:100]:  # Limit files for demo\n            file_path = os.path.join(folder, f)\n            try:\n                y, sr = librosa.load(file_path, sr=None)\n                duration = len(y) / sr\n                if duration >= MIN_DURATION:\n                    data_info.append([spk, f, sr, duration, file_path])\n            except:\n                continue\n    \n    return pd.DataFrame(data_info, columns=[\"speaker\", \"file\", \"sample_rate\", \"duration\", \"file_path\"])\n\n# ===== FEATURE EXTRACTION =====\ndef extract_mfcc_features(file_path, n_mfcc=23, sr=16000):\n    \"\"\"Extract MFCC + Delta + Delta-Delta features\"\"\"\n    try:\n        y, _ = librosa.load(file_path, sr=sr)\n        mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc, n_fft=512, hop_length=160)\n        delta_mfccs = librosa.feature.delta(mfccs)\n        delta2_mfccs = librosa.feature.delta(mfccs, order=2)\n        features = np.vstack([mfccs, delta_mfccs, delta2_mfccs])\n        return features.T\n    except:\n        return None\n\ndef create_segments(features, window_length=400, step_size=200):\n    \"\"\"Create fixed-length segments\"\"\"\n    if features is None or len(features) < window_length:\n        return []\n    \n    segments = []\n    start = 0\n    while start + window_length <= len(features):\n        segments.append(features[start:start + window_length])\n        start += step_size\n    return np.array(segments)\n\n# ===== X-VECTOR ARCHITECTURE =====\ndef create_xvector_model(input_dim, num_speakers, embedding_dim=512):\n    \"\"\"Create X-Vector model\"\"\"\n    input_layer = keras.Input(shape=(None, input_dim), name='input_features')\n    \n    # TDNN Layers\n    x = layers.Dense(512, activation='relu', name='tdnn1')(input_layer)\n    x = layers.BatchNormalization(name='bn1')(x)\n    x = layers.Dense(512, activation='relu', name='tdnn2')(x)\n    x = layers.BatchNormalization(name='bn2')(x)\n    x = layers.Dense(512, activation='relu', name='tdnn3')(x)\n    x = layers.BatchNormalization(name='bn3')(x)\n    x = layers.Dense(512, activation='relu', name='tdnn4')(x)\n    x = layers.BatchNormalization(name='bn4')(x)\n    frame_features = layers.Dense(1500, activation='relu', name='tdnn5')(x)\n    frame_features = layers.BatchNormalization(name='bn5')(frame_features)\n    \n    # Statistics Pooling\n    mean_pool = layers.Lambda(lambda x: tf.reduce_mean(x, axis=1), name='mean_pool')(frame_features)\n    std_pool = layers.Lambda(lambda x: tf.math.reduce_std(x, axis=1), name='std_pool')(frame_features)\n    stats_pool = layers.Concatenate(name='stats_pool')([mean_pool, std_pool])\n    \n    # Segment-level layers\n    x = layers.Dense(512, activation='relu', name='segment1')(stats_pool)\n    x = layers.BatchNormalization(name='bn6')(x)\n    \n    # Embedding and Classification\n    xvector_embedding = layers.Dense(embedding_dim, activation='relu', name='xvector_embedding')(x)\n    xvector_embedding = layers.BatchNormalization(name='bn_embedding')(xvector_embedding)\n    output = layers.Dense(num_speakers, activation='softmax', name='classification')(xvector_embedding)\n    \n    return keras.Model(inputs=input_layer, outputs=[output, xvector_embedding], name='XVector')\n\n# ===== DATA GENERATOR =====\nclass XVectorDataGenerator:\n    \"\"\"Efficient data generator for training\"\"\"\n    def __init__(self, file_paths, speaker_labels, speaker_to_id, batch_size=16):\n        self.file_paths = file_paths\n        self.speaker_labels = speaker_labels\n        self.speaker_to_id = speaker_to_id\n        self.batch_size = batch_size\n        self.num_speakers = len(speaker_to_id)\n        self._prepare_segments()\n    \n    def _prepare_segments(self):\n        \"\"\"Pre-compute all segments\"\"\"\n        self.segments = []\n        self.segment_labels = []\n        \n        for file_path, speaker in zip(self.file_paths, self.speaker_labels):\n            if speaker not in self.speaker_to_id:\n                continue\n            \n            features = extract_mfcc_features(file_path, N_MFCC, SAMPLE_RATE)\n            if features is not None:\n                file_segments = create_segments(features, WINDOW_LENGTH, STEP_SIZE)\n                if len(file_segments) > 0:\n                    self.segments.extend(file_segments)\n                    speaker_id = self.speaker_to_id[speaker]\n                    self.segment_labels.extend([speaker_id] * len(file_segments))\n        \n        self.segments = np.array(self.segments)\n        self.segment_labels = np.array(self.segment_labels)\n    \n    def get_batch(self, batch_indices):\n        \"\"\"Get training batch\"\"\"\n        batch_x = self.segments[batch_indices]\n        batch_y = np.eye(self.num_speakers)[self.segment_labels[batch_indices]]\n        return batch_x, batch_y\n    \n    def __len__(self):\n        return len(self.segments) // self.batch_size\n\n# ===== MAIN EXECUTION =====\ndef main():\n    \"\"\"Main execution function\"\"\"\n    \n    # Load dataset\n    print(\"📊 Loading dataset...\")\n    df = load_dataset()\n    print(f\"Loaded {len(df)} files from {df['speaker'].nunique()} speakers\")\n    \n    # Prepare speakers and labels\n    unique_speakers = sorted(df['speaker'].unique())\n    speaker_to_id = {spk: i for i, spk in enumerate(unique_speakers)}\n    id_to_speaker = {i: spk for spk, i in speaker_to_id.items()}\n    \n    # Train/test split\n    train_data, test_data = train_test_split(df, test_size=0.2, stratify=df['speaker'], random_state=42)\n    \n    # Create model\n    print(\"🏗️ Creating X-Vector model...\")\n    model = create_xvector_model(INPUT_DIM, len(unique_speakers), EMBEDDING_DIM)\n    model.compile(\n        optimizer=keras.optimizers.Adam(learning_rate=0.001),\n        loss={'classification': 'categorical_crossentropy'},\n        metrics={'classification': 'accuracy'}\n    )\n    \n    # Create data generator\n    print(\"🏭 Preparing training data...\")\n    generator = XVectorDataGenerator(\n        train_data['file_path'].values[:50],  # Use subset for demo\n        train_data['speaker'].values[:50],\n        speaker_to_id,\n        BATCH_SIZE\n    )\n    \n    print(f\"Generated {len(generator.segments)} segments for training\")\n    \n    # Training loop\n    print(\"🚀 Training X-Vector model...\")\n    for epoch in range(EPOCHS):\n        print(f\"\\nEpoch {epoch+1}/{EPOCHS}\")\n        \n        # Training steps\n        total_loss = 0\n        total_acc = 0\n        steps = min(20, len(generator))  # Limit steps for demo\n        \n        for step in range(steps):\n            batch_indices = np.random.choice(len(generator.segments), BATCH_SIZE, replace=False)\n            batch_x, batch_y = generator.get_batch(batch_indices)\n            \n            results = model.train_on_batch(batch_x, {'classification': batch_y})\n            total_loss += results[0]\n            total_acc += results[1]\n            \n            if step % 5 == 0:\n                print(f\"Step {step+1}/{steps} - Loss: {results[0]:.4f}, Acc: {results[1]:.4f}\")\n        \n        avg_loss = total_loss / steps\n        avg_acc = total_acc / steps\n        print(f\"Epoch {epoch+1} - Avg Loss: {avg_loss:.4f}, Avg Acc: {avg_acc:.4f}\")\n    \n    # Evaluation\n    print(\"\\n📊 Evaluating model...\")\n    test_batch_indices = np.random.choice(len(generator.segments), BATCH_SIZE, replace=False)\n    test_x, test_y = generator.get_batch(test_batch_indices)\n    \n    test_results = model.evaluate(test_x, {'classification': test_y}, verbose=0)\n    print(f\"Test Loss: {test_results[0]:.4f}, Test Accuracy: {test_results[1]:.4f}\")\n    \n    # Demo prediction\n    print(\"\\n🎭 Demo prediction...\")\n    predictions, embeddings = model.predict(test_x[:1], verbose=0)\n    predicted_speaker = id_to_speaker[np.argmax(predictions[0])]\n    confidence = np.max(predictions[0])\n    print(f\"Predicted speaker: {predicted_speaker} (confidence: {confidence:.2f})\")\n    \n    print(\"\\n🎉 X-Vector implementation completed successfully!\")\n    print(f\"Final model accuracy: {test_results[1]*100:.1f}%\")\n    \n    return model, speaker_to_id, id_to_speaker\n\n# Run the complete implementation\nif __name__ == \"__main__\":\n    model, speaker_to_id, id_to_speaker = main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-02T21:38:07.958100Z","iopub.status.idle":"2025-09-02T21:38:07.958651Z","shell.execute_reply":"2025-09-02T21:38:07.958295Z"}},"outputs":[],"execution_count":null}]}